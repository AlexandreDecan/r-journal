<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml producer="poppler" version="0.30.0">
<page number="1" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="0" size="12" family="Times" color="#000000"/>
	<fontspec id="1" size="9" family="Times" color="#000000"/>
	<fontspec id="2" size="35" family="Times" color="#000000"/>
	<fontspec id="3" size="12" family="Times" color="#000000"/>
	<fontspec id="4" size="12" family="Times" color="#00004c"/>
	<fontspec id="5" size="19" family="Times" color="#000000"/>
	<fontspec id="6" size="7" family="Helvetica" color="#000000"/>
	<fontspec id="7" size="7" family="Helvetica" color="#000000"/>
	<fontspec id="8" size="7" family="Helvetica" color="#000000"/>
	<fontspec id="9" size="1" family="Times" color="#ffffff"/>
	<fontspec id="10" size="9" family="Times" color="#00004c"/>
	<fontspec id="11" size="6" family="Times" color="#000000"/>
	<fontspec id="12" size="9" family="Times" color="#000000"/>
<text top="67" left="83" width="11" height="15" font="0">C</text>
<text top="69" left="94" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="184" width="10" height="15" font="0">R</text>
<text top="69" left="195" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="261" width="12" height="15" font="0">A</text>
<text top="69" left="273" width="53" height="12" font="1">RTICLES</text>
<text top="67" left="790" width="15" height="15" font="0">15</text>
<text top="121" left="82" width="449" height="36" font="2"><b>Drawing Diagrams with R</b></text>
<text top="173" left="82" width="98" height="15" font="0">by Paul Murrell</text>
<text top="210" left="82" width="346" height="15" font="0">R provides a number of well-known high-level facil-</text>
<text top="228" left="82" width="346" height="15" font="0">ities for producing sophisticated statistical plots, in-</text>
<text top="246" left="82" width="346" height="15" font="0">cluding the “traditional” plots in the <b>graphics </b>pack-</text>
<text top="264" left="82" width="34" height="15" font="0">age <a href="2009-1-RJournal_2009-1_Murrell.html#6">(</a></text>
<text top="264" left="117" width="185" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">R Development Core Team</a></text>
<text top="264" left="302" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="264" left="312" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">2008</a></text>
<text top="264" left="342" width="87" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">), </a>the Trellis-</text>
<text top="282" left="82" width="205" height="15" font="0">style plots provided by <b>lattice </b><a href="2009-1-RJournal_2009-1_Murrell.html#7">(</a></text>
<text top="282" left="287" width="43" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">Sarkar</a></text>
<text top="282" left="330" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">,</a></text>
<text top="282" left="337" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">2008</a></text>
<text top="282" left="367" width="62" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">), </a>and the</text>
<text top="300" left="82" width="346" height="15" font="0">grammar-of-graphics-inspired approach of <b>ggplot2</b></text>
<text top="317" left="82" width="5" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">(</a></text>
<text top="317" left="87" width="63" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">Wickham</a></text>
<text top="317" left="150" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">,</a></text>
<text top="317" left="158" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">2009</a></text>
<text top="317" left="188" width="9" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">).</a></text>
<text top="337" left="105" width="324" height="15" font="0">However, R also provides a powerful set of low-</text>
<text top="354" left="82" width="346" height="15" font="0">level graphics facilities for drawing basic shapes and,</text>
<text top="372" left="82" width="346" height="15" font="0">more importantly, for arranging those shapes relative</text>
<text top="390" left="82" width="346" height="15" font="0">to each other, which can be used to draw a wide vari-</text>
<text top="408" left="82" width="346" height="15" font="0">ety of graphical images. This article highlights some</text>
<text top="426" left="82" width="346" height="15" font="0">of R’s low-level graphics facilities by demonstrating</text>
<text top="444" left="82" width="346" height="15" font="0">their use in the production of diagrams. In particular,</text>
<text top="462" left="82" width="346" height="15" font="0">the focus will be on some of the useful things that can</text>
<text top="480" left="82" width="346" height="15" font="0">be done with the low-level facilities provided by the</text>
<text top="498" left="82" width="28" height="15" font="3"><b>grid</b></text>
<text top="498" left="114" width="123" height="15" font="0">graphics package <a href="2009-1-RJournal_2009-1_Murrell.html#6">(</a></text>
<text top="498" left="238" width="51" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">Murrell</a></text>
<text top="498" left="288" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="498" left="296" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">2002</a></text>
<text top="498" left="326" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="498" left="333" width="38" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">2005b</a></text>
<text top="498" left="371" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="498" left="375" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">a</a></text>
<text top="498" left="383" width="9" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">).</a></text>
<text top="552" left="82" width="181" height="21" font="5"><b>Starting at the end</b></text>
<text top="593" left="82" width="346" height="15" font="0">An example of the type of diagram that we are going</text>
<text top="610" left="82" width="346" height="15" font="0">to work towards is shown below. We have several</text>
<text top="628" left="82" width="346" height="15" font="0">“boxes” that describe table schema for a database,</text>
<text top="646" left="82" width="346" height="15" font="0">with lines and arrows between the boxes to show the</text>
<text top="664" left="82" width="191" height="15" font="0">relationships between tables.</text>
<text top="713" left="248" width="51" height="9" font="6"><b>book_table</b></text>
<text top="725" left="248" width="23" height="9" font="6"><b>ISBN</b></text>
<text top="736" left="248" width="15" height="9" font="7">title</text>
<text top="748" left="248" width="16" height="9" font="8"><i>pub</i></text>
<text top="713" left="342" width="71" height="9" font="6"><b>publisher_table</b></text>
<text top="725" left="342" width="10" height="9" font="6"><b>ID</b></text>
<text top="736" left="342" width="24" height="9" font="7">name</text>
<text top="748" left="342" width="32" height="9" font="7">country</text>
<text top="782" left="244" width="58" height="9" font="6"><b>author_table</b></text>
<text top="794" left="244" width="10" height="9" font="6"><b>ID</b></text>
<text top="805" left="244" width="24" height="9" font="7">name</text>
<text top="817" left="244" width="30" height="9" font="8"><i>gender</i></text>
<text top="730" left="109" width="86" height="9" font="6"><b>book_author_table</b></text>
<text top="742" left="109" width="10" height="9" font="6"><b>ID</b></text>
<text top="753" left="109" width="21" height="9" font="8"><i>book</i></text>
<text top="765" left="109" width="27" height="9" font="8"><i>author</i></text>
<text top="788" left="347" width="60" height="9" font="6"><b>gender_table</b></text>
<text top="800" left="347" width="10" height="9" font="6"><b>ID</b></text>
<text top="811" left="347" width="30" height="9" font="7">gender</text>
<text top="750" left="297" width="2" height="3" font="9">●</text>
<text top="755" left="193" width="2" height="3" font="9">●</text>
<text top="767" left="193" width="2" height="3" font="9">●</text>
<text top="819" left="300" width="2" height="3" font="9">●</text>
<text top="864" left="82" width="346" height="15" font="0">To forestall some possible misunderstandings, the</text>
<text top="881" left="82" width="346" height="15" font="0">sort of diagram that we are talking about is one that</text>
<text top="899" left="82" width="346" height="15" font="0">is designed by hand. This is not a diagram that has</text>
<text top="917" left="82" width="184" height="15" font="0">been automatically laid out.</text>
<text top="936" left="105" width="324" height="15" font="0">The sort of diagram being addressed is one where</text>
<text top="954" left="82" width="346" height="15" font="0">the author of the diagram has a clear idea of what the</text>
<text top="972" left="82" width="346" height="15" font="0">end result will roughly look like—the sort of diagram</text>
<text top="990" left="82" width="346" height="15" font="0">that can be sketched with pen and paper. The task is</text>
<text top="1008" left="82" width="346" height="15" font="0">to produce a pre-planned design, using a computer</text>
<text top="1026" left="82" width="160" height="15" font="0">to get a nice crisp result.</text>
<text top="1045" left="105" width="324" height="15" font="0">That being said, a reasonable question is “why</text>
<text top="1063" left="82" width="346" height="15" font="0">not draw it by hand?”, for example, using a free-</text>
<text top="1081" left="82" width="248" height="15" font="0">hand drawing program such as <b>Dia </b><a href="2009-1-RJournal_2009-1_Murrell.html#6">(</a></text>
<text top="1081" left="330" width="52" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">Larsson</a></text>
<text top="1081" left="382" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="1081" left="390" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">2008</a></text>
<text top="1081" left="420" width="9" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">).</a></text>
<text top="1099" left="82" width="346" height="15" font="0">The advantage of using R code to produce this sort</text>
<text top="1117" left="82" width="346" height="15" font="0">of image is that code is easier to reproduce, reuse,</text>
<text top="1135" left="82" width="346" height="15" font="0">maintain, and fine-tune with accuracy. The thought</text>
<text top="173" left="459" width="346" height="15" font="0">of creating this sort of diagram by pushing objects</text>
<text top="191" left="459" width="346" height="15" font="0">around the screen with a mouse fills me with dread.</text>
<text top="209" left="459" width="232" height="15" font="0">Maybe I’m just not a very GUI guy.</text>
<text top="229" left="481" width="324" height="15" font="0">Before we look at drawing diagrams with the core</text>
<text top="247" left="459" width="346" height="15" font="0">R graphics facilties, it is important to acknowledge</text>
<text top="265" left="459" width="346" height="15" font="0">that several contributed R packages already pro-</text>
<text top="283" left="459" width="346" height="15" font="0">vide facilities for drawing diagrams. The <b>Rgraphviz</b></text>
<text top="301" left="459" width="5" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">(</a></text>
<text top="301" left="464" width="81" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">Gentry et al.</a></text>
<text top="301" left="545" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="301" left="553" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">2008</a></text>
<text top="301" left="583" width="91" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">) </a>and <b>igraph </b><a href="2009-1-RJournal_2009-1_Murrell.html#6">(</a></text>
<text top="301" left="674" width="128" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">Csardi and Nepusz</a></text>
<text top="301" left="802" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="319" left="459" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">2006</a></text>
<text top="319" left="489" width="317" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">) </a>packages provide automated layout of node-</text>
<text top="336" left="459" width="346" height="15" font="0">and-edge graphs, and the <b>shape </b>and <b>diagram </b>pack-</text>
<text top="354" left="459" width="39" height="15" font="0">ages <a href="2009-1-RJournal_2009-1_Murrell.html#7">(</a></text>
<text top="354" left="498" width="53" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">Soetaert</a></text>
<text top="354" left="551" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">,</a></text>
<text top="354" left="560" width="38" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">2008b</a></text>
<text top="354" left="598" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">,</a></text>
<text top="354" left="602" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#7">a</a></text>
<text top="354" left="609" width="196" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#7">) </a>provide functions for draw-</text>
<text top="372" left="459" width="346" height="15" font="0">ing nodes of various shapes with lines and arrows</text>
<text top="390" left="459" width="318" height="15" font="0">between them, with manual control over layout.</text>
<text top="410" left="481" width="324" height="15" font="0">In this article, we will only be concerned with</text>
<text top="428" left="459" width="346" height="15" font="0">drawing diagrams with a small number of elements,</text>
<text top="446" left="459" width="346" height="15" font="0">so we do not need the automated layout facilities</text>
<text top="464" left="459" width="169" height="15" font="0">of <b>Rgraphviz </b>or <b>igraph</b>.</text>
<text top="464" left="644" width="161" height="15" font="0">Furthermore, while the</text>
<text top="482" left="459" width="40" height="15" font="3"><b>shape</b></text>
<text top="482" left="504" width="301" height="15" font="0">and <b>diagram </b>packages provide flexible tools</text>
<text top="500" left="459" width="346" height="15" font="0">for building node-and-edge diagrams, the point of</text>
<text top="518" left="459" width="346" height="15" font="0">this article is to demonstrate low-level <b>grid </b>func-</text>
<text top="536" left="459" width="346" height="15" font="0">tions. We will use a node-and-edge diagram as the</text>
<text top="554" left="459" width="346" height="15" font="0">motivation, but the underlying ideas can be applied</text>
<text top="572" left="459" width="255" height="15" font="0">to a much wider range of applications.</text>
<text top="592" left="481" width="324" height="15" font="0">In each of the following sections, we will meet a</text>
<text top="610" left="459" width="346" height="15" font="0">basic low-level graphical tool and demonstrate how</text>
<text top="628" left="459" width="346" height="15" font="0">it can be used in the generation of the pieces of an</text>
<text top="646" left="459" width="346" height="15" font="0">overall diagram, or how the tool can be used to com-</text>
<text top="664" left="459" width="267" height="15" font="0">bine pieces together in convenient ways.</text>
<text top="723" left="459" width="205" height="21" font="5"><b>Graphical primitives</b></text>
<text top="766" left="459" width="346" height="15" font="0">One of the core low-level facilities of R graphics is the</text>
<text top="784" left="459" width="346" height="15" font="0">ability to draw basic shapes. The typical graphical</text>
<text top="802" left="459" width="346" height="15" font="0">primitives such as text, circles, lines, and rectangles</text>
<text top="820" left="459" width="107" height="15" font="0">are all available.</text>
<text top="840" left="481" width="324" height="15" font="0">In this case, the shape of each box in our dia-</text>
<text top="858" left="459" width="346" height="15" font="0">gram is not quite as simple as a rectangle because it</text>
<text top="876" left="459" width="346" height="15" font="0">has rounded corners. However, a rounded rectangle</text>
<text top="894" left="459" width="346" height="15" font="0">is also one of the graphical primitives that the <b>grid</b></text>
<text top="912" left="459" width="120" height="15" font="0">package pr<a href="2009-1-RJournal_2009-1_Murrell.html#1">ovides.</a></text>
<text top="909" left="579" width="6" height="11" font="10"><a href="2009-1-RJournal_2009-1_Murrell.html#1">1</a></text>
<text top="932" left="481" width="324" height="15" font="0">The code below draws a rounded rectangle with</text>
<text top="950" left="459" width="167" height="15" font="0">a text label in the middle.</text>
<text top="993" left="459" width="114" height="12" font="0">&gt; library(grid)</text>
<text top="1033" left="459" width="206" height="12" font="0">&gt; grid.roundrect(width=.25)</text>
<text top="1051" left="459" width="145" height="12" font="0">&gt; grid.text(&#34;ISBN&#34;)</text>
<text top="1113" left="621" width="22" height="9" font="7">ISBN</text>
<text top="1159" left="99" width="4" height="9" font="11">1</text>
<text top="1161" left="104" width="701" height="12" font="1">From R version 2.9.0; prior to that, a simpler rounded rectangle was available via the grid.roundRect() function in the <b>RGraphics</b></text>
<text top="1175" left="82" width="46" height="12" font="1">package.</text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
<text top="67" left="82" width="15" height="15" font="0">16</text>
<text top="67" left="562" width="11" height="15" font="0">C</text>
<text top="69" left="573" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="664" width="10" height="15" font="0">R</text>
<text top="69" left="674" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="740" width="12" height="15" font="0">A</text>
<text top="69" left="752" width="53" height="12" font="1">RTICLES</text>
<text top="121" left="82" width="102" height="21" font="5"><b>Viewports</b></text>
<text top="159" left="82" width="346" height="15" font="0">A feature of the boxes in the diagram at the begin-</text>
<text top="177" left="82" width="346" height="15" font="0">ning of this article is that the text is carefully posi-</text>
<text top="195" left="82" width="346" height="15" font="0">tioned relative to the rounded rectangle; the text is</text>
<text top="213" left="82" width="346" height="15" font="0">left-aligned within the rectangle. This careful posi-</text>
<text top="231" left="82" width="346" height="15" font="0">tioning requires knowing where the left edge of the</text>
<text top="249" left="82" width="346" height="15" font="0">rectangle is on the page. Calculating those positions</text>
<text top="267" left="82" width="346" height="15" font="0">is annoyingly tricky and only becomes more annoy-</text>
<text top="285" left="82" width="346" height="15" font="0">ing if at some later point the position of the box is</text>
<text top="303" left="82" width="346" height="15" font="0">adjusted and the positions of the text labels have to</text>
<text top="321" left="82" width="183" height="15" font="0">be calculated all over again.</text>
<text top="339" left="105" width="324" height="15" font="0">Using a <b>grid </b>viewport makes this sort of position-</text>
<text top="356" left="82" width="346" height="15" font="0">ing very simple. The basic idea is that we can create</text>
<text top="374" left="82" width="346" height="15" font="0">a viewport where the box is going to be drawn and</text>
<text top="392" left="82" width="346" height="15" font="0">then do all of our drawing within that viewport. Po-</text>
<text top="410" left="82" width="346" height="15" font="0">sitioning text at the left edge of a viewport is very</text>
<text top="428" left="82" width="346" height="15" font="0">straightforward, and if we need to shift the box, we</text>
<text top="446" left="82" width="346" height="15" font="0">simply shift the viewport and the text automatically</text>
<text top="464" left="82" width="346" height="15" font="0">tags along for the ride. All of this applies equally to</text>
<text top="482" left="82" width="297" height="15" font="0">positioning the text vertically within the box.</text>
<text top="500" left="105" width="324" height="15" font="0">In the code below, we create a viewport for the</text>
<text top="518" left="82" width="346" height="15" font="0">overall box, we draw a rounded rectangle occupying</text>
<text top="536" left="82" width="346" height="15" font="0">the entire viewport, then we draw text 2 mm from</text>
<text top="554" left="82" width="346" height="15" font="0">the left hand edge of the viewport and 1.5 lines of</text>
<text top="572" left="82" width="346" height="15" font="0">text up from the bottom of the viewport. A second</text>
<text top="590" left="82" width="346" height="15" font="0">line of text is also added, 0.5 lines of text from the</text>
<text top="608" left="82" width="51" height="15" font="0">bottom.</text>
<text top="639" left="82" width="267" height="12" font="0">&gt; pushViewport(viewport(width=.25))</text>
<text top="657" left="82" width="137" height="12" font="0">&gt; grid.roundrect()</text>
<text top="675" left="82" width="145" height="12" font="0">&gt; grid.text(&#34;ISBN&#34;,</text>
<text top="693" left="174" width="122" height="12" font="0">x=unit(2, &#34;mm&#34;),</text>
<text top="711" left="174" width="160" height="12" font="0">y=unit(1.5, &#34;lines&#34;),</text>
<text top="729" left="174" width="91" height="12" font="0">just=&#34;left&#34;)</text>
<text top="747" left="82" width="152" height="12" font="0">&gt; grid.text(&#34;title&#34;,</text>
<text top="765" left="174" width="122" height="12" font="0">x=unit(2, &#34;mm&#34;),</text>
<text top="783" left="174" width="160" height="12" font="0">y=unit(0.5, &#34;lines&#34;),</text>
<text top="801" left="174" width="91" height="12" font="0">just=&#34;left&#34;)</text>
<text top="818" left="82" width="114" height="12" font="0">&gt; popViewport()</text>
<text top="881" left="217" width="22" height="9" font="7">ISBN</text>
<text top="892" left="217" width="15" height="9" font="7">title</text>
<text top="937" left="82" width="193" height="21" font="5"><b>Coordinate systems</b></text>
<text top="976" left="82" width="346" height="15" font="0">The positioning of the labels within the viewport in</text>
<text top="994" left="82" width="346" height="15" font="0">the previous example demonstrates another useful</text>
<text top="1012" left="82" width="346" height="15" font="0">feature of the <b>grid </b>graphics system: the fact that loca-</text>
<text top="1030" left="82" width="346" height="15" font="0">tions can be specified in a variety of coordinate sys-</text>
<text top="1048" left="82" width="346" height="15" font="0">tems or units. In that example, the text was posi-</text>
<text top="1065" left="82" width="346" height="15" font="0">tioned horizontally in terms of millimetres and ver-</text>
<text top="1083" left="82" width="346" height="15" font="0">tically in terms of lines of text (which is based on the</text>
<text top="1101" left="82" width="107" height="15" font="0">font size in use).</text>
<text top="1119" left="105" width="324" height="15" font="0">As another example of the use of these different</text>
<text top="1137" left="82" width="346" height="15" font="0">units, we can size the overall viewport so that it is</text>
<text top="1155" left="82" width="346" height="15" font="0">just the right size to fit the text labels. In the follow-</text>
<text top="1173" left="82" width="346" height="15" font="0">ing code, the height of the viewport is based on the</text>
<text top="125" left="459" width="346" height="15" font="0">number of labels and the width of the viewport is</text>
<text top="143" left="459" width="346" height="15" font="0">based on the width of the largest label, plus a 2 mm</text>
<text top="161" left="459" width="346" height="15" font="0">gap either side. This code also simplifies the labelling</text>
<text top="179" left="459" width="341" height="15" font="0">by drawing both labels in a single grid.text() call.</text>
<text top="215" left="459" width="229" height="12" font="0">&gt; labels &lt;- c(&#34;ISBN&#34;, &#34;title&#34;)</text>
<text top="233" left="459" width="53" height="12" font="0">&gt; vp &lt;-</text>
<text top="251" left="489" width="305" height="12" font="0">viewport(width=max(stringWidth(labels))+</text>
<text top="269" left="604" width="107" height="12" font="0">unit(4, &#34;mm&#34;),</text>
<text top="287" left="558" width="206" height="12" font="0">height=unit(length(labels),</text>
<text top="305" left="649" width="69" height="12" font="0">&#34;lines&#34;))</text>
<text top="323" left="459" width="137" height="12" font="0">&gt; pushViewport(vp)</text>
<text top="341" left="459" width="137" height="12" font="0">&gt; grid.roundrect()</text>
<text top="359" left="459" width="145" height="12" font="0">&gt; grid.text(labels,</text>
<text top="377" left="550" width="122" height="12" font="0">x=unit(2, &#34;mm&#34;),</text>
<text top="395" left="550" width="206" height="12" font="0">y=unit(2:1 - 0.5, &#34;lines&#34;),</text>
<text top="412" left="550" width="91" height="12" font="0">just=&#34;left&#34;)</text>
<text top="430" left="459" width="114" height="12" font="0">&gt; popViewport()</text>
<text top="480" left="621" width="22" height="9" font="7">ISBN</text>
<text top="492" left="621" width="15" height="9" font="7">title</text>
<text top="557" left="459" width="88" height="21" font="5"><b>Clipping</b></text>
<text top="597" left="459" width="346" height="15" font="0">Another feature of the boxes that we want to pro-</text>
<text top="615" left="459" width="346" height="15" font="0">duce is that they have shaded backgrounds. Looking</text>
<text top="633" left="459" width="346" height="15" font="0">closely, there are some relatively complex shapes in-</text>
<text top="651" left="459" width="346" height="15" font="0">volved in this shading. For example, the grey back-</text>
<text top="669" left="459" width="346" height="15" font="0">ground for the “heading” of each box has a curvy</text>
<text top="687" left="459" width="346" height="15" font="0">top, but a flat bottom. These are not simple rounded</text>
<text top="705" left="459" width="346" height="15" font="0">rectangles, but some unholy alliance of a rounded</text>
<text top="723" left="459" width="220" height="15" font="0">rectangle and a normal rectangle.</text>
<text top="741" left="481" width="324" height="15" font="0">It is possible, in theory, to achieve any sort of</text>
<text top="759" left="459" width="346" height="15" font="0">shape with R because there is a general polygon</text>
<text top="777" left="459" width="346" height="15" font="0">graphical primitive. However, as with the position-</text>
<text top="795" left="459" width="346" height="15" font="0">ing of the text labels, determining the exact boundary</text>
<text top="813" left="459" width="346" height="15" font="0">of this polygon is not trivial and there are easier ways</text>
<text top="831" left="459" width="55" height="15" font="0">to work.</text>
<text top="849" left="481" width="324" height="15" font="0">In this case, we can achieve the result we want us-</text>
<text top="867" left="459" width="346" height="15" font="0">ing clipping, so that any drawing that we do is only</text>
<text top="885" left="459" width="346" height="15" font="0">visible on a restricted portion of the page. R does not</text>
<text top="903" left="459" width="346" height="15" font="0">provide clipping to arbitrary regions, but it is pos-</text>
<text top="921" left="459" width="346" height="15" font="0">sible to set the clipping region to any rectangular re-</text>
<text top="939" left="459" width="33" height="15" font="0">gion.</text>
<text top="957" left="481" width="324" height="15" font="0">The basic idea is that we will draw the complete</text>
<text top="975" left="459" width="346" height="15" font="0">rounded rectangle, then set the clipping region for</text>
<text top="993" left="459" width="346" height="15" font="0">the box viewport so that no drawing can occur in</text>
<text top="1011" left="459" width="346" height="15" font="0">the last line of text in the box and then draw the</text>
<text top="1029" left="459" width="346" height="15" font="0">rounded rectangle again, this time with a different</text>
<text top="1047" left="459" width="346" height="15" font="0">background. If we continue doing this, we end up</text>
<text top="1065" left="459" width="212" height="15" font="0">with bands of different shading.</text>
<text top="1083" left="481" width="324" height="15" font="0">The following code creates an overall viewport</text>
<text top="1101" left="459" width="346" height="15" font="0">for a box and draws a rounded rectangle with a grey</text>
<text top="1119" left="459" width="346" height="15" font="0">fill. The code then sets the clipping region to start</text>
<text top="1137" left="459" width="346" height="15" font="0">one line of text above the bottom of the viewport and</text>
<text top="1155" left="459" width="346" height="15" font="0">draws another rounded rectangle with a white fill.</text>
<text top="1173" left="459" width="346" height="15" font="0">The effect is to leave just the last line of the original</text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="13" size="4" family="Times" color="#bdbdbd"/>
<text top="67" left="83" width="11" height="15" font="0">C</text>
<text top="69" left="94" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="184" width="10" height="15" font="0">R</text>
<text top="69" left="195" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="261" width="12" height="15" font="0">A</text>
<text top="69" left="273" width="53" height="12" font="1">RTICLES</text>
<text top="67" left="790" width="15" height="15" font="0">17</text>
<text top="125" left="82" width="346" height="15" font="0">grey rounded rectangle showing beneath the white</text>
<text top="143" left="82" width="337" height="15" font="0">rounded rectangle that has had its last line clipped.</text>
<text top="179" left="82" width="267" height="12" font="0">&gt; pushViewport(viewport(width=.25))</text>
<text top="196" left="82" width="290" height="12" font="0">&gt; grid.roundrect(gp=gpar(fill=&#34;grey&#34;))</text>
<text top="214" left="82" width="236" height="12" font="0">&gt; grid.clip(y=unit(1, &#34;lines&#34;),</text>
<text top="232" left="174" width="107" height="12" font="0">just=&#34;bottom&#34;)</text>
<text top="250" left="82" width="297" height="12" font="0">&gt; grid.roundrect(gp=gpar(fill=&#34;white&#34;))</text>
<text top="268" left="82" width="114" height="12" font="0">&gt; popViewport()</text>
<text top="393" left="82" width="156" height="21" font="5"><b>Drawing curves</b></text>
<text top="433" left="82" width="346" height="15" font="0">Another basic shape that is used in the overall dia-</text>
<text top="450" left="82" width="297" height="15" font="0">gram is a nice curve from one box to another.</text>
<text top="469" left="105" width="324" height="15" font="0">In addition to the basic functions to draw straight</text>
<text top="487" left="82" width="346" height="15" font="0">lines in R, there are functions that draw curves. In</text>
<text top="505" left="82" width="346" height="15" font="0">particular, R provides a graphical primitive called an</text>
<text top="523" left="82" width="65" height="15" font="0">X-spline <a href="2009-1-RJournal_2009-1_Murrell.html#6">(</a></text>
<text top="523" left="147" width="116" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">Blanc and Schlick</a></text>
<text top="523" left="264" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">,</a></text>
<text top="523" left="272" width="30" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#6">1995</a></text>
<text top="523" left="301" width="127" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#6">). </a>The idea of an X-</text>
<text top="540" left="82" width="346" height="15" font="0">spline is that we define a set of control points and a</text>
<text top="558" left="82" width="346" height="15" font="0">curve is drawn either through or near to the control</text>
<text top="576" left="82" width="346" height="15" font="0">points. Each control point has a parameter that spec-</text>
<text top="594" left="82" width="346" height="15" font="0">ifies whether to create a sharp corner at the control</text>
<text top="612" left="82" width="346" height="15" font="0">point, or draw a smooth curve through the control</text>
<text top="630" left="82" width="328" height="15" font="0">point, or draw a smooth curve that passes nearby.</text>
<text top="648" left="105" width="324" height="15" font="0">The following code sets up sets of three control</text>
<text top="666" left="82" width="346" height="15" font="0">points and draws an X-spline relative to each set of</text>
<text top="684" left="82" width="346" height="15" font="0">control points. The first curve makes a sharp corner</text>
<text top="702" left="82" width="346" height="15" font="0">at the middle control point, the second curve makes a</text>
<text top="720" left="82" width="346" height="15" font="0">smooth corner through the middle control point, and</text>
<text top="738" left="82" width="346" height="15" font="0">the third curve makes a smooth corner near the mid-</text>
<text top="756" left="82" width="346" height="15" font="0">dle control point. The control points are drawn as</text>
<text top="774" left="82" width="270" height="15" font="0">grey dots for reference (code not shown).</text>
<text top="809" left="82" width="183" height="12" font="0">&gt; x1 &lt;- c(0.1, 0.2, 0.2)</text>
<text top="827" left="82" width="183" height="12" font="0">&gt; y1 &lt;- c(0.2, 0.2, 0.8)</text>
<text top="845" left="82" width="168" height="12" font="0">&gt; grid.xspline(x1, y1)</text>
<text top="863" left="82" width="183" height="12" font="0">&gt; x2 &lt;- c(0.4, 0.5, 0.5)</text>
<text top="881" left="82" width="183" height="12" font="0">&gt; y2 &lt;- c(0.2, 0.2, 0.8)</text>
<text top="899" left="82" width="244" height="12" font="0">&gt; grid.xspline(x2, y2, shape=-1)</text>
<text top="917" left="82" width="183" height="12" font="0">&gt; x3 &lt;- c(0.7, 0.8, 0.8)</text>
<text top="935" left="82" width="183" height="12" font="0">&gt; y3 &lt;- c(0.2, 0.2, 0.8)</text>
<text top="953" left="82" width="236" height="12" font="0">&gt; grid.xspline(x3, y3, shape=1)</text>
<text top="1025" left="115" width="5" height="6" font="13">●</text>
<text top="1025" left="149" width="5" height="6" font="13">●</text>
<text top="991" left="149" width="5" height="6" font="13">●</text>
<text top="1025" left="219" width="5" height="6" font="13">●</text>
<text top="1025" left="253" width="5" height="6" font="13">●</text>
<text top="991" left="253" width="5" height="6" font="13">●</text>
<text top="1025" left="323" width="5" height="6" font="13">●</text>
<text top="1025" left="357" width="5" height="6" font="13">●</text>
<text top="991" left="357" width="5" height="6" font="13">●</text>
<text top="1048" left="105" width="324" height="15" font="0">Determining where to place the control points for</text>
<text top="1065" left="82" width="346" height="15" font="0">a curve between two boxes is another one of those</text>
<text top="1083" left="82" width="346" height="15" font="0">annoying calculations, so a more convenient option</text>
<text top="1101" left="82" width="346" height="15" font="0">is provided by a curve graphical primitive in <b>grid</b>.</text>
<text top="1119" left="82" width="346" height="15" font="0">The idea of this primitive is that we simply spec-</text>
<text top="1137" left="82" width="346" height="15" font="0">ify the start and end points of the curve and R fig-</text>
<text top="1155" left="82" width="346" height="15" font="0">ures out a set of reasonable control points to produce</text>
<text top="1173" left="82" width="346" height="15" font="0">an appropriate X-spline. It is also straightforward to</text>
<text top="125" left="459" width="346" height="15" font="0">add an arrow to either end of any straight or curvy</text>
<text top="143" left="459" width="117" height="15" font="0">line that R draws.</text>
<text top="161" left="481" width="324" height="15" font="0">The following code draws three curves between</text>
<text top="179" left="459" width="346" height="15" font="0">pairs of end points. The first curve draws the default</text>
<text top="197" left="459" width="346" height="15" font="0">“city-block” line between end points, with a smooth</text>
<text top="215" left="459" width="346" height="15" font="0">corner at the turning point, the second curve is sim-</text>
<text top="233" left="459" width="346" height="15" font="0">ilar, but with an extra corner added, and the third</text>
<text top="251" left="459" width="346" height="15" font="0">curve draws a single wide, smooth corner that is dis-</text>
<text top="268" left="459" width="346" height="15" font="0">torted towards the end point. The third curve also</text>
<text top="286" left="459" width="159" height="15" font="0">has an arrow at the end.</text>
<text top="319" left="459" width="183" height="12" font="0">&gt; x1a &lt;- 0.1; x1b &lt;- 0.2</text>
<text top="337" left="459" width="183" height="12" font="0">&gt; y1a &lt;- 0.2; y1b &lt;- 0.8</text>
<text top="355" left="459" width="244" height="12" font="0">&gt; grid.curve(x1a, y1a, x1b, y1b)</text>
<text top="373" left="459" width="183" height="12" font="0">&gt; x2a &lt;- 0.4; x2b &lt;- 0.5</text>
<text top="391" left="459" width="183" height="12" font="0">&gt; y2a &lt;- 0.2; y2b &lt;- 0.8</text>
<text top="409" left="459" width="244" height="12" font="0">&gt; grid.curve(x2a, y2a, x2b, y2b,</text>
<text top="427" left="558" width="99" height="12" font="0">inflect=TRUE)</text>
<text top="445" left="459" width="183" height="12" font="0">&gt; x3a &lt;- 0.7; x3b &lt;- 0.8</text>
<text top="463" left="459" width="183" height="12" font="0">&gt; y3a &lt;- 0.2; y3b &lt;- 0.8</text>
<text top="481" left="459" width="244" height="12" font="0">&gt; grid.curve(x3a, y3a, x3b, y3b,</text>
<text top="499" left="558" width="130" height="12" font="0">ncp=8, angle=135,</text>
<text top="517" left="558" width="99" height="12" font="0">square=FALSE,</text>
<text top="534" left="558" width="91" height="12" font="0">curvature=2,</text>
<text top="552" left="558" width="168" height="12" font="0">arrow=arrow(angle=15))</text>
<text top="622" left="491" width="5" height="6" font="13">●</text>
<text top="622" left="595" width="5" height="6" font="13">●</text>
<text top="622" left="699" width="5" height="6" font="13">●</text>
<text top="588" left="526" width="5" height="6" font="13">●</text>
<text top="588" left="630" width="5" height="6" font="13">●</text>
<text top="588" left="734" width="5" height="6" font="13">●</text>
<text top="673" left="459" width="197" height="21" font="5"><b>Graphical functions</b></text>
<text top="711" left="459" width="346" height="15" font="0">The use of graphical primitives, viewports, coordi-</text>
<text top="729" left="459" width="346" height="15" font="0">nate systems, and clipping, as described so far, can</text>
<text top="747" left="459" width="346" height="15" font="0">be used to produce a box of the style shown in the</text>
<text top="765" left="459" width="346" height="15" font="0">diagram at the start of the article. For example, the</text>
<text top="783" left="459" width="346" height="15" font="0">following code produces a box containing three la-</text>
<text top="801" left="459" width="346" height="15" font="0">bels, with background shading to assist in differenti-</text>
<text top="819" left="459" width="153" height="15" font="0">ating among the labels.</text>
<text top="852" left="459" width="282" height="12" font="0">&gt; labels &lt;- c(&#34;ISBN&#34;, &#34;title&#34;, &#34;pub&#34;)</text>
<text top="870" left="459" width="53" height="12" font="0">&gt; vp &lt;-</text>
<text top="888" left="489" width="236" height="12" font="0">viewport(width=max(stringWidth(</text>
<text top="905" left="680" width="69" height="12" font="0">labels))+</text>
<text top="923" left="604" width="107" height="12" font="0">unit(4, &#34;mm&#34;),</text>
<text top="941" left="558" width="206" height="12" font="0">height=unit(length(labels),</text>
<text top="959" left="649" width="69" height="12" font="0">&#34;lines&#34;))</text>
<text top="977" left="459" width="137" height="12" font="0">&gt; pushViewport(vp)</text>
<text top="995" left="459" width="137" height="12" font="0">&gt; grid.roundrect()</text>
<text top="1013" left="459" width="236" height="12" font="0">&gt; grid.clip(y=unit(1, &#34;lines&#34;),</text>
<text top="1031" left="550" width="107" height="12" font="0">just=&#34;bottom&#34;)</text>
<text top="1049" left="459" width="290" height="12" font="0">&gt; grid.roundrect(gp=gpar(fill=&#34;grey&#34;))</text>
<text top="1067" left="459" width="236" height="12" font="0">&gt; grid.clip(y=unit(2, &#34;lines&#34;),</text>
<text top="1085" left="550" width="107" height="12" font="0">just=&#34;bottom&#34;)</text>
<text top="1103" left="459" width="297" height="12" font="0">&gt; grid.roundrect(gp=gpar(fill=&#34;white&#34;))</text>
<text top="1121" left="459" width="99" height="12" font="0">&gt; grid.clip()</text>
<text top="1139" left="459" width="145" height="12" font="0">&gt; grid.text(labels,</text>
<text top="1156" left="550" width="183" height="12" font="0">x=unit(rep(2, 3), &#34;mm&#34;),</text>
<text top="1174" left="550" width="198" height="12" font="0">y=unit(3:1 - .5, &#34;lines&#34;),</text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="892">
<text top="67" left="82" width="15" height="15" font="0">18</text>
<text top="67" left="562" width="11" height="15" font="0">C</text>
<text top="69" left="573" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="664" width="10" height="15" font="0">R</text>
<text top="69" left="674" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="740" width="12" height="15" font="0">A</text>
<text top="69" left="752" width="53" height="12" font="1">RTICLES</text>
<text top="126" left="174" width="91" height="12" font="0">just=&#34;left&#34;)</text>
<text top="144" left="82" width="114" height="12" font="0">&gt; popViewport()</text>
<text top="187" left="244" width="22" height="9" font="7">ISBN</text>
<text top="199" left="244" width="15" height="9" font="7">title</text>
<text top="210" left="244" width="16" height="9" font="7">pub</text>
<text top="239" left="105" width="324" height="15" font="0">However, in the sort of diagram that we want to</text>
<text top="257" left="82" width="346" height="15" font="0">produce, there will be several such boxes. Rather</text>
<text top="274" left="82" width="346" height="15" font="0">than write separate code for each box, it makes sense</text>
<text top="292" left="82" width="346" height="15" font="0">to write a general function that will work for any set</text>
<text top="310" left="82" width="304" height="15" font="0">of labels. Such a function is shown in Figure</text>
<text top="310" left="391" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#5">1</a></text>
<text top="310" left="404" width="25" height="15" font="0">and</text>
<text top="328" left="82" width="346" height="15" font="0">the code below uses this function to draw two boxes</text>
<text top="346" left="82" width="82" height="15" font="0">side by side.</text>
<text top="381" left="82" width="282" height="12" font="0">&gt; tableBox(c(&#34;ISBN&#34;, &#34;title&#34;, &#34;pub&#34;),</text>
<text top="399" left="166" width="46" height="12" font="0">x=0.3)</text>
<text top="417" left="82" width="290" height="12" font="0">&gt; tableBox(c(&#34;ID&#34;, &#34;name&#34;, &#34;country&#34;),</text>
<text top="435" left="166" width="46" height="12" font="0">x=0.7)</text>
<text top="478" left="175" width="22" height="9" font="7">ISBN</text>
<text top="489" left="175" width="15" height="9" font="7">title</text>
<text top="501" left="175" width="16" height="9" font="7">pub</text>
<text top="478" left="309" width="10" height="9" font="7">ID</text>
<text top="489" left="309" width="24" height="9" font="7">name</text>
<text top="501" left="309" width="32" height="9" font="7">country</text>
<text top="529" left="105" width="324" height="15" font="0">This function represents the simplest way to ef-</text>
<text top="547" left="82" width="346" height="15" font="0">ficiently reuse graphics code and to provide graph-</text>
<text top="565" left="82" width="346" height="15" font="0">ics code for others to use. However, there are ben-</text>
<text top="583" left="82" width="346" height="15" font="0">efits to be gained from going beyond this procedu-</text>
<text top="601" left="82" width="346" height="15" font="0">ral programming style to a slightly more complicated</text>
<text top="619" left="82" width="168" height="15" font="0">object-oriented approach.</text>
<text top="667" left="82" width="173" height="21" font="5"><b>Graphical objects</b></text>
<text top="706" left="82" width="346" height="15" font="0">In order to achieve the complete diagram introduced</text>
<text top="724" left="82" width="346" height="15" font="0">at the start of this article, we need one more step:</text>
<text top="742" left="82" width="346" height="15" font="0">we need to draw lines and arrows from one box to</text>
<text top="760" left="82" width="346" height="15" font="0">another. We already know how to draw lines and</text>
<text top="778" left="82" width="346" height="15" font="0">curves between two points; the main difficulty that</text>
<text top="796" left="82" width="346" height="15" font="0">remains is calculating the exact position of the start</text>
<text top="814" left="82" width="346" height="15" font="0">and end points, because these locations depend on</text>
<text top="832" left="82" width="346" height="15" font="0">the locations and dimensions of the boxes. The cal-</text>
<text top="850" left="82" width="346" height="15" font="0">culations could be done by hand for each individual</text>
<text top="868" left="82" width="346" height="15" font="0">curve, but as we have seen before, there are easier</text>
<text top="886" left="82" width="346" height="15" font="0">ways to work. The crucial idea for this step is that</text>
<text top="904" left="82" width="346" height="15" font="0">we want to create not just a graphical function that</text>
<text top="921" left="82" width="346" height="15" font="0">encapsulates how to draw a box, but define a graphi-</text>
<text top="939" left="82" width="346" height="15" font="0">cal object that encapsulates information about a box.</text>
<text top="958" left="105" width="133" height="15" font="0">The code in Figure</text>
<text top="958" left="245" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#5">2</a></text>
<text top="958" left="260" width="169" height="15" font="0">defines such a graphical</text>
<text top="976" left="82" width="346" height="15" font="0">object, plus a few other things that we will get to</text>
<text top="993" left="82" width="49" height="15" font="0">shortly.</text>
<text top="993" left="149" width="280" height="15" font="0">The first thing to concentrate on is the</text>
<text top="1013" left="82" width="69" height="12" font="0">boxGrob()</text>
<text top="1011" left="157" width="272" height="15" font="0">function. This function creates a &#34;box&#34;</text>
<text top="1029" left="82" width="346" height="15" font="0">graphical object. In order to do this, all it has to do is</text>
<text top="1047" left="82" width="346" height="15" font="0">call the grob() function and supply all of the infor-</text>
<text top="1065" left="82" width="346" height="15" font="0">mation that we want to record about &#34;box&#34; objects.</text>
<text top="1083" left="82" width="346" height="15" font="0">In this case, we just record the labels to be drawn</text>
<text top="1101" left="82" width="346" height="15" font="0">within the box and the location where we want to</text>
<text top="1119" left="82" width="91" height="15" font="0">draw the box.</text>
<text top="1137" left="105" width="324" height="15" font="0">This function does not draw anything. For exam-</text>
<text top="1155" left="82" width="346" height="15" font="0">ple, the following code creates two &#34;box&#34; objects, but</text>
<text top="1173" left="82" width="279" height="15" font="0">produces no graphical output whatsoever.</text>
<text top="126" left="459" width="274" height="12" font="0">&gt; box1 &lt;- boxGrob(c(&#34;ISBN&#34;, &#34;title&#34;,</text>
<text top="144" left="550" width="107" height="12" font="0">&#34;pub&#34;), x=0.3)</text>
<text top="162" left="459" width="252" height="12" font="0">&gt; box2 &lt;- boxGrob(c(&#34;ID&#34;, &#34;name&#34;,</text>
<text top="180" left="550" width="137" height="12" font="0">&#34;country&#34;), x=0.7)</text>
<text top="214" left="481" width="324" height="15" font="0">The grid.draw() function can be used to draw</text>
<text top="232" left="459" width="346" height="15" font="0">any graphical object, but we need to supply the de-</text>
<text top="250" left="459" width="346" height="15" font="0">tails of how &#34;box&#34; objects get drawn. This is the pur-</text>
<text top="268" left="459" width="241" height="15" font="0">pose of the second function in Figure</text>
<text top="268" left="703" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#5">2</a></text>
<text top="268" left="710" width="95" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#5">. </a>This function</text>
<text top="286" left="459" width="346" height="15" font="0">is a method for the drawDetails() function; it says</text>
<text top="304" left="459" width="346" height="15" font="0">how to draw &#34;box&#34; objects. In this case, the func-</text>
<text top="322" left="459" width="346" height="15" font="0">tion is very simple because it can call the tableBox()</text>
<text top="340" left="459" width="229" height="15" font="0">function that we defined in Figure</text>
<text top="340" left="692" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#5">1</a></text>
<text top="340" left="699" width="106" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#5">. </a>The important</text>
<text top="357" left="459" width="346" height="15" font="0">detail is that the boxGrob() function specified a spe-</text>
<text top="375" left="459" width="346" height="15" font="0">cial class, cl=&#34;box&#34;, for &#34;box&#34; objects, which meant</text>
<text top="393" left="459" width="346" height="15" font="0">that we could define a drawDetails() method specif-</text>
<text top="411" left="459" width="346" height="15" font="0">ically for this sort of object and control what gets</text>
<text top="429" left="459" width="47" height="15" font="0">drawn.</text>
<text top="448" left="481" width="324" height="15" font="0">With this drawDetails() method defined, we</text>
<text top="466" left="459" width="346" height="15" font="0">can draw the boxes that we created earlier by call-</text>
<text top="484" left="459" width="207" height="15" font="0">ing the grid.draw() function.</text>
<text top="484" left="681" width="124" height="15" font="0">This function will</text>
<text top="502" left="459" width="346" height="15" font="0">draw any <b>grid </b>graphical object by calling the appro-</text>
<text top="519" left="459" width="346" height="15" font="0">priate method for the drawDetails() generic func-</text>
<text top="537" left="459" width="346" height="15" font="0">tion (among other things). The following code calls</text>
<text top="557" left="459" width="84" height="12" font="0">grid.draw()</text>
<text top="555" left="546" width="151" height="15" font="0">to draw the two boxes.</text>
<text top="592" left="459" width="130" height="12" font="0">&gt; grid.draw(box1)</text>
<text top="610" left="459" width="130" height="12" font="0">&gt; grid.draw(box2)</text>
<text top="654" left="552" width="22" height="9" font="7">ISBN</text>
<text top="666" left="552" width="15" height="9" font="7">title</text>
<text top="677" left="552" width="16" height="9" font="7">pub</text>
<text top="654" left="685" width="10" height="9" font="7">ID</text>
<text top="666" left="685" width="24" height="9" font="7">name</text>
<text top="677" left="685" width="32" height="9" font="7">country</text>
<text top="706" left="481" width="324" height="15" font="0">At this point, we appear to have achieved only a</text>
<text top="724" left="459" width="346" height="15" font="0">more complicated equivalent of the previous graph-</text>
<text top="742" left="459" width="86" height="15" font="0">ics function.</text>
<text top="742" left="566" width="239" height="15" font="0">However, there are a number of</text>
<text top="759" left="459" width="346" height="15" font="0">other functions that can do useful things with <b>grid</b></text>
<text top="777" left="459" width="118" height="15" font="0">graphical objects.</text>
<text top="777" left="593" width="212" height="15" font="0">For example, the grobX() and</text>
<text top="797" left="459" width="53" height="12" font="0">grobY()</text>
<text top="795" left="517" width="289" height="15" font="0">functions can be used to calculate locations</text>
<text top="813" left="459" width="274" height="15" font="0">on the boundary of a graphical object.</text>
<text top="813" left="749" width="56" height="15" font="0">As with</text>
<text top="833" left="459" width="84" height="12" font="0">grid.draw()</text>
<text top="831" left="543" width="263" height="15" font="0">, which has to call drawDetails() to find</text>
<text top="849" left="459" width="346" height="15" font="0">out how to draw a particular class of graphical object,</text>
<text top="867" left="459" width="346" height="15" font="0">these functions call generic functions to find out how</text>
<text top="885" left="459" width="346" height="15" font="0">to calculate locations on the boundary for a particu-</text>
<text top="903" left="459" width="346" height="15" font="0">lar class of object. The generic functions are called</text>
<text top="922" left="459" width="76" height="12" font="0">xDetails()</text>
<text top="921" left="542" width="263" height="15" font="0">and yDetails() and methods for our</text>
<text top="939" left="459" width="346" height="15" font="0">special &#34;box&#34; class are defined in the last two func-</text>
<text top="957" left="459" width="96" height="15" font="0">tions in Figure</text>
<text top="957" left="558" width="7" height="15" font="4"><a href="2009-1-RJournal_2009-1_Murrell.html#5">2</a></text>
<text top="957" left="566" width="4" height="15" font="0"><a href="2009-1-RJournal_2009-1_Murrell.html#5">.</a></text>
<text top="975" left="481" width="324" height="15" font="0">These methods work by passing the buck. They</text>
<text top="993" left="459" width="346" height="15" font="0">both create a rounded rectangle at the correct loca-</text>
<text top="1011" left="459" width="346" height="15" font="0">tion and the right size for the box, then call grobX()</text>
<text top="1029" left="459" width="346" height="15" font="0">(or grobY()) to determine a location on the boundary</text>
<text top="1047" left="459" width="346" height="15" font="0">of the rounded rectangle. In other words, they rely</text>
<text top="1065" left="459" width="346" height="15" font="0">on code within the <b>grid </b>package that already exists</text>
<text top="1083" left="459" width="319" height="15" font="0">to calculate the boundary of rounded rectangles.</text>
<text top="1101" left="481" width="324" height="15" font="0">With these methods defined, we are now in a po-</text>
<text top="1119" left="459" width="346" height="15" font="0">sition to draw a curved line between our boxes. The</text>
<text top="1137" left="459" width="346" height="15" font="0">key idea is that we can use grobX() and grobY() to</text>
<text top="1155" left="459" width="346" height="15" font="0">specify a start and end point for the curve. For exam-</text>
<text top="1173" left="459" width="346" height="15" font="0">ple, we can start the curve at the right hand edge of</text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="892">
<text top="67" left="83" width="11" height="15" font="0">C</text>
<text top="69" left="94" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="184" width="10" height="15" font="0">R</text>
<text top="69" left="195" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="261" width="12" height="15" font="0">A</text>
<text top="69" left="273" width="53" height="12" font="1">RTICLES</text>
<text top="67" left="790" width="15" height="15" font="0">19</text>
<text top="174" left="88" width="335" height="12" font="0">&gt; tableBox &lt;- function(labels, x=.5, y=.5) {</text>
<text top="192" left="133" width="183" height="12" font="0">nlabel &lt;- length(labels)</text>
<text top="210" left="133" width="76" height="12" font="0">tablevp &lt;-</text>
<text top="228" left="164" width="137" height="12" font="0">viewport(x=x, y=y,</text>
<text top="246" left="232" width="244" height="12" font="0">width=max(stringWidth(labels)) +</text>
<text top="264" left="278" width="107" height="12" font="0">unit(4, &#34;mm&#34;),</text>
<text top="282" left="232" width="221" height="12" font="0">height=unit(nlabel, &#34;lines&#34;))</text>
<text top="300" left="133" width="160" height="12" font="0">pushViewport(tablevp)</text>
<text top="318" left="133" width="122" height="12" font="0">grid.roundrect()</text>
<text top="335" left="133" width="130" height="12" font="0">if (nlabel &gt; 1) {</text>
<text top="353" left="164" width="206" height="12" font="0">for (i in 1:(nlabel - 1)) {</text>
<text top="371" left="194" width="290" height="12" font="0">fill &lt;- c(&#34;white&#34;, &#34;grey&#34;)[i %% 2 + 1]</text>
<text top="389" left="194" width="335" height="12" font="0">grid.clip(y=unit(i, &#34;lines&#34;), just=&#34;bottom&#34;)</text>
<text top="407" left="194" width="259" height="12" font="0">grid.roundrect(gp=gpar(fill=fill))</text>
<text top="425" left="164" width="8" height="12" font="0">}</text>
<text top="443" left="133" width="8" height="12" font="0">}</text>
<text top="461" left="133" width="84" height="12" font="0">grid.clip()</text>
<text top="479" left="133" width="130" height="12" font="0">grid.text(labels,</text>
<text top="497" left="210" width="366" height="12" font="0">x=unit(2, &#34;mm&#34;), y=unit(nlabel:1 - .5, &#34;lines&#34;),</text>
<text top="515" left="210" width="91" height="12" font="0">just=&#34;left&#34;)</text>
<text top="533" left="133" width="99" height="12" font="0">popViewport()</text>
<text top="551" left="103" width="8" height="12" font="0">}</text>
<text top="583" left="89" width="710" height="15" font="0">Figure 1: A function to draw a diagram box, for a given set of labels, centred at the specified (x, y) location.</text>
<text top="712" left="88" width="328" height="12" font="0">&gt; boxGrob &lt;- function(labels, x=.5, y=.5) {</text>
<text top="729" left="133" width="297" height="12" font="0">grob(labels=labels, x=x, y=y, cl=&#34;box&#34;)</text>
<text top="747" left="103" width="8" height="12" font="0">}</text>
<text top="765" left="88" width="297" height="12" font="0">&gt; drawDetails.box &lt;- function(x, ...) {</text>
<text top="783" left="133" width="213" height="12" font="0">tableBox(x$labels, x$x, x$y)</text>
<text top="801" left="103" width="8" height="12" font="0">}</text>
<text top="819" left="88" width="290" height="12" font="0">&gt; xDetails.box &lt;- function(x, theta) {</text>
<text top="837" left="133" width="198" height="12" font="0">nlines &lt;- length(x$labels)</text>
<text top="855" left="133" width="236" height="12" font="0">height &lt;- unit(nlines, &#34;lines&#34;)</text>
<text top="873" left="133" width="389" height="12" font="0">width &lt;- unit(4, &#34;mm&#34;) + max(stringWidth(x$labels))</text>
<text top="891" left="133" width="473" height="12" font="0">grobX(roundrectGrob(x=x$x, y=x$y, width=width, height=height),</text>
<text top="909" left="179" width="46" height="12" font="0">theta)</text>
<text top="927" left="103" width="8" height="12" font="0">}</text>
<text top="945" left="88" width="290" height="12" font="0">&gt; yDetails.box &lt;- function(x, theta) {</text>
<text top="963" left="133" width="198" height="12" font="0">nlines &lt;- length(x$labels)</text>
<text top="981" left="133" width="236" height="12" font="0">height &lt;- unit(nlines, &#34;lines&#34;)</text>
<text top="998" left="133" width="389" height="12" font="0">width &lt;- unit(4, &#34;mm&#34;) + max(stringWidth(x$labels))</text>
<text top="1016" left="133" width="434" height="12" font="0">grobY(rectGrob(x=x$x, y=x$y, width=width, height=height),</text>
<text top="1034" left="179" width="46" height="12" font="0">theta)</text>
<text top="1052" left="103" width="8" height="12" font="0">}</text>
<text top="1085" left="82" width="723" height="15" font="0">Figure 2: Some functions that define a graphical object representing a diagram box. The boxGrob() function</text>
<text top="1103" left="82" width="723" height="15" font="0">constructs a &#34;box&#34; object, the drawDetails() method describes how to draw a &#34;box&#34; object, and the xDetails()</text>
<text top="1121" left="82" width="525" height="15" font="0">and yDetails() functions calculate locations on the boundary of a &#34;box&#34; object.</text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="14" size="11" family="Times" color="#000000"/>
<text top="67" left="82" width="15" height="15" font="0">20</text>
<text top="67" left="562" width="11" height="15" font="0">C</text>
<text top="69" left="573" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="664" width="10" height="15" font="0">R</text>
<text top="69" left="674" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="740" width="12" height="15" font="0">A</text>
<text top="69" left="752" width="53" height="12" font="1">RTICLES</text>
<text top="126" left="82" width="30" height="12" font="0">box1</text>
<text top="125" left="118" width="311" height="15" font="0">by specifying grobX(box1, &#34;east&#34;). The ver-</text>
<text top="143" left="82" width="346" height="15" font="0">tical position is slightly trickier because we do not</text>
<text top="161" left="82" width="346" height="15" font="0">want the line starting at the top or bottom of the box,</text>
<text top="179" left="82" width="346" height="15" font="0">but we can simply add or subtract the appropriate</text>
<text top="197" left="82" width="286" height="15" font="0">number of lines of text to get the right spot.</text>
<text top="215" left="105" width="324" height="15" font="0">The following code uses these ideas to draw a</text>
<text top="233" left="82" width="346" height="15" font="0">curve from the pub label of box1 to the ID label of</text>
<text top="252" left="82" width="30" height="12" font="0">box2</text>
<text top="251" left="113" width="316" height="15" font="0">. The curve has two corners (inflect=TRUE) and</text>
<text top="269" left="82" width="202" height="15" font="0">it has a small arrow at the end.</text>
<text top="287" left="105" width="324" height="15" font="0">This call to grid.curve() is relatively verbose,</text>
<text top="305" left="82" width="346" height="15" font="0">but in a diagram containing many similar curves,</text>
<text top="323" left="82" width="346" height="15" font="0">this burden can be significantly reduced by writing</text>
<text top="341" left="82" width="346" height="15" font="0">a simple function that hides away the common fea-</text>
<text top="359" left="82" width="324" height="15" font="0">tures, such as the specification of the arrow head.</text>
<text top="378" left="105" width="324" height="15" font="0">The major gain from this object-oriented ap-</text>
<text top="396" left="82" width="346" height="15" font="0">proach is that the start and end points of this curve</text>
<text top="413" left="82" width="346" height="15" font="0">are described by simple expressions that will auto-</text>
<text top="431" left="82" width="346" height="15" font="0">matically update if the locations of the boxes are</text>
<text top="449" left="82" width="64" height="15" font="0">modified.</text>
<text top="486" left="82" width="252" height="12" font="0">&gt; grid.curve(grobX(box1, &#34;east&#34;),</text>
<text top="504" left="182" width="168" height="12" font="0">grobY(box1, &#34;south&#34;) +</text>
<text top="521" left="197" width="145" height="12" font="0">unit(0.5, &#34;lines&#34;),</text>
<text top="539" left="182" width="152" height="12" font="0">grobX(box2, &#34;west&#34;),</text>
<text top="557" left="182" width="168" height="12" font="0">grobY(box2, &#34;north&#34;) -</text>
<text top="575" left="197" width="145" height="12" font="0">unit(0.5, &#34;lines&#34;),</text>
<text top="593" left="182" width="99" height="12" font="0">inflect=TRUE,</text>
<text top="611" left="182" width="46" height="12" font="0">arrow=</text>
<text top="629" left="197" width="152" height="12" font="0">arrow(type=&#34;closed&#34;,</text>
<text top="647" left="220" width="69" height="12" font="0">angle=15,</text>
<text top="665" left="220" width="168" height="12" font="0">length=unit(2, &#34;mm&#34;)),</text>
<text top="683" left="182" width="168" height="12" font="0">gp=gpar(fill=&#34;black&#34;))</text>
<text top="727" left="175" width="22" height="9" font="7">ISBN</text>
<text top="738" left="175" width="15" height="9" font="7">title</text>
<text top="750" left="175" width="16" height="9" font="7">pub</text>
<text top="727" left="309" width="10" height="9" font="7">ID</text>
<text top="738" left="309" width="24" height="9" font="7">name</text>
<text top="750" left="309" width="32" height="9" font="7">country</text>
<text top="810" left="82" width="112" height="21" font="5"><b>Conclusion</b></text>
<text top="849" left="82" width="346" height="15" font="0">This article has demonstrated a number of useful</text>
<text top="867" left="82" width="346" height="15" font="0">low-level graphical facilities in R with an example of</text>
<text top="885" left="82" width="346" height="15" font="0">how they can be combined to produce a diagram</text>
<text top="903" left="82" width="346" height="15" font="0">consisting of non-trivial nodes with smooth curves</text>
<text top="921" left="82" width="97" height="15" font="0">between them.</text>
<text top="939" left="105" width="324" height="15" font="0">The code examples provided in this article have</text>
<text top="957" left="82" width="346" height="15" font="0">ignored some details in order to keep things simple.</text>
<text top="975" left="82" width="346" height="15" font="0">For example, there are no checks that the arguments</text>
<text top="993" left="82" width="346" height="15" font="0">have sensible values in the functions tableBox() and</text>
<text top="1013" left="82" width="69" height="12" font="0">boxGrob()</text>
<text top="1011" left="151" width="278" height="15" font="0">. However, for creating one-off diagrams,</text>
<text top="1029" left="82" width="284" height="15" font="0">this level of detail is not necessary anyway.</text>
<text top="1048" left="105" width="324" height="15" font="0">One detail that would be encountered quite</text>
<text top="1065" left="82" width="346" height="15" font="0">quickly in practice, in this particular sort of dia-</text>
<text top="1083" left="82" width="346" height="15" font="0">gram, is that a curve from one box to another that</text>
<text top="1101" left="82" width="346" height="15" font="0">needs to go across-and-down rather than across-and-</text>
<text top="1119" left="82" width="346" height="15" font="0">up would require the addition of curvature=-1 to</text>
<text top="1137" left="82" width="346" height="15" font="0">the grid.curve() call. Another thing that is miss-</text>
<text top="1155" left="82" width="346" height="15" font="0">ing is complete code to produce the example dia-</text>
<text top="1173" left="82" width="346" height="15" font="0">gram from the beginning of this article, where there</text>
<text top="125" left="459" width="346" height="15" font="0">are five interconnected boxes and the boxes have</text>
<text top="143" left="459" width="346" height="15" font="0">some additional features, such as a distinct “header”</text>
<text top="161" left="459" width="346" height="15" font="0">line at the top. This complete code was excluded</text>
<text top="179" left="459" width="346" height="15" font="0">to save on space, but a simple R package is pro-</text>
<text top="197" left="459" width="58" height="15" font="0">vided at</text>
<text top="198" left="523" width="282" height="12" font="4"><a href="http://www.stat.auckland.ac.nz/~paul/">http://www.stat.auckland.ac.nz/~paul/</a></text>
<text top="215" left="459" width="346" height="15" font="0">with code to draw that complete diagram and the</text>
<text top="233" left="459" width="346" height="15" font="0">package also contains a more complete implementa-</text>
<text top="251" left="459" width="346" height="15" font="0">tion of code to create and draw &#34;box&#34; graphical ob-</text>
<text top="268" left="459" width="32" height="15" font="0">jects.</text>
<text top="287" left="481" width="324" height="15" font="0">One final point is that using R graphics to draw</text>
<text top="305" left="459" width="333" height="15" font="0">diagrams like this is not fast. In keeping with the</text>
<text top="306" left="796" width="9" height="12" font="14">S</text>
<text top="323" left="459" width="346" height="15" font="0">tradition, the emphasis is on developing code quickly</text>
<text top="341" left="459" width="346" height="15" font="0">and on having code that is not a complete nightmare</text>
<text top="359" left="459" width="346" height="15" font="0">to maintain. In this case particularly, the speed of</text>
<text top="377" left="459" width="346" height="15" font="0">developing a diagram comes at the expense of the</text>
<text top="395" left="459" width="346" height="15" font="0">time taken to draw the diagram. For small, one-off</text>
<text top="412" left="459" width="346" height="15" font="0">diagrams this is not likely to be an issue, but the</text>
<text top="430" left="459" width="346" height="15" font="0">approach described in this article would not be ap-</text>
<text top="448" left="459" width="346" height="15" font="0">propriate, for example, for drawing a node-and-edge</text>
<text top="466" left="459" width="141" height="15" font="0">graph of the Internet.</text>
<text top="516" left="459" width="130" height="21" font="5"><b>Bibliography</b></text>
<text top="555" left="459" width="346" height="15" font="0">C. Blanc and C. Schlick. X-splines: a spline model de-</text>
<text top="573" left="474" width="332" height="15" font="0">signed for the end-user. In SIGGRAPH ’95: Proceed-</text>
<text top="591" left="474" width="332" height="15" font="0">ings of the 22nd annual conference on Computer graph-</text>
<text top="609" left="474" width="332" height="15" font="0">ics and interactive techniques, pages 377–386, New</text>
<text top="627" left="474" width="332" height="15" font="0">York, NY, USA, 1995. ACM. ISBN 0-89791-701-4.</text>
<text top="645" left="474" width="322" height="15" font="0">doi: http://doi.acm.org/10.1145/218380.218488.</text>
<text top="677" left="459" width="184" height="15" font="0">G. Csardi and T. Nepusz.</text>
<text top="677" left="663" width="142" height="15" font="0">The igraph software</text>
<text top="695" left="474" width="332" height="15" font="0">package for complex network research. InterJour-</text>
<text top="712" left="474" width="272" height="15" font="0">nal, Complex Systems:1695, 2006. URL</text>
<text top="714" left="752" width="53" height="12" font="4"><a href="http://igraph.sf.net">http://</a></text>
<text top="732" left="474" width="99" height="12" font="4"><a href="http://igraph.sf.net">igraph.sf.net</a></text>
<text top="730" left="573" width="4" height="15" font="0"><a href="http://igraph.sf.net">.</a></text>
<text top="762" left="459" width="346" height="15" font="0">J. Gentry, L. Long, R. Gentleman, S. Falcon, F. Hahne,</text>
<text top="780" left="474" width="332" height="15" font="0">and D. Sarkar. Rgraphviz: Provides plotting capabil-</text>
<text top="798" left="474" width="332" height="15" font="0">ities for R graph objects, 2008. R package version</text>
<text top="816" left="474" width="41" height="15" font="0">1.18.1.</text>
<text top="848" left="459" width="79" height="15" font="0">A. Larsson.</text>
<text top="848" left="557" width="70" height="15" font="0">Dia, 2008.</text>
<text top="849" left="645" width="160" height="12" font="4"><a href="http://www.gnome.org/projects/dia/">http://www.gnome.org/</a></text>
<text top="867" left="474" width="99" height="12" font="4"><a href="http://www.gnome.org/projects/dia/">projects/dia/</a></text>
<text top="866" left="573" width="4" height="15" font="0"><a href="http://www.gnome.org/projects/dia/">.</a></text>
<text top="898" left="459" width="346" height="15" font="0">P. Murrell. The grid graphics package. R News, 2(2):</text>
<text top="916" left="474" width="158" height="15" font="0">14–19, June 2002. URL</text>
<text top="917" left="637" width="168" height="12" font="4"><a href="http://CRAN.R-project.org/doc/Rnews/">http://CRAN.R-project.</a></text>
<text top="935" left="474" width="107" height="12" font="4"><a href="http://CRAN.R-project.org/doc/Rnews/">org/doc/Rnews/</a></text>
<text top="934" left="580" width="4" height="15" font="0"><a href="http://CRAN.R-project.org/doc/Rnews/">.</a></text>
<text top="966" left="459" width="73" height="15" font="0">P. Murrell.</text>
<text top="966" left="549" width="229" height="15" font="0">Recent changes in grid graphics.</text>
<text top="966" left="795" width="10" height="15" font="0">R</text>
<text top="984" left="474" width="235" height="15" font="0">News, 5(1):12–20, May 2005a. URL</text>
<text top="985" left="714" width="91" height="12" font="4"><a href="http://CRAN.R-project.org/doc/Rnews/">http://CRAN.</a></text>
<text top="1003" left="474" width="184" height="12" font="4"><a href="http://CRAN.R-project.org/doc/Rnews/">R-project.org/doc/Rnews/</a></text>
<text top="1002" left="657" width="4" height="15" font="0"><a href="http://CRAN.R-project.org/doc/Rnews/">.</a></text>
<text top="1034" left="459" width="73" height="15" font="0">P. Murrell.</text>
<text top="1033" left="549" width="75" height="15" font="0">R Graphics.</text>
<text top="1034" left="641" width="164" height="15" font="0">Chapman &amp; Hall/CRC,</text>
<text top="1051" left="474" width="42" height="15" font="0">2005b.</text>
<text top="1051" left="531" width="31" height="15" font="0">URL</text>
<text top="1053" left="569" width="236" height="12" font="4"><a href="http://www.stat.auckland.ac.nz/~paul/RGraphics/rgraphics.html">http://www.stat.auckland.ac.nz/</a></text>
<text top="1071" left="474" width="229" height="12" font="4"><a href="http://www.stat.auckland.ac.nz/~paul/RGraphics/rgraphics.html">~paul/RGraphics/rgraphics.html</a></text>
<text top="1069" left="702" width="4" height="15" font="0"><a href="http://www.stat.auckland.ac.nz/~paul/RGraphics/rgraphics.html">.</a></text>
<text top="1069" left="724" width="82" height="15" font="0">ISBN 1-584-</text>
<text top="1087" left="474" width="56" height="15" font="0">88486-X.</text>
<text top="1119" left="459" width="346" height="15" font="0">R Development Core Team. R: A Language and Envi-</text>
<text top="1137" left="474" width="332" height="15" font="0">ronment for Statistical Computing. R Foundation for</text>
<text top="1155" left="474" width="332" height="15" font="0">Statistical Computing, Vienna, Austria, 2008. URL</text>
<text top="1174" left="474" width="184" height="12" font="4"><a href="http://www.R-project.org">http://www.R-project.org</a></text>
<text top="1173" left="657" width="141" height="15" font="0"><a href="http://www.R-project.org">. </a>ISBN 3-900051-07-0.</text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="892">
<text top="67" left="83" width="11" height="15" font="0">C</text>
<text top="69" left="94" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="184" width="10" height="15" font="0">R</text>
<text top="69" left="195" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="261" width="12" height="15" font="0">A</text>
<text top="69" left="273" width="53" height="12" font="1">RTICLES</text>
<text top="67" left="790" width="15" height="15" font="0">21</text>
<text top="125" left="82" width="346" height="15" font="0">D. Sarkar. Lattice: Multivariate Data Visualization with</text>
<text top="143" left="97" width="173" height="15" font="0">R. Springer, 2008. URL</text>
<text top="144" left="277" width="152" height="12" font="4"><a href="http://amazon.com/o/ASIN/0387759689/">http://amazon.com/o/</a></text>
<text top="162" left="97" width="122" height="12" font="4"><a href="http://amazon.com/o/ASIN/0387759689/">ASIN/0387759689/</a></text>
<text top="161" left="219" width="148" height="15" font="0"><a href="http://amazon.com/o/ASIN/0387759689/">. </a>ISBN 9780387759685.</text>
<text top="188" left="82" width="346" height="15" font="0">K. Soetaert. diagram: Functions for visualising simple</text>
<text top="206" left="97" width="332" height="15" font="0">graphs (networks), plotting flow diagrams, 2008a. R</text>
<text top="224" left="97" width="133" height="15" font="0">package version 1.2.</text>
<text top="251" left="82" width="79" height="15" font="0">K. Soetaert.</text>
<text top="250" left="178" width="251" height="15" font="0">shape: Functions for plotting graphical</text>
<text top="268" left="97" width="283" height="15" font="0">shapes, colors, 2008b. R package version 1.2.</text>
<text top="125" left="459" width="254" height="15" font="0">H. Wickham. ggplot2. Springer, 2009.</text>
<text top="126" left="721" width="84" height="12" font="4"><a href="http://had.co.nz/ggplot2/">http://had.</a></text>
<text top="144" left="474" width="107" height="12" font="4"><a href="http://had.co.nz/ggplot2/">co.nz/ggplot2/</a></text>
<text top="143" left="580" width="4" height="15" font="0"><a href="http://had.co.nz/ggplot2/">.</a></text>
<text top="197" left="459" width="80" height="15" font="0">Paul Murrell</text>
<text top="215" left="459" width="147" height="15" font="0">Department of Statistics</text>
<text top="233" left="459" width="168" height="15" font="0">The University of Auckland</text>
<text top="250" left="459" width="81" height="15" font="0">New Zealand</text>
<text top="270" left="459" width="183" height="12" font="4"><a href="mailto:paul@stat.auckland.ac.nz">paul@stat.auckland.ac.nz</a></text>
<text top="1218" left="82" width="220" height="15" font="0">The R Journal Vol. 1/1, May 2009</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
</pdf2xml>
