<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml producer="poppler" version="0.30.0">
<page number="1" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="0" size="12" family="Times" color="#000000"/>
	<fontspec id="1" size="9" family="Times" color="#000000"/>
	<fontspec id="2" size="35" family="Times" color="#000000"/>
	<fontspec id="3" size="12" family="Times" color="#000000"/>
	<fontspec id="4" size="19" family="Times" color="#000000"/>
	<fontspec id="5" size="12" family="Times" color="#00004c"/>
<text top="67" left="82" width="15" height="15" font="0">38</text>
<text top="67" left="562" width="11" height="15" font="0">C</text>
<text top="69" left="573" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="664" width="10" height="15" font="0">R</text>
<text top="69" left="674" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="740" width="12" height="15" font="0">A</text>
<text top="69" left="752" width="53" height="12" font="1">RTICLES</text>
<text top="121" left="82" width="565" height="36" font="2"><b>stringr: modern, consistent string</b></text>
<text top="166" left="82" width="182" height="36" font="2"><b>processing</b></text>
<text top="218" left="82" width="121" height="15" font="0">by Hadley Wickham</text>
<text top="252" left="96" width="57" height="15" font="3"><b>Abstract</b></text>
<text top="252" left="160" width="255" height="15" font="0">String processing is not glamorous, but</text>
<text top="270" left="96" width="319" height="15" font="0">it is frequently used in data cleaning and prepa-</text>
<text top="288" left="96" width="319" height="15" font="0">ration. The existing string functions in R are</text>
<text top="306" left="96" width="319" height="15" font="0">powerful, but not friendly. To remedy this, the</text>
<text top="324" left="96" width="46" height="15" font="3"><b>stringr</b></text>
<text top="324" left="149" width="266" height="15" font="0">package provides string functions that</text>
<text top="342" left="96" width="319" height="15" font="0">are simpler and more consistent, and also fixes</text>
<text top="360" left="96" width="319" height="15" font="0">some functionality that R is missing compared</text>
<text top="378" left="96" width="222" height="15" font="0">to other programming languages.</text>
<text top="420" left="82" width="124" height="21" font="4"><b>Introduction</b></text>
<text top="459" left="82" width="346" height="15" font="0">Strings are not glamorous, high-profile components</text>
<text top="476" left="82" width="346" height="15" font="0">of R, but they do play a big role in many data clean-</text>
<text top="494" left="82" width="346" height="15" font="0">ing and preparations tasks. R provides a solid set of</text>
<text top="512" left="82" width="346" height="15" font="0">string operations, but because they have grown or-</text>
<text top="530" left="82" width="346" height="15" font="0">ganically over time, they can be inconsistent and a</text>
<text top="548" left="82" width="346" height="15" font="0">little hard to learn. Additionally, they lag behind the</text>
<text top="566" left="82" width="346" height="15" font="0">string operations in other programming languages,</text>
<text top="584" left="82" width="346" height="15" font="0">so that some things that are easy to do in languages</text>
<text top="602" left="82" width="346" height="15" font="0">like Ruby or Python are rather hard to do in R.</text>
<text top="620" left="82" width="25" height="15" font="0">The</text>
<text top="620" left="112" width="46" height="15" font="5"><a href="http://cran.r-project.org/package=stringr"><b>stringr</b></a></text>
<text top="620" left="162" width="267" height="15" font="0">package aims to remedy these problems</text>
<text top="638" left="82" width="346" height="15" font="0">by providing a clean, modern interface to common</text>
<text top="656" left="82" width="116" height="15" font="0">string operations.</text>
<text top="674" left="105" width="162" height="15" font="0">More concretely, <b>stringr</b>:</text>
<text top="698" left="105" width="324" height="19" font="0">• Processes factors and characters in the same</text>
<text top="719" left="120" width="30" height="15" font="0">way.</text>
<text top="743" left="105" width="324" height="19" font="0">• Gives functions consistent names and argu-</text>
<text top="765" left="120" width="44" height="15" font="0">ments.</text>
<text top="789" left="105" width="324" height="19" font="0">• Simplifies string operations by eliminating op-</text>
<text top="810" left="120" width="309" height="15" font="0">tions that you don’t need 95% of the time (the</text>
<text top="828" left="120" width="309" height="15" font="0">other 5% of the time you can use the base func-</text>
<text top="846" left="120" width="41" height="15" font="0">tions).</text>
<text top="870" left="105" width="324" height="19" font="0">• Produces outputs than can easily be used as in-</text>
<text top="892" left="120" width="309" height="15" font="0">puts. This includes ensuring that missing in-</text>
<text top="910" left="120" width="309" height="15" font="0">puts result in missing outputs, and zero length</text>
<text top="928" left="120" width="237" height="15" font="0">inputs result in zero length outputs.</text>
<text top="952" left="105" width="324" height="19" font="0">• Completes R’s string handling functions with</text>
<text top="973" left="120" width="309" height="15" font="0">useful functions from other programming lan-</text>
<text top="991" left="120" width="50" height="15" font="0">guages.</text>
<text top="1019" left="105" width="324" height="15" font="0">To meet these goals, <b>stringr </b>provides two basic</text>
<text top="1037" left="82" width="138" height="15" font="0">families of functions:</text>
<text top="1061" left="105" width="197" height="19" font="0">• basic string operations, and</text>
<text top="1088" left="105" width="324" height="19" font="0">• pattern matching functions which use regular</text>
<text top="1110" left="120" width="309" height="15" font="0">expressions to detect, locate, match, replace,</text>
<text top="1128" left="120" width="162" height="15" font="0">extract, and split strings.</text>
<text top="1155" left="105" width="324" height="15" font="0">These are described in more detail in the follow-</text>
<text top="1173" left="82" width="81" height="15" font="0">ing sections.</text>
<text top="213" left="459" width="224" height="21" font="4"><b>Basic string operations</b></text>
<text top="254" left="459" width="346" height="15" font="0">There are three string functions that are closely re-</text>
<text top="272" left="459" width="346" height="15" font="0">lated to their base R equivalents, but with a few en-</text>
<text top="290" left="459" width="83" height="15" font="0">hancements:</text>
<text top="324" left="481" width="324" height="19" font="0">• str_c is equivalent to paste, but it uses the</text>
<text top="346" left="496" width="309" height="15" font="0">empty string (“”) as the default separator and</text>
<text top="363" left="496" width="264" height="15" font="0">silently removes zero length arguments.</text>
<text top="395" left="481" width="324" height="19" font="0">• str_length is equivalent to nchar, but it pre-</text>
<text top="416" left="496" width="309" height="15" font="0">serves NA’s (rather than giving them length</text>
<text top="434" left="496" width="309" height="15" font="0">2) and converts factors to characters (not inte-</text>
<text top="452" left="496" width="36" height="15" font="0">gers).</text>
<text top="483" left="481" width="324" height="19" font="0">• str_sub is equivalent to substr but it returns a</text>
<text top="504" left="496" width="309" height="15" font="0">zero length vector if any of its inputs are zero</text>
<text top="522" left="496" width="309" height="15" font="0">length, and otherwise expands each argument</text>
<text top="540" left="496" width="309" height="15" font="0">to match the longest. It also accepts negative</text>
<text top="558" left="496" width="309" height="15" font="0">positions, which are calculated from the left of</text>
<text top="576" left="496" width="309" height="15" font="0">the last character. The end position defaults to</text>
<text top="595" left="496" width="15" height="12" font="0">-1</text>
<text top="594" left="511" width="268" height="15" font="0">, which corresponds to the last character.</text>
<text top="625" left="481" width="324" height="19" font="0">• str_str&lt;- is equivalent to substr&lt;-, but like</text>
<text top="648" left="496" width="53" height="12" font="0">str_sub</text>
<text top="647" left="556" width="250" height="15" font="0">it understands negative indices, and</text>
<text top="665" left="496" width="309" height="15" font="0">replacement strings not do need to be the same</text>
<text top="683" left="496" width="252" height="15" font="0">length as the string they are replacing.</text>
<text top="720" left="459" width="257" height="15" font="0">Three functions add new functionality:</text>
<text top="754" left="481" width="324" height="19" font="0">• str_dup to duplicate the characters within a</text>
<text top="776" left="496" width="42" height="15" font="0">string.</text>
<text top="807" left="481" width="324" height="19" font="0">• str_trim to remove leading and trailing</text>
<text top="828" left="496" width="78" height="15" font="0">whitespace.</text>
<text top="859" left="481" width="324" height="19" font="0">• str_pad to pad a string with extra whitespace</text>
<text top="881" left="496" width="202" height="15" font="0">on the left, right, or both sides.</text>
<text top="934" left="459" width="168" height="21" font="4"><b>Pattern matching</b></text>
<text top="975" left="459" width="46" height="15" font="3"><b>stringr</b></text>
<text top="975" left="511" width="295" height="15" font="0">provides pattern matching functions to <b>de-</b></text>
<text top="993" left="459" width="24" height="15" font="3"><b>tect</b></text>
<text top="993" left="483" width="322" height="15" font="0">, <b>locate</b>, <b>extract</b>, <b>match</b>, <b>replace</b>, and <b>split </b>strings:</text>
<text top="1027" left="481" width="324" height="19" font="0">• str_detect detects the presence or absence of</text>
<text top="1049" left="496" width="309" height="15" font="0">a pattern and returns a logical vector. Based on</text>
<text top="1068" left="496" width="38" height="12" font="0">grepl</text>
<text top="1067" left="534" width="4" height="15" font="0">.</text>
<text top="1098" left="481" width="324" height="19" font="0">• str_locate locates the first position of a</text>
<text top="1119" left="496" width="309" height="15" font="0">pattern and returns a numeric matrix with</text>
<text top="1137" left="496" width="309" height="15" font="0">columns start and end. str_locate_all locates</text>
<text top="1155" left="496" width="309" height="15" font="0">all matches, returning a list of numeric matri-</text>
<text top="1173" left="496" width="243" height="15" font="0">ces. Based on regexpr and gregexpr.</text>
<text top="1218" left="82" width="257" height="15" font="0">The R Journal Vol. 2/2, December 2010</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="6" size="12" family="Times" color="#00004c"/>
	<fontspec id="7" size="15" family="Times" color="#000000"/>
	<fontspec id="8" size="9" family="Times" color="#00004c"/>
	<fontspec id="9" size="6" family="Times" color="#000000"/>
<text top="67" left="83" width="11" height="15" font="0">C</text>
<text top="69" left="94" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="184" width="10" height="15" font="0">R</text>
<text top="69" left="195" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="261" width="12" height="15" font="0">A</text>
<text top="69" left="273" width="53" height="12" font="1">RTICLES</text>
<text top="67" left="790" width="15" height="15" font="0">39</text>
<text top="122" left="105" width="324" height="19" font="0">• str_extract extracts text corresponding to</text>
<text top="143" left="120" width="309" height="15" font="0">the first match, returning a character vector.</text>
<text top="162" left="120" width="114" height="12" font="0">str_extract_all</text>
<text top="161" left="240" width="189" height="15" font="0">extracts all matches and re-</text>
<text top="179" left="120" width="206" height="15" font="0">turns a list of character vectors.</text>
<text top="203" left="105" width="324" height="19" font="0">• str_match extracts capture groups formed by</text>
<text top="226" left="120" width="15" height="12" font="0">()</text>
<text top="224" left="143" width="147" height="15" font="0">from the first match.</text>
<text top="224" left="307" width="122" height="15" font="0">It returns a char-</text>
<text top="242" left="120" width="309" height="15" font="0">acter matrix with one column for the com-</text>
<text top="260" left="120" width="309" height="15" font="0">plete match and one column for each group.</text>
<text top="279" left="120" width="99" height="12" font="0">str_match_all</text>
<text top="278" left="222" width="207" height="15" font="0">extracts capture groups from all</text>
<text top="296" left="120" width="309" height="15" font="0">matches and returns a list of character matrices.</text>
<text top="320" left="105" width="324" height="19" font="0">• str_replace replaces the first matched</text>
<text top="341" left="120" width="48" height="15" font="0">pattern</text>
<text top="341" left="183" width="25" height="15" font="0">and</text>
<text top="341" left="224" width="48" height="15" font="0">returns</text>
<text top="341" left="286" width="7" height="15" font="0">a</text>
<text top="341" left="309" width="61" height="15" font="0">character</text>
<text top="341" left="385" width="44" height="15" font="0">vector.</text>
<text top="361" left="120" width="114" height="12" font="0">str_replace_all</text>
<text top="359" left="240" width="189" height="15" font="0">replaces all matches. Based</text>
<text top="377" left="120" width="110" height="15" font="0">on sub and gsub.</text>
<text top="401" left="105" width="324" height="19" font="0">• str_split_fixed splits the string into a fixed</text>
<text top="423" left="120" width="309" height="15" font="0">number of pieces based on a pattern and re-</text>
<text top="440" left="120" width="309" height="15" font="0">turns a character matrix. str_split splits a</text>
<text top="458" left="120" width="309" height="15" font="0">string into a variable number of pieces and re-</text>
<text top="476" left="120" width="206" height="15" font="0">turns a list of character vectors.</text>
<text top="503" left="82" width="43" height="15" font="0">Figure</text>
<text top="503" left="130" width="7" height="15" font="6"><a href="2010-2-RJournal_2010-2_Wickham.html#3">1</a></text>
<text top="503" left="142" width="287" height="15" font="0">shows how the simple (single match) form</text>
<text top="521" left="82" width="209" height="15" font="0">of each of these functions work.</text>
<text top="562" left="82" width="92" height="17" font="7"><b>Arguments</b></text>
<text top="592" left="82" width="346" height="15" font="0">Each pattern matching function has the same first</text>
<text top="610" left="82" width="346" height="15" font="0">two arguments, a character vector of strings to pro-</text>
<text top="628" left="82" width="346" height="15" font="0">cess and a single pattern (regular expression) to</text>
<text top="646" left="82" width="346" height="15" font="0">match. The replace functions have an additional ar-</text>
<text top="664" left="82" width="346" height="15" font="0">gument specifying the replacement string, and the</text>
<text top="682" left="82" width="346" height="15" font="0">split functions have an argument to specify the num-</text>
<text top="700" left="82" width="86" height="15" font="0">ber of pieces.</text>
<text top="718" left="105" width="324" height="15" font="0">Unlike base string functions, <b>stringr </b>only offers</text>
<text top="735" left="82" width="303" height="15" font="0">limited control over the type of matching.</text>
<text top="735" left="404" width="25" height="15" font="0">The</text>
<text top="755" left="82" width="53" height="12" font="0">fixed()</text>
<text top="753" left="143" width="285" height="15" font="0">and ignore.case() functions modify the</text>
<text top="771" left="82" width="346" height="15" font="0">pattern to use fixed matching or to ignore case, but</text>
<text top="789" left="82" width="346" height="15" font="0">if you want to use perl-style regular expressions or</text>
<text top="807" left="82" width="346" height="15" font="0">to match on bytes instead of characters, you’re out</text>
<text top="825" left="82" width="346" height="15" font="0">of luck and you’ll have to use the base string func-</text>
<text top="843" left="82" width="346" height="15" font="0">tions. This is a deliberate choice made to simplify</text>
<text top="861" left="82" width="346" height="15" font="0">these functions. For example, while grepl has six ar-</text>
<text top="879" left="82" width="234" height="15" font="0">guments, str_detect only has two.</text>
<text top="919" left="82" width="165" height="17" font="7"><b>Regular expressions</b></text>
<text top="950" left="82" width="346" height="15" font="0">To be able to use these functions effectively, you’ll</text>
<text top="968" left="82" width="346" height="15" font="0">need a good knowledge of regular expressions</text>
<text top="986" left="82" width="5" height="15" font="0"><a href="2010-2-RJournal_2010-2_Wickham.html#2">(</a></text>
<text top="986" left="87" width="39" height="15" font="6"><a href="2010-2-RJournal_2010-2_Wickham.html#2">Friedl</a></text>
<text top="986" left="127" width="4" height="15" font="0"><a href="2010-2-RJournal_2010-2_Wickham.html#2">,</a></text>
<text top="986" left="135" width="30" height="15" font="6"><a href="2010-2-RJournal_2010-2_Wickham.html#2">1997</a></text>
<text top="986" left="165" width="264" height="15" font="0"><a href="2010-2-RJournal_2010-2_Wickham.html#2">), </a>which this paper is not going to teach</text>
<text top="1004" left="82" width="274" height="15" font="0">you. Some useful tools to get you started:</text>
<text top="122" left="481" width="64" height="19" font="0">• A good</text>
<text top="125" left="549" width="98" height="15" font="6"><a href="http://www.regular-expressions.info/reference.html">reference sheet</a></text>
<text top="122" left="647" width="6" height="11" font="8"><a href="http://www.regular-expressions.info/reference.html">1</a></text>
<text top="152" left="481" width="197" height="19" font="0">• A tool that allows you to</text>
<text top="156" left="686" width="113" height="15" font="6"><a href="http://gskinner.com/RegExr/">interactively test</a></text>
<text top="153" left="799" width="6" height="11" font="8"><a href="http://gskinner.com/RegExr/">2</a></text>
<text top="174" left="496" width="244" height="15" font="0">what a regular expression will match</text>
<text top="201" left="481" width="76" height="19" font="0">• A tool to</text>
<text top="204" left="563" width="177" height="15" font="6"><a href="http://www.txt2re.com">build a regular expression</a></text>
<text top="202" left="740" width="6" height="11" font="8"><a href="http://www.txt2re.com">3</a></text>
<text top="204" left="752" width="54" height="15" font="0">from an</text>
<text top="222" left="496" width="78" height="15" font="0">input string</text>
<text top="256" left="481" width="324" height="15" font="0">When writing regular expressions, I strongly rec-</text>
<text top="274" left="459" width="346" height="15" font="0">ommend generating a list of positive (pattern should</text>
<text top="292" left="459" width="346" height="15" font="0">match) and negative (pattern shouldn’t match) test</text>
<text top="310" left="459" width="346" height="15" font="0">cases to ensure that you are matching the correct</text>
<text top="328" left="459" width="85" height="15" font="0">components.</text>
<text top="371" left="459" width="211" height="17" font="7"><b>Functions that return lists</b></text>
<text top="402" left="459" width="346" height="15" font="0">Many of the functions return a list of vectors or ma-</text>
<text top="419" left="459" width="346" height="15" font="0">trices. To work with each element of the list there</text>
<text top="437" left="459" width="346" height="15" font="0">are two strategies: iterate through a common set of</text>
<text top="455" left="459" width="346" height="15" font="0">indices, or use mapply to iterate through the vectors</text>
<text top="473" left="459" width="346" height="15" font="0">simultaneously. The first approach is usually easier</text>
<text top="491" left="459" width="271" height="15" font="0">to understand and is illustrated in Figure</text>
<text top="491" left="734" width="7" height="15" font="6"><a href="2010-2-RJournal_2010-2_Wickham.html#3">2</a></text>
<text top="491" left="742" width="4" height="15" font="0"><a href="2010-2-RJournal_2010-2_Wickham.html#3">.</a></text>
<text top="539" left="459" width="112" height="21" font="4"><b>Conclusion</b></text>
<text top="578" left="459" width="46" height="15" font="3"><b>stringr</b></text>
<text top="578" left="510" width="296" height="15" font="0">provides an opinionated interface to strings</text>
<text top="596" left="459" width="346" height="15" font="0">in R. It makes string processing simpler by remov-</text>
<text top="614" left="459" width="346" height="15" font="0">ing uncommon options, and by vigorously enforcing</text>
<text top="632" left="459" width="346" height="15" font="0">consistency across functions. I have also added new</text>
<text top="650" left="459" width="346" height="15" font="0">functions that I have found useful from Ruby, and</text>
<text top="668" left="459" width="346" height="15" font="0">over time, I hope users will suggest useful functions</text>
<text top="686" left="459" width="346" height="15" font="0">from other programming languages. I will continue</text>
<text top="704" left="459" width="346" height="15" font="0">to build on the included test suite to ensure that the</text>
<text top="722" left="459" width="339" height="15" font="0">package behaves as expected and remains bug free.</text>
<text top="770" left="459" width="130" height="21" font="4"><b>Bibliography</b></text>
<text top="809" left="459" width="346" height="15" font="0">J. E. Friedl. Mastering Regular Expressions. O’Reilly,</text>
<text top="827" left="474" width="34" height="15" font="0">1997.</text>
<text top="827" left="553" width="31" height="15" font="0">URL</text>
<text top="828" left="600" width="206" height="12" font="6"><a href="http://oreilly.com/catalog/9781565922570">http://oreilly.com/catalog/</a></text>
<text top="846" left="474" width="99" height="12" font="6"><a href="http://oreilly.com/catalog/9781565922570">9781565922570</a></text>
<text top="844" left="573" width="4" height="15" font="0"><a href="http://oreilly.com/catalog/9781565922570">.</a></text>
<text top="896" left="459" width="103" height="15" font="0">Hadley Wickham</text>
<text top="914" left="459" width="147" height="15" font="0">Department of Statistics</text>
<text top="932" left="459" width="95" height="15" font="0">Rice University</text>
<text top="950" left="459" width="140" height="15" font="0">6100 Main St MS#138</text>
<text top="968" left="459" width="152" height="15" font="0">Houston TX 77005-1827</text>
<text top="986" left="459" width="31" height="15" font="0">USA</text>
<text top="1005" left="459" width="114" height="12" font="6"><a href="mailto:hadley@rice.edu">hadley@rice.edu</a></text>
<text top="1143" left="99" width="4" height="9" font="9"><a href="http://www.regular-expressions.info/reference.html">1</a></text>
<text top="1146" left="104" width="282" height="12" font="8"><a href="http://www.regular-expressions.info/reference.html">http://www.regular-expressions.info/reference.html</a></text>
<text top="1158" left="99" width="4" height="9" font="9"><a href="http://gskinner.com/RegExr/">2</a></text>
<text top="1160" left="104" width="163" height="12" font="8"><a href="http://gskinner.com/RegExr/">http://gskinner.com/RegExr/</a></text>
<text top="1173" left="99" width="4" height="9" font="9"><a href="http://www.txt2re.com">3</a></text>
<text top="1175" left="104" width="127" height="12" font="8"><a href="http://www.txt2re.com">http://www.txt2re.com</a></text>
<text top="1218" left="82" width="257" height="15" font="0">The R Journal Vol. 2/2, December 2010</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
<text top="67" left="82" width="15" height="15" font="0">40</text>
<text top="67" left="562" width="11" height="15" font="0">C</text>
<text top="69" left="573" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="67" left="664" width="10" height="15" font="0">R</text>
<text top="69" left="674" width="61" height="12" font="1">ESEARCH</text>
<text top="67" left="740" width="12" height="15" font="0">A</text>
<text top="69" left="752" width="53" height="12" font="1">RTICLES</text>
<text top="143" left="82" width="122" height="12" font="0">library(stringr)</text>
<text top="161" left="82" width="549" height="12" font="0">strings &lt;- c(&#34; 219 733 8965&#34;, &#34;329-293-8753 &#34;, &#34;banana&#34;, &#34;595 794 7569&#34;,</text>
<text top="179" left="90" width="290" height="12" font="0">&#34;387 287 6718&#34;, &#34;apple&#34;, &#34;233.398.9187</text>
<text top="179" left="395" width="259" height="12" font="0">&#34;, &#34;482 952 3315&#34;, &#34;239 923 8115&#34;,</text>
<text top="197" left="90" width="518" height="12" font="0">&#34;842 566 4692&#34;, &#34;Work: 579-499-7527&#34;, &#34;$1000&#34;, &#34;Home: 543.355.3679&#34;)</text>
<text top="215" left="82" width="427" height="12" font="0">phone &lt;- &#34;([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})&#34;</text>
<text top="251" left="82" width="290" height="12" font="0"># Which strings contain phone numbers?</text>
<text top="269" left="82" width="198" height="12" font="0">str_detect(strings, phone)</text>
<text top="287" left="82" width="267" height="12" font="0">strings[str_detect(strings, phone)]</text>
<text top="323" left="82" width="381" height="12" font="0"># Where in the string is the phone number located?</text>
<text top="340" left="82" width="252" height="12" font="0">loc &lt;- str_locate(strings, phone)</text>
<text top="358" left="82" width="23" height="12" font="0">loc</text>
<text top="376" left="82" width="244" height="12" font="0"># Extract just the phone numbers</text>
<text top="394" left="82" width="351" height="12" font="0">str_sub(strings, loc[, &#34;start&#34;], loc[, &#34;end&#34;])</text>
<text top="412" left="82" width="175" height="12" font="0"># Or more conveniently:</text>
<text top="430" left="82" width="206" height="12" font="0">str_extract(strings, phone)</text>
<text top="466" left="82" width="335" height="12" font="0"># Pull out the three components of the match</text>
<text top="484" left="82" width="191" height="12" font="0">str_match(strings, phone)</text>
<text top="520" left="82" width="152" height="12" font="0"># Anonymise the data</text>
<text top="538" left="82" width="328" height="12" font="0">str_replace(strings, phone, &#34;XXX-XXX-XXXX&#34;)</text>
<text top="584" left="82" width="723" height="15" font="0">Figure 1: Simple string matching functions for processing a character vector containing phone numbers</text>
<text top="602" left="82" width="143" height="15" font="0">(among other things).</text>
<text top="674" left="82" width="122" height="12" font="0">library(stringr)</text>
<text top="692" left="82" width="198" height="12" font="0">col2hex &lt;- function(col) {</text>
<text top="710" left="98" width="145" height="12" font="0">rgb &lt;- col2rgb(col)</text>
<text top="727" left="98" width="450" height="12" font="0">rgb(rgb[&#34;red&#34;, ], rgb[&#34;green&#34;, ], rgb[&#34;blue&#34;, ], max = 255)</text>
<text top="745" left="82" width="8" height="12" font="0">}</text>
<text top="781" left="82" width="495" height="12" font="0"># Goal replace colour names in a string with their hex equivalent</text>
<text top="799" left="82" width="602" height="12" font="0">strings &lt;- c(&#34;Roses are red, violets are blue&#34;, &#34;My favourite colour is green&#34;)</text>
<text top="835" left="82" width="412" height="12" font="0">colours &lt;- str_c(&#34;\\b&#34;, colors(), &#34;\\b&#34;, collapse=&#34;|&#34;)</text>
<text top="853" left="82" width="488" height="12" font="0"># This gets us the colours, but we have no way of replacing them</text>
<text top="871" left="82" width="252" height="12" font="0">str_extract_all(strings, colours)</text>
<text top="907" left="82" width="107" height="12" font="0"># Instead, let</text>
<text top="902" left="189" width="164" height="19" font="0">'s work with locations</text>
<text top="925" left="82" width="305" height="12" font="0">locs &lt;- str_locate_all(strings, colours)</text>
<text top="943" left="82" width="305" height="12" font="0">sapply(seq_along(strings), function(i) {</text>
<text top="961" left="98" width="152" height="12" font="0">string &lt;- strings[i]</text>
<text top="979" left="98" width="122" height="12" font="0">loc &lt;- locs[[i]]</text>
<text top="1014" left="98" width="274" height="12" font="0"># Convert colours to hex and replace</text>
<text top="1032" left="98" width="465" height="12" font="0">hex &lt;- col2hex(str_sub(string, loc[, &#34;start&#34;], loc[, &#34;end&#34;]))</text>
<text top="1050" left="98" width="396" height="12" font="0">str_sub(string, loc[, &#34;start&#34;], loc[, &#34;end&#34;]) &lt;- hex</text>
<text top="1068" left="98" width="46" height="12" font="0">string</text>
<text top="1086" left="82" width="15" height="12" font="0">})</text>
<text top="1133" left="82" width="723" height="15" font="0">Figure 2: A more complex situation involving iteration through a string and processing matches with a func-</text>
<text top="1151" left="82" width="30" height="15" font="0">tion.</text>
<text top="1218" left="82" width="257" height="15" font="0">The R Journal Vol. 2/2, December 2010</text>
<text top="1218" left="704" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
</pdf2xml>
