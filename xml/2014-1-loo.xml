<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf2xml SYSTEM "pdf2xml.dtd">

<pdf2xml producer="poppler" version="0.30.0">
<page number="1" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="0" size="12" family="Times" color="#000000"/>
	<fontspec id="1" size="9" family="Times" color="#000000"/>
	<fontspec id="2" size="28" family="Times" color="#000000"/>
	<fontspec id="3" size="11" family="Times" color="#000000"/>
	<fontspec id="4" size="11" family="Times" color="#000000"/>
	<fontspec id="5" size="15" family="Times" color="#000000"/>
	<fontspec id="6" size="11" family="Times" color="#7282aa"/>
	<fontspec id="7" size="11" family="Times" color="#7282aa"/>
	<fontspec id="8" size="8" family="Times" color="#7282aa"/>
	<fontspec id="9" size="6" family="Times" color="#000000"/>
	<fontspec id="10" size="9" family="Times" color="#7282aa"/>
	<fontspec id="11" size="9" family="Times" color="#7282aa"/>
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">111</text>
<text top="98" left="149" width="565" height="30" font="2"><b>The stringdist Package for Approximate</b></text>
<text top="137" left="149" width="232" height="30" font="2"><b>String Matching</b></text>
<text top="173" left="149" width="149" height="15" font="0">by Mark P.J. van der Loo</text>
<text top="214" left="148" width="52" height="13" font="3"><b>Abstract</b></text>
<text top="214" left="207" width="538" height="13" font="4">Comparing text strings in terms of distance functions is a common and fundamental task in</text>
<text top="231" left="149" width="595" height="13" font="4">many statistical text-processing applications. Thus far, string distance functionality has been somewhat</text>
<text top="247" left="149" width="595" height="13" font="4">scattered around R and its extension packages, leaving users with inconistent interfaces and encoding</text>
<text top="264" left="149" width="595" height="13" font="4">handling. The <b>stringdist </b>package was designed to offer a low-level interface to several popular string</text>
<text top="280" left="149" width="595" height="13" font="4">distance algorithms which have been re-implemented in C for this purpose. The package offers</text>
<text top="297" left="149" width="595" height="13" font="4">distances based on counting q-grams, edit-based distances, and some lesser known heuristic distance</text>
<text top="313" left="149" width="595" height="13" font="4">functions. Based on this functionality, the package also offers inexact matching equivalents of R’s</text>
<text top="329" left="149" width="189" height="13" font="4">native exact matching functions</text>
<text top="326" left="341" width="95" height="18" font="4">match and %in%.</text>
<text top="374" left="149" width="104" height="17" font="5"><b>Introduction</b></text>
<text top="413" left="148" width="596" height="13" font="4">Approximate string matching is an important subtask of many data processing applications including</text>
<text top="429" left="149" width="595" height="13" font="4">statistical matching, text search, text classification, spell checking, and genomics. At the heart of</text>
<text top="446" left="149" width="595" height="13" font="4">approximate string matching lies the ability to quantify the similarity between two strings in terms</text>
<text top="462" left="149" width="595" height="13" font="4">of string metrics. String matching applications are commonly subdivided into online and offline</text>
<text top="479" left="149" width="595" height="13" font="4">applications where the latter refers to the situation where the string that is being searched for a match</text>
<text top="495" left="149" width="595" height="13" font="4">can be preprocessed to build a search index. In online string matching no such preprocessing takes</text>
<text top="512" left="148" width="596" height="13" font="4">place. A second subdivision can be made into approximate text search, where one is interested in</text>
<text top="528" left="149" width="596" height="13" font="4">the location of the match of one string in another string, and dictionary lookup, where one looks for</text>
<text top="545" left="149" width="596" height="13" font="4">the location of the closest match of a string in a lookup table. Here, we focus on dictionary lookup</text>
<text top="561" left="149" width="318" height="13" font="4">applications using online string matching algorithms.</text>
<text top="582" left="171" width="573" height="13" font="4">String metrics may broadly be divided in edit-based distances, q-gram based distances (sometimes</text>
<text top="598" left="149" width="596" height="13" font="4">called n-grams) and heuristic distances. To determine edit-based distances one counts, possibly</text>
<text top="615" left="148" width="596" height="13" font="4">weighted, the number of fundamental operations necessary to turn one string into another. Operations</text>
<text top="631" left="149" width="595" height="13" font="4">may include substitution, deletion, or insertion of a character or transposition of characters. Distances</text>
<text top="648" left="149" width="598" height="13" font="4">based on q-grams are obtained by comparing the occurrence of q-character sequences between strings.</text>
<text top="664" left="149" width="595" height="13" font="4">Heuristic measures have no strong mathematical underpinning but have been developed as a practical</text>
<text top="681" left="149" width="595" height="13" font="4">tool with a particular application in mind. Finally, it is worth mentioning that these families of string</text>
<text top="697" left="149" width="446" height="13" font="4">metrics have recently been extended with metrics based on string kernels <a href="2014-1-loo.html#11">(</a></text>
<text top="697" left="594" width="68" height="13" font="6"><a href="2014-1-loo.html#11">Lodhi et al.</a></text>
<text top="697" left="662" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="697" left="669" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2002</a></text>
<text top="697" left="696" width="48" height="13" font="4"><a href="2014-1-loo.html#11">), </a>which</text>
<text top="713" left="149" width="180" height="13" font="4">have been implemented in the</text>
<text top="714" left="332" width="48" height="13" font="7"><a href="http://CRAN.R-project.org/package=kernlab"><b>kernlab</b></a></text>
<text top="713" left="383" width="64" height="13" font="4">package of</text>
<text top="713" left="451" width="105" height="13" font="6"><a href="2014-1-loo.html#11">Karatzoglou et al.</a></text>
<text top="713" left="560" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="713" left="564" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2004</a></text>
<text top="713" left="591" width="8" height="13" font="4"><a href="2014-1-loo.html#11">).</a></text>
<text top="734" left="171" width="575" height="13" font="4">The base R installation offers functions for both string metric calculation and online text search.</text>
<text top="751" left="148" width="22" height="13" font="4">The</text>
<text top="747" left="173" width="238" height="18" font="4">adist function computes the generalized</text>
<text top="751" left="415" width="71" height="13" font="6"><a href="2014-1-loo.html#11">Levenshtein</a></text>
<text top="751" left="489" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="751" left="493" width="26" height="13" font="6"><a href="2014-1-loo.html#11">1966</a></text>
<text top="751" left="519" width="186" height="13" font="4"><a href="2014-1-loo.html#11">) </a>distance between strings while</text>
<text top="747" left="708" width="38" height="18" font="4">agrep,</text>
<text top="767" left="149" width="124" height="13" font="4">based on a library of</text>
<text top="767" left="276" width="57" height="13" font="6"><a href="2014-1-loo.html#11">Laurikari</a></text>
<text top="767" left="336" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="767" left="341" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2001</a></text>
<text top="767" left="368" width="376" height="13" font="4"><a href="2014-1-loo.html#11">), </a>allows for online approximate text search based on the same</text>
<text top="784" left="149" width="141" height="13" font="4">distance metric. In fact,</text>
<text top="780" left="293" width="451" height="18" font="4">agrep is more advanced than simple approximate search since it allows for</text>
<text top="800" left="149" width="476" height="13" font="4">approximate matching against regular expressions. Furthermore, the functions</text>
<text top="797" left="628" width="116" height="18" font="4">match and %in% can</text>
<text top="817" left="149" width="365" height="13" font="4">be used for dictionary lookup based on exact matching while</text>
<text top="813" left="518" width="227" height="18" font="4">pmatch and charmatch can be used for</text>
<text top="833" left="149" width="595" height="13" font="4">lookup based on partial matches. A lookup function based on approximate string matching is not</text>
<text top="849" left="149" width="193" height="13" font="4">available in R’s base installation.</text>
<text top="870" left="171" width="573" height="13" font="4">The native R implementations are complemented by several several extension packages that</text>
<text top="887" left="149" width="339" height="13" font="4">offer offline string matching algorithms. For example,</text>
<text top="887" left="493" width="93" height="13" font="7"><a href="http://CRAN.R-project.org/package=RecordLinkage"><b>RecordLinkage</b></a></text>
<text top="887" left="592" width="5" height="13" font="4"><a href="2014-1-loo.html#10">(</a></text>
<text top="887" left="596" width="105" height="13" font="6"><a href="2014-1-loo.html#10">Borg and Sariyar</a></text>
<text top="887" left="702" width="3" height="13" font="4"><a href="2014-1-loo.html#10">,</a></text>
<text top="887" left="710" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2012</a></text>
<text top="887" left="738" width="8" height="13" font="4"><a href="2014-1-loo.html#10">),</a></text>
<text top="903" left="149" width="73" height="13" font="7"><a href="http://CRAN.R-project.org/package=MiscPsycho"><b>MiscPsycho</b></a></text>
<text top="903" left="225" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="903" left="230" width="37" height="13" font="6"><a href="2014-1-loo.html#11">Doran</a></text>
<text top="903" left="267" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="903" left="274" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2010</a></text>
<text top="903" left="301" width="8" height="13" font="4"><a href="2014-1-loo.html#11">),</a></text>
<text top="903" left="312" width="21" height="13" font="7"><a href="http://CRAN.R-project.org/package=cba"><b>cba</b></a></text>
<text top="903" left="336" width="4" height="13" font="4"><a href="2014-1-loo.html#10">(</a></text>
<text top="903" left="341" width="117" height="13" font="6"><a href="2014-1-loo.html#10">Buchta and Hahsler</a></text>
<text top="903" left="458" width="3" height="13" font="4"><a href="2014-1-loo.html#10">,</a></text>
<text top="903" left="464" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2013</a></text>
<text top="903" left="491" width="34" height="13" font="4"><a href="2014-1-loo.html#10">), </a>and</text>
<text top="903" left="528" width="50" height="13" font="7"><a href="http://CRAN.R-project.org/package=Mkmisc"><b>Mkmisc</b></a></text>
<text top="903" left="582" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="903" left="586" width="29" height="13" font="6"><a href="2014-1-loo.html#11">Kohl</a></text>
<text top="903" left="615" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="903" left="622" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2013</a></text>
<text top="903" left="648" width="96" height="13" font="4"><a href="2014-1-loo.html#11">) </a>offer interfaces</text>
<text top="920" left="149" width="207" height="13" font="4">to the Levenshtein distance, while</text>
<text top="920" left="360" width="72" height="13" font="7"><a href="http://CRAN.R-project.org/package=deducorrect"><b>deducorrect</b></a></text>
<text top="920" left="436" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="920" left="440" width="106" height="13" font="6"><a href="2014-1-loo.html#11">van der Loo et al.</a></text>
<text top="920" left="546" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="920" left="553" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2011</a></text>
<text top="920" left="581" width="163" height="13" font="4"><a href="2014-1-loo.html#11">) </a>implements the restricted</text>
<text top="936" left="149" width="190" height="13" font="4">Damerau-Levenshtein <a href="2014-1-loo.html#0">distance</a></text>
<text top="933" left="339" width="5" height="10" font="8"><a href="2014-1-loo.html#0">1</a></text>
<text top="936" left="345" width="399" height="13" font="4"><a href="2014-1-loo.html#0">. </a>Although the distances implemented in these packages are all</text>
<text top="953" left="149" width="595" height="13" font="4">based on (an extension of) the Levenshtein distance, interfaces may vary: <b>RecordLinkage </b>takes</text>
<text top="966" left="149" width="595" height="18" font="4">character data as input and computes byte-wise distances ignoring the possibility of multibyte</text>
<text top="985" left="149" width="595" height="13" font="4">character encoding. Packages <b>MkMisc </b>and <b>deducorrect </b>do exactly the opposite and always compare</text>
<text top="1002" left="149" width="595" height="13" font="4">strings character-wise. The <b>cba </b>package can compute bytewise distances between character data as</text>
<text top="1018" left="148" width="596" height="13" font="4">well as between lists of integers, leaving a translation from (possibly multibyte character) data to</text>
<text top="1035" left="149" width="193" height="13" font="4">integers to the user. Finally, the</text>
<text top="1035" left="345" width="40" height="13" font="7"><a href="http://CRAN.R-project.org/package=textcat"><b>textcat</b></a></text>
<text top="1035" left="389" width="66" height="13" font="4">package of</text>
<text top="1035" left="459" width="77" height="13" font="6"><a href="2014-1-loo.html#11">Hornik et al.</a></text>
<text top="1035" left="540" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="1035" left="544" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2013</a></text>
<text top="1035" left="572" width="172" height="13" font="4"><a href="2014-1-loo.html#11">), </a>which implements q-gram</text>
<text top="1051" left="149" width="204" height="13" font="4">based text classification methods of</text>
<text top="1051" left="355" width="114" height="13" font="6"><a href="2014-1-loo.html#11">Cavnar and Trenkle</a></text>
<text top="1051" left="472" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="1051" left="477" width="26" height="13" font="6"><a href="2014-1-loo.html#11">1994</a></text>
<text top="1051" left="503" width="241" height="13" font="4"><a href="2014-1-loo.html#11">), </a>offers a range of q-gram based distances</text>
<text top="1068" left="148" width="373" height="13" font="4">which can be computed on a character-wise or byte-wise basis.</text>
<text top="1089" left="171" width="575" height="13" font="4">There are several packages that offer string-like distance functions applied to specialized objects.</text>
<text top="1105" left="148" width="23" height="13" font="4">The</text>
<text top="1105" left="175" width="62" height="13" font="7"><a href="http://CRAN.R-project.org/package=TraMineR"><b>TraMineR</b></a></text>
<text top="1105" left="240" width="58" height="13" font="4">package <a href="2014-1-loo.html#11">(</a></text>
<text top="1105" left="298" width="73" height="13" font="6"><a href="2014-1-loo.html#11">Studer et al.</a></text>
<text top="1105" left="371" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="1105" left="378" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2011</a></text>
<text top="1105" left="406" width="339" height="13" font="4"><a href="2014-1-loo.html#11">) </a>for example implements various distance measures on</text>
<text top="1132" left="165" width="4" height="9" font="9">1</text>
<text top="1134" left="170" width="20" height="12" font="1">The</text>
<text top="1134" left="195" width="21" height="12" font="10"><a href="http://CRAN.R-project.org/package=vwr"><b>vwr</b></a></text>
<text top="1134" left="220" width="53" height="12" font="1">package <a href="2014-1-loo.html#11">(</a></text>
<text top="1134" left="273" width="47" height="12" font="11"><a href="2014-1-loo.html#11">Keuleers</a></text>
<text top="1134" left="320" width="3" height="12" font="1"><a href="2014-1-loo.html#11">,</a></text>
<text top="1134" left="327" width="24" height="12" font="11"><a href="2014-1-loo.html#11">2013</a></text>
<text top="1134" left="352" width="393" height="12" font="1"><a href="2014-1-loo.html#11">) </a>used to offer its own implementation of string distances but currently</text>
<text top="1148" left="149" width="62" height="12" font="1">depends on</text>
<text top="1148" left="214" width="52" height="12" font="10"><a href="http://CRAN.R-project.org/package=stringdist"><b>stringdist</b></a></text>
<text top="1148" left="266" width="3" height="12" font="1"><a href="http://CRAN.R-project.org/package=stringdist">.</a></text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="2" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">112</text>
<text top="103" left="147" width="233" height="13" font="4">“state sequence objects” including the</text>
<text top="103" left="384" width="62" height="13" font="6"><a href="2014-1-loo.html#11">Hamming</a></text>
<text top="103" left="450" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="103" left="455" width="27" height="13" font="6"><a href="2014-1-loo.html#11">1950</a></text>
<text top="103" left="482" width="262" height="13" font="4"><a href="2014-1-loo.html#11">) </a>distance, the Longest Common Substring</text>
<text top="120" left="149" width="595" height="13" font="4">distance and more. Although it may be possible for users to translate character strings representing</text>
<text top="136" left="149" width="595" height="13" font="4">text to a state sequence object, this obviously means using <b>TraMineR </b>for purposes for which it was</text>
<text top="152" left="149" width="595" height="13" font="4">not intended, which is undesirable. Similarly, the Hamming distance is implemented in at least five</text>
<text top="169" left="149" width="427" height="13" font="4">more packages for object types ranging from presentations of graphs <a href="2014-1-loo.html#10">(</a></text>
<text top="169" left="575" width="31" height="13" font="6"><a href="2014-1-loo.html#10">Butts</a></text>
<text top="169" left="607" width="3" height="13" font="4"><a href="2014-1-loo.html#10">,</a></text>
<text top="169" left="614" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2013</a></text>
<text top="169" left="641" width="103" height="13" font="4"><a href="2014-1-loo.html#10">), </a>to rank vectors</text>
<text top="185" left="148" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="185" left="153" width="73" height="13" font="6"><a href="2014-1-loo.html#11">Grimonprez</a></text>
<text top="185" left="226" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="185" left="232" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2013</a></text>
<text top="185" left="259" width="126" height="13" font="4"><a href="2014-1-loo.html#11">) </a>to phylogenic data <a href="2014-1-loo.html#11">(</a></text>
<text top="185" left="386" width="117" height="13" font="6"><a href="2014-1-loo.html#11">Schliep and Paradis</a></text>
<text top="185" left="503" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="185" left="510" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2013</a></text>
<text top="185" left="537" width="8" height="13" font="4"><a href="2014-1-loo.html#11">).</a></text>
<text top="206" left="171" width="573" height="13" font="4">The fact that several authors have taken the trouble to implement similar functionality shows that</text>
<text top="223" left="149" width="595" height="13" font="4">the ability to compute offline string distance measures is a fairly basic need across fields that deserves</text>
<text top="239" left="149" width="595" height="13" font="4">specialized attention. Moreover, the variety of input types and interpretations thereof make reuse and</text>
<text top="256" left="149" width="354" height="13" font="4">comparison of these implementations less than transparent.</text>
<text top="276" left="171" width="573" height="13" font="4">The <b>stringdist </b>package presented in this paper aims to help users by offering a uniform interface</text>
<text top="293" left="149" width="595" height="13" font="4">to a number of well-known string distance measures where special values and (non)interpretation</text>
<text top="309" left="149" width="598" height="13" font="4">of character encoding are handled transparently and consistently across metrics. The package re-</text>
<text top="326" left="149" width="595" height="13" font="4">implements some previously available distances and adds a number of distance measures which were</text>
<text top="342" left="149" width="596" height="13" font="4">according to this author’s best knowledge previously unavailable in R. Distances implemented by</text>
<text top="359" left="149" width="595" height="13" font="4">the package include edit-based distances (Hamming, generalized Levenshtein, Longest Common</text>
<text top="375" left="149" width="595" height="13" font="4">Substring, optimal string alignment, and generalized Damerau-Levenshtein), q-gram based distances</text>
<text top="392" left="148" width="597" height="13" font="4">(q-gram, Jaccard, and cosine) and the heuristic Jaro and Jaro-Winkler distances. Of these distances,</text>
<text top="408" left="149" width="595" height="13" font="4">at least the generalized Damerau-Levensthein distance and the Jaccard distance appear to be new in</text>
<text top="424" left="149" width="596" height="13" font="4">the context of character strings. Core distance functions have been implemented as a C library for</text>
<text top="441" left="149" width="595" height="13" font="4">speed and exposed to R. Based on this functionality, the package implements approximate matching</text>
<text top="457" left="149" width="280" height="13" font="4">equivalents of base R’s table lookup functions</text>
<text top="454" left="432" width="312" height="18" font="4">match and %in%. A a convenience function that lists</text>
<text top="474" left="149" width="233" height="14" font="4">q-gram occurrences is included as well.</text>
<text top="495" left="171" width="573" height="13" font="4">The rest of this paper is organized as follows. In the next section we give a quick overview of the</text>
<text top="511" left="148" width="598" height="13" font="4">package’s main functionality and discuss how special values and character encodings are handled.</text>
<text top="528" left="148" width="598" height="13" font="4">The section after that is devoted to a concise description of the distance functions offered by <b>stringdist</b>.</text>
<text top="544" left="148" width="596" height="13" font="4">We will work out simple examples, and point out some properties of the various metrics. The section</text>
<text top="560" left="149" width="598" height="13" font="4">is aimed to serve as a reference to users of the package. We end with some conclusions and an outlook.</text>
<text top="605" left="149" width="186" height="17" font="5"><b>The stringdist package</b></text>
<text top="644" left="148" width="596" height="13" font="4">The package offers two basic kinds of functionality: computing string comparison metrics and</text>
<text top="660" left="149" width="595" height="13" font="4">table lookup by approximate string matching. String distances can be computed with the function</text>
<text top="674" left="149" width="595" height="18" font="4">stringdist or stringdistmatrix. Both take at least two character vectors as arguments, but the</text>
<text top="693" left="149" width="596" height="13" font="4">former computes element-wise string distances where the shorter argument is recycled, and the latter</text>
<text top="710" left="149" width="163" height="13" font="4">returns the distance matrix.</text>
<text top="733" left="149" width="254" height="18" font="4">&gt; stringdist('foo', c('fu','bar',NA))</text>
<text top="750" left="149" width="82" height="18" font="4">[1] 2 3 NA</text>
<text top="780" left="149" width="357" height="18" font="4">&gt; stringdistmatrix(c('foo','bar'), c('fu','bar',NA))</text>
<text top="796" left="183" width="96" height="18" font="4">[,1] [,2] [,3]</text>
<text top="812" left="149" width="27" height="18" font="4">[1,]</text>
<text top="812" left="204" width="7" height="18" font="4">2</text>
<text top="812" left="238" width="7" height="18" font="4">3</text>
<text top="812" left="265" width="14" height="18" font="4">NA</text>
<text top="829" left="149" width="27" height="18" font="4">[2,]</text>
<text top="829" left="204" width="7" height="18" font="4">3</text>
<text top="829" left="238" width="7" height="18" font="4">0</text>
<text top="829" left="265" width="14" height="18" font="4">NA</text>
<text top="862" left="149" width="595" height="13" font="4">Here, the default distance is the optimal string alignment distance which will be discussed in more</text>
<text top="879" left="149" width="358" height="13" font="4">detail below. To specify another algorithm one simply sets the</text>
<text top="875" left="510" width="234" height="18" font="4">method option. For example, to compute</text>
<text top="895" left="149" width="288" height="13" font="4">the Levenshtein distance one uses the following.</text>
<text top="919" left="149" width="268" height="18" font="4">&gt; stringdist('foo', 'bar', method='lv')</text>
<text top="949" left="171" width="383" height="13" font="4">String distance functions have two possible special output values.</text>
<text top="946" left="558" width="186" height="18" font="4">NA is returned whenever at least</text>
<text top="965" left="149" width="223" height="13" font="4">one of the input strings to compare is</text>
<text top="962" left="375" width="369" height="18" font="4">NA and Inf is returned when the distance between two strings</text>
<text top="982" left="149" width="595" height="13" font="4">is undefined according to the selected algorithm. For example, the Hamming distance is undefined</text>
<text top="998" left="148" width="259" height="13" font="4">when comparing strings of different length.</text>
<text top="1022" left="149" width="295" height="18" font="4">&gt; stringdist('fu', 'foo', method='hamming')</text>
<text top="1038" left="149" width="48" height="18" font="4">[1] Inf</text>
<text top="1068" left="171" width="84" height="13" font="4">The functions</text>
<text top="1065" left="260" width="484" height="18" font="4">stringdist and stringdistmatrix have very similar interfaces, allowing users</text>
<text top="1085" left="149" width="595" height="13" font="4">to select from nine different string distance algorithms, define weights (depending on the chosen</text>
<text top="1101" left="149" width="145" height="13" font="4">distance) and more. The</text>
<text top="1098" left="297" width="447" height="18" font="4">stringdistmatrix function has extra options that allow users to parallelize</text>
<text top="1118" left="149" width="595" height="13" font="4">calculation of the distance matrix over columns. Users may specify the number of cores to use or pass</text>
<text top="1134" left="149" width="7" height="13" font="4">a</text>
<text top="1131" left="159" width="572" height="18" font="4">cluster object as generated by makeCluster of the <b>parallel </b>package. For example, the command</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="3" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="12" size="12" family="Times" color="#000000"/>
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">113</text>
<text top="100" left="149" width="425" height="18" font="4">&gt; stringdistmatrix(c('foo','bar'), c('fu','bar',NA), ncores=3)</text>
<text top="130" left="149" width="487" height="13" font="4">distributes calculation of the columns of the distance matrix over three local cores.</text>
<text top="151" left="171" width="316" height="13" font="4">Approximate matching can be done with the functions</text>
<text top="148" left="490" width="255" height="18" font="4">amatch and ain. Function amatch(x,table)</text>
<text top="167" left="149" width="225" height="13" font="4">finds the closest match of elements of</text>
<text top="164" left="377" width="367" height="18" font="4">x in table. When multiple equivalent matches are found, the</text>
<text top="184" left="149" width="188" height="13" font="4">first match is returned. A call to</text>
<text top="180" left="340" width="404" height="18" font="4">ain(x,table) returns a logical vector indicating which elements of</text>
<text top="197" left="148" width="596" height="18" font="4">x were (approximately) matched in table. Both amatch and ain have been designed to approach the</text>
<text top="217" left="149" width="138" height="13" font="4">behaviour of R’s native</text>
<text top="213" left="290" width="454" height="18" font="4">match and %in% functionality as much as possible. By default amatch and ain</text>
<text top="233" left="149" width="171" height="13" font="4">locate exact matches, just like</text>
<text top="230" left="323" width="421" height="18" font="4">match. This may be changed by increasing the maximum string distance</text>
<text top="250" left="149" width="361" height="13" font="4">between the search pattern and elements of the lookup table.</text>
<text top="273" left="149" width="281" height="18" font="4">&gt; amatch('fu', c('foo','bar'), maxDist=2)</text>
<text top="290" left="149" width="34" height="18" font="4">[1] 1</text>
<text top="306" left="149" width="261" height="18" font="4">&gt; ain('fu', c('foo','bar'), maxDist=2)</text>
<text top="322" left="149" width="55" height="18" font="4">[1] TRUE</text>
<text top="353" left="148" width="596" height="13" font="4">The default distance function is again the optimal string alignment distance, but this can be controlled</text>
<text top="369" left="149" width="89" height="13" font="4">by altering the</text>
<text top="366" left="242" width="502" height="18" font="4">method option. Here, the string ‘fu’ matches approximately with ‘foo’ since in the</text>
<text top="386" left="149" width="374" height="13" font="4">default metric the difference is two operations (replace one ‘</text>
<text top="382" left="523" width="221" height="18" font="4">u’ and add an ‘o’). By default, NA is</text>
<text top="402" left="149" width="82" height="13" font="4">matched with</text>
<text top="399" left="234" width="204" height="18" font="4">NA, as in R’s native match function.</text>
<text top="426" left="149" width="171" height="18" font="4">&gt; amatch(NA, c('foo',NA))</text>
<text top="442" left="149" width="34" height="18" font="4">[1] 2</text>
<text top="472" left="149" width="55" height="13" font="4">Unlike in</text>
<text top="469" left="207" width="344" height="18" font="4">match, this may be switched off by setting matchNA=FALSE.</text>
<text top="496" left="149" width="274" height="18" font="4">&gt; amatch(NA, c('foo',NA), matchNA=FALSE)</text>
<text top="512" left="149" width="41" height="18" font="4">[1] NA</text>
<text top="542" left="149" width="41" height="13" font="4">Like in</text>
<text top="539" left="193" width="421" height="18" font="4">match, the nomatch option controls the output when no match is found.</text>
<text top="566" left="149" width="350" height="18" font="4">&gt; amatch(NA, c('foo',NA), matchNA=FALSE, nomatch=0)</text>
<text top="582" left="149" width="34" height="18" font="4">[1] 0</text>
<text top="628" left="149" width="132" height="15" font="12"><b>Character encoding</b></text>
<text top="660" left="148" width="596" height="13" font="4">A character encoding system defines how each character in an alphabet is represented as a byte or</text>
<text top="676" left="149" width="595" height="13" font="4">sequence of bytes in computer memory. Over the past decades many encoding systems have been</text>
<text top="693" left="149" width="595" height="13" font="4">developed, and currently several encoding standards are widely in use. It is a rather unfortunate state</text>
<text top="709" left="149" width="595" height="13" font="4">of affairs that encoding standards have evolved to a point where it is impossible to determine the used</text>
<text top="725" left="149" width="567" height="13" font="4">encoding from a text file with certainty from its contents, although command-line utilities like ‘</text>
<text top="722" left="716" width="31" height="18" font="4">file’</text>
<text top="742" left="148" width="319" height="13" font="4">(under Unix-alikes) often do a good job at guessing it.</text>
<text top="763" left="171" width="573" height="13" font="4">By default, the character encoding used internally by R depends on the native encoding of the</text>
<text top="779" left="149" width="595" height="13" font="4">system on which it runs. This means that when one needs to read a text file that is stored in a different</text>
<text top="796" left="149" width="595" height="13" font="4">encoding (for example because it was produced on a different operating system), the file’s encoding</text>
<text top="812" left="149" width="270" height="13" font="4">has to be explicitly specified. For example, in</text>
<text top="809" left="423" width="322" height="18" font="4">read.table the input encoding can be specified using</text>
<text top="829" left="149" width="18" height="13" font="4">the</text>
<text top="825" left="170" width="574" height="18" font="4">fileEncoding argument. Upon reading the file, R will attempt to translate input from the specified</text>
<text top="845" left="149" width="481" height="13" font="4">encoding to the internal encoding native to the operating system it is running on.</text>
<text top="866" left="171" width="573" height="13" font="4">As a consequence, reading the same file into R will not always yield the same sequence of bytes</text>
<text top="882" left="149" width="595" height="13" font="4">internally on each system. Only when one is certain that the input consists solely of characters from</text>
<text top="899" left="149" width="598" height="13" font="4">the ASCII character set will the internal representation be guaranteed to be the same across systems.</text>
<text top="915" left="149" width="597" height="13" font="4">Most of R’s native functions hide the character representation effectively from the user. For example,</text>
<text top="928" left="149" width="595" height="18" font="4">nchar counts the number of actual characters, not the number of bytes used to represent it (although it</text>
<text top="948" left="149" width="307" height="13" font="4">has an option to count the number of bytes as well).</text>
<text top="969" left="171" width="573" height="13" font="4">Like R’s native functions, all functions of the <b>stringdist </b>package are designed to yield the same</text>
<text top="986" left="149" width="345" height="13" font="4">result regardless of the internal encoding used. Like in the</text>
<text top="982" left="497" width="247" height="18" font="4">adist function, this is done by converting</text>
<text top="1002" left="149" width="83" height="13" font="4">strings first to</text>
<text top="999" left="235" width="509" height="18" font="4">utf8, and then to an integer representation. The integer representation of strings are</text>
<text top="1018" left="148" width="596" height="13" font="4">passed to the underlying C-routines. At the moment, this double conversion is the only guaranteed</text>
<text top="1035" left="148" width="596" height="13" font="4">way to handle character strings independent of internal encoding. The main reason is that R depends</text>
<text top="1051" left="149" width="595" height="13" font="4">on external libraries for character re-encoding, and those libraries are different across operating</text>
<text top="1068" left="149" width="200" height="13" font="4">systems on which R is supported.</text>
<text top="1089" left="171" width="573" height="13" font="4">The re-encoding causes an overhead of up to a factor of three or four, when computing distances</text>
<text top="1105" left="149" width="595" height="13" font="4">between character strings consisting of 5-25 characters. The overhead is almost completely due to</text>
<text top="1121" left="149" width="595" height="13" font="4">the conversion to integer and its relative importance decreases with string length. If one is certain</text>
<text top="1138" left="149" width="595" height="13" font="4">that the input strings are restricted to the ASCII character set or when accuracy or cross-platform</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="4" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="13" size="8" family="Times" color="#000000"/>
	<fontspec id="14" size="11" family="Times" color="#000000"/>
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">114</text>
<text top="103" left="149" width="300" height="13" font="4">independence are of less importance, one can pass</text>
<text top="100" left="452" width="292" height="18" font="4">useBytes=TRUE to avoid re-encoding. In that case</text>
<text top="120" left="149" width="595" height="13" font="4">the distance between the underlying byte sequences are returned. This option mimics the option that</text>
<text top="136" left="149" width="316" height="13" font="4">is available in some of R’s native functions, including</text>
<text top="133" left="468" width="276" height="18" font="4">adist. Below is an example demonstrating the</text>
<text top="152" left="149" width="62" height="13" font="4">difference.</text>
<text top="176" left="149" width="261" height="18" font="4">&gt; stringdist('Motorhead', 'Motörhead')</text>
<text top="192" left="149" width="34" height="18" font="4">[1] 1</text>
<text top="209" left="149" width="432" height="18" font="4">&gt; stringdist('Motorhead', enc2utf8('Motörhead'), useBytes=TRUE)</text>
<text top="225" left="149" width="34" height="18" font="4">[1] 2</text>
<text top="256" left="149" width="595" height="13" font="4">Here, the default string distance algorithm is the optimal string alignment distance, which counts the</text>
<text top="272" left="149" width="502" height="13" font="4">number of insertions, deletions, substitutions and transpositions necessary to turn ‘</text>
<text top="269" left="651" width="93" height="18" font="4">Motörhead’ into</text>
<text top="288" left="147" width="4" height="13" font="4">‘</text>
<text top="285" left="151" width="593" height="18" font="4">Motorhead’. In the first case the letter ‘ö’ is recognized as a single character, so the distance corresponds</text>
<text top="305" left="149" width="595" height="13" font="4">to a single substitution. In the second case a byte-wise comparison is used while making sure that</text>
<text top="321" left="147" width="4" height="13" font="4">‘</text>
<text top="318" left="151" width="593" height="18" font="4">Motöread’ is stored in utf8 encoding. In this case, the utf8 ‘o’ is stored as a single byte and ‘ö’ as two</text>
<text top="338" left="149" width="527" height="13" font="4">bytes, and here the distance is determined by deleting one byte and substituting another.</text>
<text top="359" left="171" width="484" height="13" font="4">It should be mentioned that there are a number of characters that have multiple</text>
<text top="355" left="659" width="88" height="18" font="4">utf8 represen-</text>
<text top="375" left="149" width="381" height="13" font="4">tations (this is called ‘unicode equivalence’). For example, the ‘</text>
<text top="372" left="530" width="214" height="18" font="4">ö’ can be represented by a two-byte</text>
<text top="392" left="149" width="373" height="13" font="4">unicode character as in the above example or by a single-byte ‘</text>
<text top="388" left="522" width="222" height="18" font="4">o’, followed by a two-byte (otherwise</text>
<text top="408" left="149" width="554" height="13" font="4">invisible) modifying character that specifies the umlaut. If one compares the two versions of ‘</text>
<text top="405" left="703" width="41" height="18" font="4">ö’ with</text>
<text top="424" left="149" width="35" height="13" font="4">either</text>
<text top="421" left="187" width="557" height="18" font="4">stringdist or R’s native adist , the result will be nonzero regardless whether one compares</text>
<text top="441" left="149" width="595" height="13" font="4">byte-wise or not. The solution is to normalize unicode-encoded strings to either representation before</text>
<text top="457" left="149" width="595" height="13" font="4">any comparison is made. At the moment, no tools seem to be available from within R but open source</text>
<text top="474" left="149" width="139" height="13" font="4">commandline tools like</text>
<text top="470" left="291" width="42" height="18" font="4">uconv <a href="2014-1-loo.html#11">(</a></text>
<text top="474" left="333" width="145" height="13" font="6"><a href="2014-1-loo.html#11">Utterström and Arrouye</a></text>
<text top="474" left="478" width="155" height="13" font="4"><a href="2014-1-loo.html#11">) </a>can be used to normalize</text>
<text top="470" left="637" width="108" height="18" font="4">utf8-encoded text</text>
<text top="490" left="148" width="137" height="13" font="4">prior to reading into R.</text>
<text top="535" left="149" width="205" height="17" font="5"><b>String distance functions</b></text>
<text top="574" left="148" width="596" height="13" font="4">A string is a finite concatenation of symbols (characters) from a finite alphabet. We will follow the</text>
<text top="590" left="149" width="295" height="13" font="4">usual notation and denote a finite alphabet with</text>
<text top="587" left="448" width="296" height="17" font="4">Σ where the number of elements in Σ is denoted</text>
<text top="606" left="149" width="4" height="13" font="0">|</text>
<text top="604" left="153" width="9" height="17" font="4">Σ</text>
<text top="606" left="163" width="4" height="13" font="0">|</text>
<text top="607" left="167" width="183" height="13" font="4">. The q-fold Cartesian product</text>
<text top="604" left="353" width="9" height="17" font="4">Σ</text>
<text top="606" left="365" width="45" height="13" font="0">× · · · ×</text>
<text top="604" left="412" width="88" height="17" font="4">Σ is denoted Σ</text>
<text top="604" left="501" width="5" height="10" font="13">q</text>
<text top="607" left="506" width="238" height="13" font="4">, and the set of all finite strings that can</text>
<text top="623" left="149" width="193" height="13" font="4">be composed from characters in</text>
<text top="620" left="346" width="89" height="17" font="4">Σ is denoted Σ</text>
<text top="620" left="435" width="5" height="10" font="13">∗</text>
<text top="623" left="441" width="303" height="13" font="4">. The empty string, denoted <i>ε</i>, is also a member of</text>
<text top="640" left="149" width="595" height="13" font="4">this set. We will denote a general string with s, t, or u and the length of the string, measured as the</text>
<text top="656" left="149" width="158" height="13" font="4">number of characters, with</text>
<text top="655" left="310" width="4" height="13" font="0">|</text>
<text top="656" left="314" width="5" height="13" font="4">s</text>
<text top="655" left="320" width="4" height="13" font="0">|</text>
<text top="656" left="324" width="133" height="13" font="4">. For example: take for</text>
<text top="653" left="460" width="284" height="17" font="4">Σ the 26-member lower-case Latin alphabet, and</text>
<text top="672" left="149" width="5" height="13" font="4">s</text>
<text top="672" left="158" width="11" height="14" font="0">=</text>
<text top="672" left="173" width="4" height="13" font="4">‘</text>
<text top="669" left="177" width="84" height="18" font="4">foo’. We have</text>
<text top="672" left="265" width="4" height="13" font="0">|</text>
<text top="672" left="269" width="5" height="13" font="4">s</text>
<text top="672" left="274" width="19" height="14" font="0">| =</text>
<text top="672" left="297" width="19" height="13" font="4">3, s</text>
<text top="672" left="321" width="9" height="13" font="0">∈</text>
<text top="669" left="334" width="9" height="17" font="4">Σ</text>
<text top="670" left="344" width="5" height="10" font="13">3</text>
<text top="672" left="353" width="32" height="13" font="4">and s</text>
<text top="672" left="389" width="9" height="13" font="0">∈</text>
<text top="669" left="403" width="9" height="17" font="4">Σ</text>
<text top="669" left="412" width="5" height="10" font="13">∗</text>
<text top="672" left="419" width="326" height="13" font="4">. Individual characters of a string are indicated with a</text>
<text top="689" left="149" width="281" height="13" font="4">subscript so in the previous example we have s</text>
<text top="694" left="430" width="5" height="10" font="13">1</text>
<text top="688" left="440" width="11" height="14" font="0">=</text>
<text top="689" left="455" width="4" height="13" font="4">‘</text>
<text top="685" left="459" width="46" height="18" font="4">f’ and s</text>
<text top="694" left="505" width="5" height="10" font="13">2</text>
<text top="688" left="514" width="11" height="14" font="0">=</text>
<text top="689" left="529" width="5" height="13" font="4">s</text>
<text top="694" left="535" width="5" height="10" font="13">3</text>
<text top="688" left="545" width="11" height="14" font="0">=</text>
<text top="689" left="559" width="4" height="13" font="4">‘</text>
<text top="685" left="563" width="181" height="18" font="4">o’. A subsequence is indicated</text>
<text top="705" left="148" width="236" height="13" font="4">with subscript m : n, so in the example s</text>
<text top="710" left="384" width="13" height="10" font="13">1:2</text>
<text top="704" left="402" width="11" height="14" font="0">=</text>
<text top="705" left="417" width="4" height="13" font="4">‘</text>
<text top="702" left="421" width="220" height="18" font="4">fo’. We also use the convention that s</text>
<text top="709" left="641" width="17" height="11" font="13">m:n</text>
<text top="704" left="662" width="11" height="14" font="0">=</text>
<text top="708" left="677" width="5" height="10" font="14"><i>ε</i></text>
<text top="705" left="686" width="58" height="13" font="4">whenever</text>
<text top="722" left="149" width="7" height="13" font="4">n</text>
<text top="721" left="161" width="11" height="14" font="0">&lt;</text>
<text top="722" left="176" width="14" height="14" font="4">m.</text>
<text top="743" left="171" width="317" height="13" font="4">Formally, for a function d to be a distance function on</text>
<text top="740" left="492" width="9" height="17" font="4">Σ</text>
<text top="739" left="501" width="5" height="10" font="13">∗</text>
<text top="743" left="511" width="229" height="13" font="4">it has to obey the following properties.</text>
<text top="772" left="304" width="83" height="13" font="4">nonnegativity</text>
<text top="772" left="430" width="7" height="13" font="4">d</text>
<text top="771" left="437" width="5" height="14" font="0">(</text>
<text top="772" left="443" width="16" height="14" font="4">s, t</text>
<text top="771" left="459" width="20" height="14" font="0">) ≥</text>
<text top="772" left="483" width="7" height="13" font="4">0</text>
<text top="772" left="722" width="22" height="13" font="4">(1a)</text>
<text top="793" left="304" width="47" height="13" font="4">identity</text>
<text top="793" left="430" width="7" height="13" font="4">d</text>
<text top="792" left="437" width="5" height="14" font="0">(</text>
<text top="793" left="443" width="16" height="14" font="4">s, t</text>
<text top="792" left="459" width="20" height="14" font="0">) =</text>
<text top="793" left="483" width="82" height="13" font="4">0 only when s</text>
<text top="792" left="570" width="11" height="14" font="0">=</text>
<text top="793" left="585" width="4" height="13" font="4">t</text>
<text top="793" left="721" width="23" height="13" font="4">(1b)</text>
<text top="814" left="304" width="61" height="13" font="4">symmetry</text>
<text top="814" left="430" width="7" height="13" font="4">d</text>
<text top="813" left="437" width="5" height="14" font="0">(</text>
<text top="814" left="443" width="16" height="14" font="4">s, t</text>
<text top="813" left="459" width="20" height="14" font="0">) =</text>
<text top="814" left="484" width="7" height="13" font="4">d</text>
<text top="813" left="491" width="5" height="14" font="0">(</text>
<text top="814" left="496" width="16" height="14" font="4">t, s</text>
<text top="813" left="512" width="5" height="14" font="0">)</text>
<text top="814" left="722" width="22" height="13" font="4">(1c)</text>
<text top="835" left="304" width="110" height="13" font="4">triangle inequality</text>
<text top="835" left="430" width="7" height="13" font="4">d</text>
<text top="834" left="437" width="5" height="14" font="0">(</text>
<text top="835" left="443" width="19" height="14" font="4">s, u</text>
<text top="834" left="462" width="20" height="14" font="0">) ≤</text>
<text top="835" left="487" width="7" height="13" font="4">d</text>
<text top="834" left="494" width="5" height="14" font="0">(</text>
<text top="835" left="499" width="16" height="14" font="4">s, t</text>
<text top="834" left="515" width="19" height="14" font="0">) +</text>
<text top="835" left="538" width="7" height="13" font="4">d</text>
<text top="834" left="545" width="5" height="14" font="0">(</text>
<text top="835" left="550" width="18" height="14" font="4">t, u</text>
<text top="834" left="569" width="5" height="14" font="0">)</text>
<text top="835" left="574" width="3" height="13" font="4">,</text>
<text top="835" left="720" width="24" height="13" font="4">(1d)</text>
<text top="864" left="148" width="596" height="13" font="4">with s, t, and u strings. However, as will be pointed out below, many string metrics do not have</text>
<text top="880" left="149" width="596" height="13" font="4">all these properties. For example, distances based on q-grams do not necessarily obey the identity</text>
<text top="897" left="148" width="540" height="13" font="4">property and weighted versions of the Levenshtein distance are not necessarily symmetric.</text>
<text top="939" left="149" width="237" height="15" font="12"><b>Distances based on edit operations</b></text>
<text top="971" left="149" width="595" height="13" font="4">Distances based on edit operations count the number of basic operations necessary to turn one string</text>
<text top="987" left="149" width="595" height="13" font="4">into another. Edit-like distances can be categorized based on what operations are allowed. The</text>
<text top="1003" left="149" width="435" height="13" font="4">distances discussed below allow one or more of the following operations.</text>
<text top="1030" left="171" width="212" height="13" font="4">• Substitution of a character, as in ‘</text>
<text top="1027" left="382" width="24" height="18" font="4">foo’</text>
<text top="1029" left="411" width="14" height="13" font="0">→</text>
<text top="1030" left="429" width="4" height="13" font="4">‘</text>
<text top="1027" left="432" width="28" height="18" font="4">boo’.</text>
<text top="1053" left="171" width="190" height="13" font="4">• Deletion of a character, as in ‘</text>
<text top="1049" left="361" width="24" height="18" font="4">foo’</text>
<text top="1052" left="389" width="14" height="13" font="0">→</text>
<text top="1053" left="407" width="4" height="13" font="4">‘</text>
<text top="1049" left="410" width="21" height="18" font="4">oo’.</text>
<text top="1075" left="171" width="193" height="13" font="4">• Insertion of a character, as in ‘</text>
<text top="1072" left="363" width="24" height="18" font="4">foo’</text>
<text top="1074" left="391" width="14" height="13" font="0">→</text>
<text top="1075" left="409" width="4" height="13" font="4">‘</text>
<text top="1072" left="413" width="35" height="18" font="4">floo’.</text>
<text top="1098" left="171" width="296" height="13" font="4">• Transposition of two adjacent characters, as in ‘</text>
<text top="1094" left="467" width="24" height="18" font="4">foo’</text>
<text top="1097" left="495" width="14" height="13" font="0">→</text>
<text top="1098" left="513" width="4" height="13" font="4">‘</text>
<text top="1094" left="517" width="28" height="18" font="4">ofo’.</text>
<text top="1124" left="149" width="595" height="13" font="4">For distances allowing more than a single operation it may be meaningful to assign weights to the</text>
<text top="1141" left="149" width="596" height="13" font="4">different operations, for example to make a transposition contribute less to the distance than character</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="5" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="15" size="16" family="Times" color="#000000"/>
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">115</text>
<text top="103" left="149" width="595" height="13" font="4">substitution. Edit-based distances for which such weights can be defined are usually refered to as</text>
<text top="120" left="149" width="137" height="13" font="4">generalized distances <a href="2014-1-loo.html#10">(</a></text>
<text top="120" left="286" width="48" height="13" font="6"><a href="2014-1-loo.html#10">Boytsov</a></text>
<text top="120" left="334" width="3" height="13" font="4"><a href="2014-1-loo.html#10">,</a></text>
<text top="120" left="341" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2011</a></text>
<text top="120" left="368" width="8" height="13" font="4"><a href="2014-1-loo.html#10">).</a></text>
<text top="141" left="171" width="307" height="13" font="4">The simplest edit distance is the Hamming distance <a href="2014-1-loo.html#11">(</a></text>
<text top="141" left="478" width="60" height="13" font="6"><a href="2014-1-loo.html#11">Hamming</a></text>
<text top="141" left="538" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="141" left="544" width="26" height="13" font="6"><a href="2014-1-loo.html#11">1950</a></text>
<text top="141" left="571" width="174" height="13" font="4"><a href="2014-1-loo.html#11">), </a>which allows only character</text>
<text top="157" left="149" width="595" height="13" font="4">substitutions and is therefore only defined for strings of equal length. It is however common to define</text>
<text top="173" left="149" width="407" height="13" font="4">the Hamming distance to be infinite for strings of different length <a href="2014-1-loo.html#11">(</a></text>
<text top="173" left="556" width="51" height="13" font="6"><a href="2014-1-loo.html#11">Navarro</a></text>
<text top="173" left="607" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="173" left="614" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2001</a></text>
<text top="173" left="642" width="103" height="13" font="4"><a href="2014-1-loo.html#11">), </a>so formally we</text>
<text top="190" left="149" width="29" height="13" font="4">have</text>
<text top="217" left="267" width="7" height="13" font="4">d</text>
<text top="222" left="274" width="43" height="9" font="13">hamming</text>
<text top="216" left="317" width="5" height="14" font="0">(</text>
<text top="217" left="323" width="16" height="14" font="4">s, t</text>
<text top="216" left="339" width="20" height="14" font="0">) =</text>
<text top="203" left="367" width="11" height="11" font="13">|s|</text>
<text top="212" left="365" width="14" height="24" font="15">∑</text>
<text top="234" left="364" width="17" height="11" font="13">i=1</text>
<text top="216" left="383" width="4" height="14" font="0">[</text>
<text top="217" left="387" width="7" height="13" font="4">1</text>
<text top="216" left="397" width="11" height="13" font="0">−</text>
<text top="220" left="410" width="6" height="10" font="14"><i>δ</i></text>
<text top="216" left="417" width="5" height="14" font="0">(</text>
<text top="217" left="423" width="5" height="13" font="4">s</text>
<text top="222" left="428" width="3" height="10" font="13">i</text>
<text top="217" left="432" width="10" height="13" font="4">, t</text>
<text top="222" left="442" width="3" height="10" font="13">i</text>
<text top="216" left="447" width="10" height="14" font="0">)]</text>
<text top="217" left="462" width="8" height="13" font="4">if</text>
<text top="216" left="474" width="4" height="13" font="0">|</text>
<text top="217" left="478" width="5" height="13" font="4">s</text>
<text top="216" left="484" width="27" height="14" font="0">| = |</text>
<text top="217" left="511" width="4" height="13" font="4">t</text>
<text top="216" left="516" width="4" height="13" font="0">|</text>
<text top="217" left="523" width="23" height="13" font="4">and</text>
<text top="214" left="549" width="77" height="17" font="4">∞ otherwise.</text>
<text top="217" left="728" width="16" height="13" font="4">(2)</text>
<text top="251" left="149" width="42" height="13" font="4">Here, <i>δ</i></text>
<text top="250" left="191" width="5" height="14" font="0">(</text>
<text top="251" left="197" width="5" height="13" font="4">s</text>
<text top="256" left="202" width="3" height="10" font="13">i</text>
<text top="251" left="206" width="10" height="13" font="4">, t</text>
<text top="256" left="217" width="3" height="10" font="13">j</text>
<text top="250" left="221" width="20" height="14" font="0">) =</text>
<text top="251" left="245" width="27" height="13" font="4">1 if s</text>
<text top="256" left="273" width="3" height="10" font="13">i</text>
<text top="250" left="281" width="11" height="14" font="0">=</text>
<text top="251" left="296" width="4" height="13" font="4">t</text>
<text top="256" left="300" width="3" height="10" font="13">i</text>
<text top="251" left="308" width="437" height="13" font="4">and 0 otherwise. The Hamming distance obeys all the properties stated in</text>
<text top="268" left="149" width="27" height="13" font="4">Eq. <a href="2014-1-loo.html#4">(</a></text>
<text top="268" left="176" width="7" height="13" font="6"><a href="2014-1-loo.html#4">1</a></text>
<text top="268" left="183" width="345" height="13" font="4"><a href="2014-1-loo.html#4">)</a>. When s and t are of equal length, the maximum value is</text>
<text top="267" left="531" width="4" height="13" font="0">|</text>
<text top="268" left="536" width="5" height="13" font="4">s</text>
<text top="267" left="541" width="4" height="13" font="0">|</text>
<text top="268" left="545" width="199" height="13" font="4">. With the <b>stringdist </b>package, the</text>
<text top="284" left="149" width="285" height="13" font="4">Hamming distance can be computed as follows.</text>
<text top="306" left="149" width="357" height="18" font="4">&gt; stringdist(c('foo','fu'), 'bar', method='hamming')</text>
<text top="323" left="149" width="21" height="18" font="4">[1]</text>
<text top="323" left="190" width="34" height="18" font="4">3 Inf</text>
<text top="352" left="171" width="255" height="13" font="4">The Longest Common Substring distance d</text>
<text top="357" left="426" width="12" height="10" font="13">lcs</text>
<text top="352" left="442" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="352" left="447" width="146" height="13" font="6"><a href="2014-1-loo.html#11">Needleman and Wunsch</a></text>
<text top="352" left="592" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="352" left="599" width="27" height="13" font="6"><a href="2014-1-loo.html#11">1970</a></text>
<text top="352" left="626" width="119" height="13" font="4"><a href="2014-1-loo.html#11">) </a>counts the number</text>
<text top="368" left="149" width="595" height="13" font="4">of deletions and insertions necessary to transform one string into another. It can be recursively defined</text>
<text top="385" left="149" width="12" height="13" font="4">as</text>
<text top="416" left="252" width="7" height="13" font="4">d</text>
<text top="421" left="259" width="12" height="10" font="13">lcs</text>
<text top="415" left="272" width="5" height="14" font="0">(</text>
<text top="416" left="278" width="16" height="14" font="4">s, t</text>
<text top="415" left="294" width="20" height="14" font="0">) =</text>
<text top="397" left="318" width="12" height="6" font="4"></text>
<text top="409" left="318" width="12" height="6" font="4"></text>
<text top="433" left="318" width="12" height="6" font="4"></text>
<text top="398" left="338" width="27" height="13" font="4">0 if s</text>
<text top="397" left="369" width="11" height="14" font="0">=</text>
<text top="398" left="384" width="4" height="13" font="4">t</text>
<text top="397" left="393" width="11" height="14" font="0">=</text>
<text top="401" left="408" width="5" height="10" font="14"><i>ε</i></text>
<text top="398" left="413" width="3" height="13" font="4">,</text>
<text top="414" left="338" width="7" height="13" font="4">d</text>
<text top="419" left="345" width="12" height="10" font="13">lcs</text>
<text top="413" left="358" width="5" height="14" font="0">(</text>
<text top="414" left="364" width="5" height="13" font="4">s</text>
<text top="420" left="369" width="33" height="10" font="13">1:|s|−1</text>
<text top="414" left="403" width="10" height="13" font="4">, t</text>
<text top="420" left="413" width="32" height="10" font="13">1:|t|−1</text>
<text top="413" left="447" width="5" height="14" font="0">)</text>
<text top="414" left="456" width="17" height="13" font="4">if s</text>
<text top="419" left="473" width="11" height="11" font="13">|s|</text>
<text top="413" left="489" width="11" height="14" font="0">=</text>
<text top="414" left="503" width="4" height="13" font="4">t</text>
<text top="419" left="508" width="10" height="11" font="13">|t|</text>
<text top="414" left="519" width="3" height="13" font="4">,</text>
<text top="432" left="338" width="7" height="13" font="4">1</text>
<text top="431" left="347" width="11" height="14" font="0">+</text>
<text top="432" left="361" width="24" height="13" font="4">min</text>
<text top="431" left="385" width="7" height="13" font="0">{</text>
<text top="432" left="392" width="7" height="13" font="4">d</text>
<text top="437" left="399" width="12" height="9" font="13">lcs</text>
<text top="431" left="412" width="5" height="14" font="0">(</text>
<text top="432" left="418" width="5" height="13" font="4">s</text>
<text top="438" left="423" width="33" height="10" font="13">1:|s|−1</text>
<text top="432" left="457" width="10" height="13" font="4">, t</text>
<text top="431" left="467" width="5" height="14" font="0">)</text>
<text top="432" left="473" width="12" height="13" font="4">, d</text>
<text top="437" left="486" width="12" height="9" font="13">lcs</text>
<text top="431" left="498" width="5" height="14" font="0">(</text>
<text top="432" left="504" width="16" height="14" font="4">s, t</text>
<text top="438" left="520" width="32" height="10" font="13">1:|t|−1</text>
<text top="431" left="553" width="13" height="14" font="0">)}</text>
<text top="432" left="570" width="62" height="13" font="4">otherwise.</text>
<text top="416" left="728" width="16" height="13" font="4">(3)</text>
<text top="456" left="148" width="395" height="13" font="4">The longest common substring distance obeys all properties of Eq. <a href="2014-1-loo.html#4">(</a></text>
<text top="456" left="543" width="7" height="13" font="6"><a href="2014-1-loo.html#4">1</a></text>
<text top="456" left="550" width="147" height="13" font="4"><a href="2014-1-loo.html#4">)</a>. It varies between 0 and</text>
<text top="455" left="701" width="4" height="13" font="0">|</text>
<text top="456" left="705" width="5" height="13" font="4">s</text>
<text top="455" left="710" width="25" height="14" font="0">| + |</text>
<text top="456" left="735" width="4" height="13" font="4">t</text>
<text top="455" left="740" width="4" height="13" font="0">|</text>
<text top="473" left="148" width="596" height="13" font="4">where the maximum is achieved when s and t have no characters in common. With the <b>stringdist</b></text>
<text top="489" left="148" width="227" height="13" font="4">package it can be computed by setting</text>
<text top="486" left="379" width="86" height="18" font="4">method='lcs'.</text>
<text top="511" left="149" width="295" height="18" font="4">&gt; stringdist('leia', 'leela', method='lcs')</text>
<text top="528" left="149" width="34" height="18" font="4">[1] 3</text>
<text top="556" left="149" width="480" height="13" font="4">Here, the distance equals 3 since it takes two deletions and one insertion to turn ‘</text>
<text top="553" left="629" width="107" height="18" font="4">leela’ into ‘leia’:</text>
<text top="591" left="343" width="27" height="13" font="4">leela</text>
<text top="586" left="377" width="25" height="10" font="13">del. e</text>
<text top="590" left="374" width="33" height="13" font="0">−−−→</text>
<text top="591" left="411" width="21" height="13" font="4">lela</text>
<text top="586" left="439" width="23" height="10" font="13">del. l</text>
<text top="590" left="436" width="31" height="13" font="0">−−→</text>
<text top="591" left="471" width="17" height="13" font="4">lea</text>
<text top="586" left="495" width="22" height="10" font="13">ins. i</text>
<text top="590" left="492" width="30" height="13" font="0">−−→</text>
<text top="591" left="526" width="24" height="13" font="4">leia.</text>
<text top="620" left="148" width="597" height="13" font="4">The above example also shows that in general there is no uniqe shortest path between two strings:</text>
<text top="637" left="149" width="595" height="13" font="4">one could for example reverse the order of the first two deletions to obtain a second path with total</text>
<text top="653" left="148" width="55" height="13" font="4">weight 3.</text>
<text top="674" left="171" width="573" height="13" font="4">As suggested by its name, the lcs-distance has a second interpretation. With the longest common</text>
<text top="691" left="149" width="595" height="13" font="4">substring we mean the longest sequence formed by pairing characters from s and t while keeping</text>
<text top="707" left="149" width="595" height="13" font="4">their order intact. The lcs-distance is then the number of unpaired characters over both strings. In the</text>
<text top="723" left="149" width="287" height="13" font="4">above example this can be visualized as follows.</text>
<text top="760" left="255" width="62" height="18" font="4">l e e l a</text>
<text top="824" left="255" width="48" height="18" font="4">l e i a</text>
<text top="794" left="307" width="4" height="8" font="0"></text>
<text top="809" left="303" width="4" height="8" font="0"></text>
<text top="818" left="301" width="4" height="8" font="0"></text>
<text top="785" left="357" width="93" height="13" font="4">or, equivalently</text>
<text top="760" left="489" width="62" height="18" font="4">l e e l a</text>
<text top="824" left="489" width="48" height="18" font="4">l e i a</text>
<text top="794" left="515" width="4" height="8" font="0"></text>
<text top="809" left="511" width="4" height="8" font="0"></text>
<text top="818" left="509" width="4" height="8" font="0"></text>
<text top="794" left="541" width="4" height="8" font="0"></text>
<text top="809" left="537" width="4" height="8" font="0"></text>
<text top="818" left="534" width="4" height="8" font="0"></text>
<text top="857" left="149" width="173" height="13" font="4">In both cases, the characters ‘</text>
<text top="854" left="322" width="423" height="18" font="4">e’,‘l’ and ‘i’ remain unpaired, independent of whether we start pairing</text>
<text top="874" left="149" width="589" height="13" font="4">from the beginning (left case) or the end of the string (right case), yielding a distance value of three.</text>
<text top="895" left="171" width="246" height="13" font="4">The generalized Levenshtein distance d</text>
<text top="900" left="418" width="8" height="9" font="13">lv</text>
<text top="895" left="432" width="312" height="13" font="4">is computed by counting the weighted number of</text>
<text top="911" left="149" width="595" height="13" font="4">insertions, deletions and substitutions necessary to turn one string into another. Like the lcs distance it</text>
<text top="928" left="148" width="178" height="13" font="4">permits a recursive definition.</text>
<text top="1000" left="271" width="7" height="13" font="4">d</text>
<text top="1005" left="278" width="8" height="9" font="13">lv</text>
<text top="999" left="287" width="5" height="14" font="0">(</text>
<text top="1000" left="293" width="16" height="14" font="4">s, t</text>
<text top="999" left="309" width="20" height="14" font="0">) =</text>
<text top="958" left="333" width="12" height="6" font="4"></text>
<text top="970" left="333" width="12" height="6" font="4"></text>
<text top="974" left="333" width="12" height="6" font="4"></text>
<text top="978" left="333" width="12" height="6" font="4"></text>
<text top="982" left="333" width="12" height="6" font="4"></text>
<text top="986" left="333" width="12" height="6" font="4"></text>
<text top="990" left="333" width="12" height="6" font="4"></text>
<text top="994" left="333" width="12" height="6" font="4"></text>
<text top="1018" left="333" width="12" height="6" font="4"></text>
<text top="1022" left="333" width="12" height="6" font="4"></text>
<text top="1026" left="333" width="12" height="6" font="4"></text>
<text top="1030" left="333" width="12" height="6" font="4"></text>
<text top="1034" left="333" width="12" height="6" font="4"></text>
<text top="1038" left="333" width="12" height="6" font="4"></text>
<text top="1042" left="333" width="12" height="6" font="4"></text>
<text top="957" left="353" width="27" height="13" font="4">0 if s</text>
<text top="956" left="384" width="11" height="14" font="0">=</text>
<text top="957" left="399" width="4" height="13" font="4">t</text>
<text top="956" left="408" width="11" height="14" font="0">=</text>
<text top="960" left="423" width="5" height="10" font="14"><i>ε</i></text>
<text top="974" left="361" width="24" height="13" font="4">min</text>
<text top="973" left="384" width="7" height="13" font="0">{</text>
<text top="990" left="374" width="7" height="13" font="4">d</text>
<text top="995" left="381" width="8" height="9" font="13">lv</text>
<text top="989" left="390" width="5" height="14" font="0">(</text>
<text top="990" left="396" width="16" height="14" font="4">s, t</text>
<text top="996" left="411" width="32" height="10" font="13">1:|t|−1</text>
<text top="989" left="445" width="19" height="14" font="0">) +</text>
<text top="990" left="467" width="10" height="13" font="4">w</text>
<text top="995" left="477" width="5" height="10" font="13">1</text>
<text top="990" left="483" width="3" height="13" font="4">,</text>
<text top="1008" left="374" width="7" height="13" font="4">d</text>
<text top="1013" left="381" width="8" height="9" font="13">lv</text>
<text top="1007" left="390" width="5" height="14" font="0">(</text>
<text top="1008" left="396" width="5" height="13" font="4">s</text>
<text top="1013" left="401" width="33" height="10" font="13">1:|s|−1</text>
<text top="1008" left="435" width="10" height="13" font="4">, t</text>
<text top="1007" left="445" width="19" height="14" font="0">) +</text>
<text top="1008" left="468" width="10" height="13" font="4">w</text>
<text top="1012" left="477" width="5" height="10" font="13">2</text>
<text top="1008" left="483" width="3" height="13" font="4">,</text>
<text top="1025" left="374" width="7" height="13" font="4">d</text>
<text top="1031" left="381" width="8" height="9" font="13">lv</text>
<text top="1025" left="390" width="5" height="14" font="0">(</text>
<text top="1025" left="396" width="5" height="13" font="4">s</text>
<text top="1031" left="401" width="33" height="10" font="13">1:|s|−1</text>
<text top="1026" left="435" width="10" height="13" font="4">, t</text>
<text top="1031" left="445" width="32" height="10" font="13">1:|t|−1</text>
<text top="1025" left="478" width="26" height="14" font="0">) + [</text>
<text top="1026" left="505" width="7" height="13" font="4">1</text>
<text top="1025" left="514" width="11" height="13" font="0">−</text>
<text top="1029" left="528" width="6" height="10" font="14"><i>δ</i></text>
<text top="1025" left="535" width="5" height="14" font="0">(</text>
<text top="1025" left="540" width="5" height="13" font="4">s</text>
<text top="1031" left="546" width="11" height="11" font="13">|s|</text>
<text top="1026" left="557" width="10" height="13" font="4">, t</text>
<text top="1031" left="568" width="10" height="11" font="13">|t|</text>
<text top="1025" left="579" width="10" height="14" font="0">)]</text>
<text top="1025" left="589" width="10" height="13" font="4">w</text>
<text top="1030" left="599" width="5" height="10" font="13">3</text>
<text top="1042" left="361" width="7" height="13" font="0">}</text>
<text top="1043" left="371" width="62" height="13" font="4">otherwise.</text>
<text top="1000" left="728" width="16" height="13" font="4">(4)</text>
<text top="1072" left="149" width="48" height="13" font="4">Here, w</text>
<text top="1077" left="197" width="5" height="10" font="13">1</text>
<text top="1072" left="203" width="18" height="13" font="4">, w</text>
<text top="1077" left="221" width="5" height="10" font="13">2</text>
<text top="1072" left="231" width="38" height="13" font="4">and w</text>
<text top="1077" left="269" width="5" height="10" font="13">3</text>
<text top="1072" left="279" width="465" height="13" font="4">are the nonnegative penalties for deletion, insertion, and substitution when</text>
<text top="1089" left="149" width="556" height="13" font="4">turning t into s. The generalized Levenshtein distance is also implemented by R’s native</text>
<text top="1085" left="710" width="34" height="18" font="4">adist</text>
<text top="1105" left="149" width="369" height="13" font="4">function, and with our package it can be computed as follows.</text>
<text top="1127" left="149" width="288" height="18" font="4">&gt; stringdist('leela', 'leia', method='lv')</text>
<text top="1144" left="149" width="34" height="18" font="4">[1] 2</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="6" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">116</text>
<text top="103" left="148" width="596" height="13" font="4">The extra flexibility with respect to the lcs (and hamming) distance yields a smaller distance value</text>
<text top="120" left="149" width="360" height="13" font="4">since we need but a single deletion and a single substitution:</text>
<text top="154" left="362" width="27" height="13" font="4">leela</text>
<text top="149" left="396" width="25" height="10" font="13">del. e</text>
<text top="153" left="393" width="33" height="13" font="0">−−−→</text>
<text top="165" left="402" width="14" height="11" font="13">+1</text>
<text top="154" left="430" width="21" height="13" font="4">lela</text>
<text top="149" left="458" width="40" height="10" font="13">sub. l→i</text>
<text top="153" left="455" width="47" height="13" font="0">−−−−→</text>
<text top="165" left="471" width="14" height="11" font="13">+1</text>
<text top="154" left="507" width="24" height="13" font="4">leia,</text>
<text top="190" left="148" width="387" height="13" font="4">where we denote the penalty for each operation below the arrow.</text>
<text top="211" left="171" width="405" height="13" font="4">The generalized Levenshtein distance obeys the properties of Eq. <a href="2014-1-loo.html#4">(</a></text>
<text top="211" left="576" width="7" height="13" font="6"><a href="2014-1-loo.html#4">1</a></text>
<text top="211" left="583" width="99" height="13" font="4"><a href="2014-1-loo.html#4">) </a>except when w</text>
<text top="216" left="682" width="5" height="10" font="13">1</text>
<text top="210" left="693" width="11" height="14" font="0">6=</text>
<text top="211" left="709" width="10" height="13" font="4">w</text>
<text top="216" left="719" width="5" height="10" font="13">2</text>
<text top="211" left="725" width="19" height="13" font="4">, in</text>
<text top="227" left="148" width="596" height="13" font="4">which case the symmetry property is lost. However, it remains symmetric under simultaneous reversal</text>
<text top="244" left="149" width="99" height="13" font="4">of s and t and w</text>
<text top="249" left="247" width="5" height="10" font="13">1</text>
<text top="244" left="257" width="37" height="13" font="4">and w</text>
<text top="248" left="295" width="5" height="10" font="13">2</text>
<text top="244" left="305" width="440" height="13" font="4">since the number of deletions necessary going from t to s is equal to the</text>
<text top="260" left="149" width="555" height="13" font="4">number of insertions necessary going from s to t. This is illustrated by the following example.</text>
<text top="284" left="149" width="418" height="18" font="4">&gt; stringdist('leia', 'leela', method='lv', weight=c(1,0.1,1))</text>
<text top="300" left="149" width="34" height="18" font="4">[1] 2</text>
<text top="317" left="149" width="418" height="18" font="4">&gt; stringdist('leia', 'leela', method='lv', weight=c(0.1,1,1))</text>
<text top="333" left="149" width="48" height="18" font="4">[1] 1.1</text>
<text top="349" left="149" width="418" height="18" font="4">&gt; stringdist('leela', 'leia', method='lv', weight=c(1,0.1,1))</text>
<text top="366" left="149" width="48" height="18" font="4">[1] 1.1</text>
<text top="396" left="149" width="595" height="13" font="4">In the first line we get a distance of two since no insertions (of weight 0.1) are involved when going from</text>
<text top="413" left="147" width="4" height="13" font="4">‘</text>
<text top="409" left="151" width="594" height="18" font="4">leela’ to ‘leia’, as shown in our previous example. The second and third example may schematically</text>
<text top="429" left="149" width="154" height="13" font="4">be represented as follows.</text>
<text top="464" left="370" width="27" height="13" font="4">leela</text>
<text top="458" left="404" width="25" height="10" font="13">del. e</text>
<text top="463" left="401" width="33" height="13" font="0">−−−→</text>
<text top="475" left="406" width="22" height="11" font="13">+0.1</text>
<text top="464" left="438" width="21" height="13" font="4">lela</text>
<text top="458" left="466" width="25" height="10" font="13">sub. l</text>
<text top="463" left="463" width="33" height="13" font="0">−−−→</text>
<text top="475" left="472" width="14" height="11" font="13">+1</text>
<text top="464" left="500" width="21" height="13" font="4">leia</text>
<text top="498" left="370" width="21" height="13" font="4">leia</text>
<text top="493" left="397" width="25" height="10" font="13">sub. i</text>
<text top="497" left="394" width="33" height="13" font="0">−−−→</text>
<text top="509" left="403" width="14" height="11" font="13">+1</text>
<text top="498" left="432" width="21" height="13" font="4">lela</text>
<text top="493" left="459" width="24" height="10" font="13">ins. e</text>
<text top="497" left="456" width="32" height="13" font="0">−−−→</text>
<text top="509" left="461" width="22" height="11" font="13">+0.1</text>
<text top="498" left="493" width="31" height="13" font="4">leela.</text>
<text top="534" left="149" width="164" height="13" font="4">In other words, reversing w</text>
<text top="539" left="313" width="5" height="10" font="13">1</text>
<text top="534" left="322" width="36" height="13" font="4">and w</text>
<text top="539" left="358" width="5" height="10" font="13">2</text>
<text top="534" left="367" width="254" height="13" font="4">is the same as reversing arguments s and t.</text>
<text top="555" left="171" width="249" height="13" font="4">The optimal string alignment distance d</text>
<text top="559" left="420" width="15" height="9" font="13">osa</text>
<text top="555" left="441" width="304" height="13" font="4">is a straightforward extension of the Levenshtein</text>
<text top="571" left="149" width="361" height="13" font="4">distance that allows for transpositions of adjacent characters:</text>
<text top="653" left="232" width="7" height="13" font="4">d</text>
<text top="657" left="239" width="15" height="9" font="13">osa</text>
<text top="652" left="255" width="5" height="14" font="0">(</text>
<text top="653" left="261" width="16" height="14" font="4">s, t</text>
<text top="652" left="277" width="20" height="14" font="0">) =</text>
<text top="602" left="302" width="12" height="6" font="4"></text>
<text top="614" left="302" width="12" height="6" font="4"></text>
<text top="618" left="302" width="12" height="6" font="4"></text>
<text top="622" left="302" width="12" height="6" font="4"></text>
<text top="626" left="302" width="12" height="6" font="4"></text>
<text top="630" left="302" width="12" height="6" font="4"></text>
<text top="634" left="302" width="12" height="6" font="4"></text>
<text top="638" left="302" width="12" height="6" font="4"></text>
<text top="642" left="302" width="12" height="6" font="4"></text>
<text top="646" left="302" width="12" height="6" font="4"></text>
<text top="671" left="302" width="12" height="6" font="4"></text>
<text top="675" left="302" width="12" height="6" font="4"></text>
<text top="679" left="302" width="12" height="6" font="4"></text>
<text top="683" left="302" width="12" height="6" font="4"></text>
<text top="687" left="302" width="12" height="6" font="4"></text>
<text top="691" left="302" width="12" height="6" font="4"></text>
<text top="695" left="302" width="12" height="6" font="4"></text>
<text top="699" left="302" width="12" height="6" font="4"></text>
<text top="703" left="302" width="12" height="6" font="4"></text>
<text top="601" left="321" width="27" height="13" font="4">0 if s</text>
<text top="600" left="352" width="11" height="14" font="0">=</text>
<text top="601" left="367" width="4" height="13" font="4">t</text>
<text top="600" left="376" width="11" height="14" font="0">=</text>
<text top="604" left="391" width="5" height="10" font="14"><i>ε</i></text>
<text top="617" left="329" width="24" height="13" font="4">min</text>
<text top="616" left="352" width="7" height="13" font="0">{</text>
<text top="634" left="342" width="7" height="13" font="4">d</text>
<text top="638" left="349" width="15" height="9" font="13">osa</text>
<text top="633" left="365" width="5" height="14" font="0">(</text>
<text top="634" left="371" width="16" height="14" font="4">s, t</text>
<text top="639" left="387" width="32" height="10" font="13">1:|t|−1</text>
<text top="633" left="420" width="19" height="14" font="0">) +</text>
<text top="634" left="442" width="10" height="13" font="4">w</text>
<text top="639" left="452" width="5" height="10" font="13">1</text>
<text top="634" left="458" width="3" height="13" font="4">,</text>
<text top="651" left="342" width="7" height="13" font="4">d</text>
<text top="656" left="349" width="15" height="9" font="13">osa</text>
<text top="651" left="365" width="5" height="14" font="0">(</text>
<text top="651" left="371" width="5" height="13" font="4">s</text>
<text top="657" left="376" width="33" height="10" font="13">1:|s|−1</text>
<text top="652" left="410" width="10" height="13" font="4">, t</text>
<text top="651" left="421" width="19" height="14" font="0">) +</text>
<text top="651" left="443" width="10" height="13" font="4">w</text>
<text top="656" left="453" width="5" height="10" font="13">2</text>
<text top="652" left="459" width="3" height="13" font="4">,</text>
<text top="669" left="342" width="7" height="13" font="4">d</text>
<text top="674" left="349" width="15" height="9" font="13">osa</text>
<text top="668" left="365" width="5" height="14" font="0">(</text>
<text top="669" left="371" width="5" height="13" font="4">s</text>
<text top="675" left="376" width="33" height="10" font="13">1:|s|−1</text>
<text top="669" left="410" width="10" height="13" font="4">, t</text>
<text top="675" left="420" width="32" height="10" font="13">1:|t|−1</text>
<text top="668" left="454" width="26" height="14" font="0">) + [</text>
<text top="669" left="480" width="7" height="13" font="4">1</text>
<text top="668" left="490" width="11" height="13" font="0">−</text>
<text top="672" left="503" width="6" height="10" font="14"><i>δ</i></text>
<text top="668" left="510" width="5" height="14" font="0">(</text>
<text top="669" left="516" width="5" height="13" font="4">s</text>
<text top="674" left="521" width="11" height="11" font="13">|s|</text>
<text top="669" left="533" width="10" height="13" font="4">, t</text>
<text top="674" left="543" width="10" height="11" font="13">|t|</text>
<text top="668" left="554" width="10" height="14" font="0">)]</text>
<text top="669" left="564" width="10" height="13" font="4">w</text>
<text top="674" left="574" width="5" height="10" font="13">3</text>
<text top="669" left="580" width="3" height="13" font="4">,</text>
<text top="687" left="342" width="7" height="13" font="4">d</text>
<text top="691" left="349" width="15" height="9" font="13">osa</text>
<text top="686" left="365" width="5" height="14" font="0">(</text>
<text top="687" left="371" width="5" height="13" font="4">s</text>
<text top="693" left="376" width="33" height="10" font="13">1:|s|−2</text>
<text top="687" left="410" width="10" height="13" font="4">, t</text>
<text top="693" left="420" width="32" height="10" font="13">1:|t|−2</text>
<text top="686" left="454" width="19" height="14" font="0">) +</text>
<text top="687" left="476" width="10" height="13" font="4">w</text>
<text top="692" left="486" width="5" height="10" font="13">4</text>
<text top="687" left="495" width="17" height="13" font="4">if s</text>
<text top="692" left="513" width="11" height="11" font="13">|s|</text>
<text top="686" left="528" width="11" height="14" font="0">=</text>
<text top="687" left="543" width="4" height="13" font="4">t</text>
<text top="692" left="548" width="24" height="11" font="13">|t|−1</text>
<text top="687" left="573" width="11" height="13" font="4">, s</text>
<text top="692" left="584" width="25" height="11" font="13">|s|−1</text>
<text top="686" left="613" width="11" height="14" font="0">=</text>
<text top="687" left="628" width="4" height="13" font="4">t</text>
<text top="692" left="633" width="10" height="11" font="13">|t|</text>
<text top="704" left="329" width="7" height="13" font="0">}</text>
<text top="705" left="339" width="62" height="13" font="4">otherwise,</text>
<text top="653" left="728" width="16" height="13" font="4">(5)</text>
<text top="734" left="148" width="49" height="13" font="4">where w</text>
<text top="738" left="198" width="5" height="10" font="13">4</text>
<text top="734" left="207" width="227" height="13" font="4">is the penalty for a transposition and w</text>
<text top="738" left="434" width="5" height="10" font="13">1</text>
<text top="734" left="440" width="16" height="13" font="4">, w</text>
<text top="738" left="456" width="5" height="10" font="13">2</text>
<text top="734" left="466" width="35" height="13" font="4">and w</text>
<text top="738" left="501" width="5" height="10" font="13">3</text>
<text top="734" left="510" width="144" height="13" font="4">were defined under Eq. <a href="2014-1-loo.html#4">(</a></text>
<text top="734" left="655" width="7" height="13" font="6"><a href="2014-1-loo.html#4">4</a></text>
<text top="734" left="662" width="83" height="13" font="4"><a href="2014-1-loo.html#4">)</a>. The optimal</text>
<text top="750" left="149" width="359" height="13" font="4">string alignment distance is the default distance function for</text>
<text top="747" left="511" width="233" height="18" font="4">stringdist, stringdistmatrix, amatch</text>
<text top="766" left="149" width="23" height="13" font="4">and</text>
<text top="763" left="175" width="569" height="18" font="4">ain. Unlike the Hamming, lcs, and Levenshtein distances, the optimal string alignment distance</text>
<text top="783" left="149" width="595" height="13" font="4">does not obey the triangle inequality. This is demonstrated by the following example, taken from</text>
<text top="799" left="149" width="48" height="13" font="6"><a href="2014-1-loo.html#10">Boytsov</a></text>
<text top="799" left="200" width="4" height="13" font="4"><a href="2014-1-loo.html#10">(</a></text>
<text top="799" left="205" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2011</a></text>
<text top="799" left="232" width="8" height="13" font="4"><a href="2014-1-loo.html#10">).</a></text>
<text top="823" left="149" width="329" height="18" font="4">&gt; stringdist('ba','ab') + stringdist('ab','acb')</text>
<text top="839" left="149" width="34" height="18" font="4">[1] 2</text>
<text top="856" left="149" width="165" height="18" font="4">&gt; stringdist('ba','acb')</text>
<text top="872" left="149" width="34" height="18" font="4">[1] 3</text>
<text top="902" left="148" width="596" height="13" font="4">The reason is that the optimal string alignment distance edits each substring maximally once while</text>
<text top="919" left="149" width="448" height="13" font="4">recursing through the strings. The above distances should be interpreted as</text>
<text top="955" left="357" width="14" height="13" font="4">ba</text>
<text top="948" left="378" width="41" height="10" font="13">swap b,a</text>
<text top="954" left="375" width="49" height="13" font="0">−−−−−→</text>
<text top="966" left="392" width="14" height="11" font="13">+1</text>
<text top="955" left="428" width="14" height="13" font="4">ab</text>
<text top="954" left="444" width="11" height="14" font="0">+</text>
<text top="955" left="458" width="14" height="13" font="4">ab</text>
<text top="950" left="479" width="24" height="10" font="13">ins. c</text>
<text top="954" left="476" width="32" height="13" font="0">−−−→</text>
<text top="966" left="484" width="14" height="11" font="13">+1</text>
<text top="955" left="512" width="20" height="13" font="4">acb</text>
<text top="990" left="357" width="14" height="13" font="4">ba</text>
<text top="984" left="378" width="26" height="10" font="13">del. b</text>
<text top="989" left="375" width="34" height="13" font="0">−−−→</text>
<text top="1001" left="384" width="14" height="11" font="13">+1</text>
<text top="990" left="413" width="7" height="13" font="4">a</text>
<text top="984" left="426" width="24" height="10" font="13">ins. c</text>
<text top="989" left="423" width="32" height="13" font="0">−−−→</text>
<text top="1001" left="432" width="14" height="11" font="13">+1</text>
<text top="990" left="459" width="13" height="13" font="4">ac</text>
<text top="984" left="479" width="25" height="10" font="13">ins. b</text>
<text top="989" left="476" width="33" height="13" font="0">−−−→</text>
<text top="1001" left="484" width="14" height="11" font="13">+1</text>
<text top="990" left="513" width="23" height="13" font="4">acb.</text>
<text top="1026" left="149" width="364" height="13" font="4">In the last case, the shortcut that can be taken by swapping ‘</text>
<text top="1022" left="513" width="231" height="18" font="4">b’ and ‘a’ and then inserting ‘c’ would</text>
<text top="1042" left="149" width="595" height="13" font="4">force the same substring to be edited twice. Because of this restriction, the optimal string alignment</text>
<text top="1058" left="149" width="595" height="13" font="4">distance is also referred to as the restricted Damerau-Levenshtein distance although on the web, it</text>
<text top="1075" left="149" width="595" height="13" font="4">seems fairly often to be mistaken for the actual Damerau-Levenshtein distance. The latter distance</text>
<text top="1091" left="149" width="580" height="13" font="4">metric does allow for multiple edits on the same substring and is a real metric in the sense of Eq. <a href="2014-1-loo.html#4">(</a></text>
<text top="1091" left="729" width="7" height="13" font="6"><a href="2014-1-loo.html#4">1</a></text>
<text top="1091" left="735" width="8" height="13" font="4"><a href="2014-1-loo.html#4">).</a></text>
<text top="1112" left="171" width="486" height="13" font="4">A recursive definition for the full Damerau-Levenshtein distance was first given by</text>
<text top="1112" left="660" width="84" height="13" font="6"><a href="2014-1-loo.html#11">Lowrance and</a></text>
<text top="1129" left="148" width="45" height="13" font="6"><a href="2014-1-loo.html#11">Wagner</a></text>
<text top="1129" left="197" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="1129" left="201" width="26" height="13" font="6"><a href="2014-1-loo.html#11">1975</a></text>
<text top="1129" left="227" width="383" height="13" font="4"><a href="2014-1-loo.html#11">). </a>Their definition replaces the simple swap in the last line of Eq. <a href="2014-1-loo.html#6">(</a></text>
<text top="1129" left="611" width="7" height="13" font="6"><a href="2014-1-loo.html#6">5</a></text>
<text top="1129" left="617" width="127" height="13" font="4"><a href="2014-1-loo.html#6">) </a>with a minimization</text>
<text top="1145" left="149" width="595" height="13" font="4">over possible transpositions between the current character and all untreated characters, where the cost</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="7" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">117</text>
<text top="103" left="149" width="595" height="13" font="4">of a transposition increases with the distance between transposed characters. In the <b>stringdist </b>package</text>
<text top="120" left="149" width="595" height="13" font="4">a weighted version of the full Damerau-Levenshtein distance is implemented which is defined as</text>
<text top="136" left="149" width="47" height="13" font="4">follows.</text>
<text top="214" left="222" width="7" height="13" font="4">d</text>
<text top="219" left="229" width="8" height="9" font="13">dl</text>
<text top="213" left="238" width="5" height="14" font="0">(</text>
<text top="214" left="244" width="16" height="14" font="4">s, t</text>
<text top="213" left="260" width="20" height="14" font="0">) =</text>
<text top="160" left="284" width="12" height="6" font="4"></text>
<text top="172" left="284" width="12" height="6" font="4"></text>
<text top="176" left="284" width="12" height="6" font="4"></text>
<text top="180" left="284" width="12" height="6" font="4"></text>
<text top="184" left="284" width="12" height="6" font="4"></text>
<text top="188" left="284" width="12" height="6" font="4"></text>
<text top="192" left="284" width="12" height="6" font="4"></text>
<text top="196" left="284" width="12" height="6" font="4"></text>
<text top="200" left="284" width="12" height="6" font="4"></text>
<text top="204" left="284" width="12" height="6" font="4"></text>
<text top="208" left="284" width="12" height="6" font="4"></text>
<text top="232" left="284" width="12" height="6" font="4"></text>
<text top="236" left="284" width="12" height="6" font="4"></text>
<text top="240" left="284" width="12" height="6" font="4"></text>
<text top="244" left="284" width="12" height="6" font="4"></text>
<text top="248" left="284" width="12" height="6" font="4"></text>
<text top="252" left="284" width="12" height="6" font="4"></text>
<text top="256" left="284" width="12" height="6" font="4"></text>
<text top="260" left="284" width="12" height="6" font="4"></text>
<text top="264" left="284" width="12" height="6" font="4"></text>
<text top="269" left="284" width="12" height="6" font="4"></text>
<text top="162" left="304" width="27" height="13" font="4">0 if s</text>
<text top="161" left="335" width="11" height="14" font="0">=</text>
<text top="162" left="350" width="4" height="13" font="4">t</text>
<text top="161" left="359" width="11" height="14" font="0">=</text>
<text top="165" left="374" width="5" height="10" font="14"><i>ε</i></text>
<text top="179" left="312" width="24" height="13" font="4">min</text>
<text top="178" left="335" width="7" height="13" font="0">{</text>
<text top="195" left="325" width="7" height="13" font="4">d</text>
<text top="200" left="332" width="8" height="9" font="13">dl</text>
<text top="194" left="341" width="5" height="14" font="0">(</text>
<text top="195" left="347" width="16" height="14" font="4">s, t</text>
<text top="201" left="363" width="32" height="10" font="13">1:|t|−1</text>
<text top="194" left="396" width="19" height="14" font="0">) +</text>
<text top="195" left="418" width="10" height="13" font="4">w</text>
<text top="200" left="428" width="5" height="10" font="13">1</text>
<text top="195" left="434" width="3" height="13" font="4">,</text>
<text top="213" left="325" width="7" height="13" font="4">d</text>
<text top="218" left="332" width="8" height="9" font="13">dl</text>
<text top="212" left="341" width="5" height="14" font="0">(</text>
<text top="213" left="347" width="5" height="13" font="4">s</text>
<text top="219" left="353" width="33" height="10" font="13">1:|s|−1</text>
<text top="213" left="386" width="10" height="13" font="4">, t</text>
<text top="212" left="397" width="19" height="14" font="0">) +</text>
<text top="213" left="419" width="10" height="13" font="4">w</text>
<text top="218" left="429" width="5" height="10" font="13">2</text>
<text top="213" left="435" width="3" height="13" font="4">,</text>
<text top="231" left="325" width="7" height="13" font="4">d</text>
<text top="236" left="332" width="8" height="9" font="13">dl</text>
<text top="230" left="341" width="5" height="14" font="0">(</text>
<text top="231" left="347" width="5" height="13" font="4">s</text>
<text top="236" left="353" width="33" height="10" font="13">1:|s|−1</text>
<text top="231" left="386" width="10" height="13" font="4">, t</text>
<text top="236" left="397" width="32" height="10" font="13">1:|t|−1</text>
<text top="230" left="430" width="26" height="14" font="0">) + [</text>
<text top="231" left="456" width="7" height="13" font="4">1</text>
<text top="230" left="466" width="11" height="13" font="0">−</text>
<text top="234" left="480" width="6" height="10" font="14"><i>δ</i></text>
<text top="230" left="486" width="5" height="14" font="0">(</text>
<text top="231" left="492" width="5" height="13" font="4">s</text>
<text top="236" left="497" width="11" height="11" font="13">|s|</text>
<text top="231" left="509" width="10" height="13" font="4">, t</text>
<text top="236" left="519" width="10" height="11" font="13">|t|</text>
<text top="230" left="531" width="10" height="14" font="0">)]</text>
<text top="231" left="541" width="10" height="13" font="4">w</text>
<text top="235" left="550" width="5" height="10" font="13">3</text>
<text top="231" left="556" width="3" height="13" font="4">,</text>
<text top="248" left="325" width="24" height="13" font="4">min</text>
<text top="253" left="349" width="26" height="11" font="13">(i,j)∈</text>
<text top="252" left="375" width="8" height="14" font="13">Λ</text>
<text top="248" left="386" width="7" height="13" font="4">d</text>
<text top="253" left="393" width="8" height="9" font="13">dl</text>
<text top="247" left="402" width="5" height="14" font="0">(</text>
<text top="248" left="408" width="5" height="13" font="4">s</text>
<text top="253" left="413" width="25" height="10" font="13">1:i−1</text>
<text top="248" left="439" width="10" height="13" font="4">, t</text>
<text top="253" left="450" width="26" height="10" font="13">1:j−1</text>
<text top="247" left="476" width="36" height="14" font="0">) + [(|</text>
<text top="248" left="513" width="5" height="13" font="4">s</text>
<text top="247" left="518" width="18" height="13" font="0">| −</text>
<text top="248" left="539" width="4" height="13" font="4">i</text>
<text top="247" left="543" width="32" height="14" font="0">) + (|</text>
<text top="248" left="575" width="4" height="13" font="4">t</text>
<text top="247" left="580" width="18" height="13" font="0">| −</text>
<text top="248" left="601" width="4" height="13" font="4">j</text>
<text top="247" left="605" width="19" height="14" font="0">) −</text>
<text top="248" left="627" width="7" height="13" font="4">1</text>
<text top="247" left="634" width="4" height="14" font="0">]</text>
<text top="248" left="638" width="10" height="13" font="4">w</text>
<text top="253" left="648" width="5" height="10" font="13">4</text>
<text top="265" left="312" width="7" height="13" font="0">}</text>
<text top="266" left="322" width="62" height="13" font="4">otherwise,</text>
<text top="214" left="728" width="16" height="13" font="4">(6)</text>
<text top="295" left="148" width="272" height="13" font="4">where the minimization in the last line is over</text>
<text top="321" left="269" width="10" height="17" font="4">Λ</text>
<text top="324" left="284" width="11" height="14" font="0">=</text>
<text top="319" left="299" width="9" height="6" font="4">n</text>
<text top="324" left="308" width="5" height="14" font="0">(</text>
<text top="325" left="314" width="14" height="14" font="4">i, j</text>
<text top="324" left="328" width="30" height="14" font="0">) ∈ {</text>
<text top="325" left="358" width="34" height="13" font="4">1, . . . ,</text>
<text top="324" left="394" width="4" height="13" font="0">|</text>
<text top="325" left="398" width="5" height="13" font="4">s</text>
<text top="324" left="404" width="35" height="13" font="0">|} × {</text>
<text top="325" left="439" width="34" height="13" font="4">1, . . . ,</text>
<text top="324" left="475" width="4" height="13" font="0">|</text>
<text top="325" left="479" width="4" height="13" font="4">t</text>
<text top="324" left="484" width="11" height="13" font="0">|}</text>
<text top="325" left="502" width="15" height="13" font="4">: s</text>
<text top="330" left="517" width="11" height="11" font="13">|s|</text>
<text top="324" left="533" width="11" height="14" font="0">=</text>
<text top="325" left="548" width="4" height="13" font="4">t</text>
<text top="329" left="553" width="3" height="10" font="13">j</text>
<text top="325" left="557" width="14" height="13" font="4">, s</text>
<text top="329" left="571" width="3" height="10" font="13">i</text>
<text top="324" left="578" width="11" height="14" font="0">=</text>
<text top="325" left="593" width="4" height="13" font="4">t</text>
<text top="330" left="598" width="10" height="11" font="13">|t|</text>
<text top="319" left="609" width="9" height="6" font="4">o</text>
<text top="325" left="621" width="3" height="13" font="4">.</text>
<text top="357" left="149" width="23" height="13" font="4">If w</text>
<text top="362" left="172" width="5" height="10" font="13">1</text>
<text top="356" left="184" width="11" height="14" font="0">=</text>
<text top="357" left="201" width="10" height="13" font="4">w</text>
<text top="362" left="210" width="5" height="10" font="13">2</text>
<text top="356" left="222" width="11" height="14" font="0">=</text>
<text top="357" left="239" width="10" height="13" font="4">w</text>
<text top="362" left="249" width="5" height="10" font="13">3</text>
<text top="356" left="260" width="11" height="14" font="0">=</text>
<text top="357" left="277" width="10" height="13" font="4">w</text>
<text top="362" left="287" width="5" height="10" font="13">4</text>
<text top="356" left="298" width="11" height="14" font="0">=</text>
<text top="357" left="315" width="429" height="13" font="4">1 the original Damerau-Levenshtein distance is obtained. Although it</text>
<text top="374" left="149" width="381" height="13" font="4">is a trivial generalization of the original distance described by</text>
<text top="374" left="534" width="139" height="13" font="6"><a href="2014-1-loo.html#11">Lowrance and Wagner</a></text>
<text top="374" left="677" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="374" left="682" width="27" height="13" font="6"><a href="2014-1-loo.html#11">1975</a></text>
<text top="374" left="709" width="35" height="13" font="4"><a href="2014-1-loo.html#11">), </a>this</text>
<text top="390" left="149" width="570" height="13" font="4">implementation of a generalized Damerau-Levenshtein distance appears to be new in literature.</text>
<text top="411" left="171" width="573" height="13" font="4">For the <b>stringdist </b>package, the C code for this particular distance is based on a routine developed</text>
<text top="428" left="149" width="15" height="13" font="4">by</text>
<text top="428" left="168" width="38" height="13" font="6"><a href="2014-1-loo.html#11">Logan</a></text>
<text top="428" left="210" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="428" left="215" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2013</a></text>
<text top="428" left="242" width="502" height="13" font="4"><a href="2014-1-loo.html#11">). </a>The original code has been adapted to reduce the number of memory allocation</text>
<text top="444" left="149" width="595" height="13" font="4">calls and to include the weights. The Damerau-Levenshtein distance can be computed with the</text>
<text top="457" left="149" width="134" height="18" font="4">method='dl' directive.</text>
<text top="484" left="149" width="261" height="18" font="4">&gt; stringdist('ba', 'acb', method='dl')</text>
<text top="500" left="149" width="34" height="18" font="4">[1] 2</text>
<text top="531" left="149" width="321" height="13" font="4">Here, the distance equals two, indicating that the path</text>
<text top="567" left="372" width="14" height="13" font="4">ba</text>
<text top="560" left="394" width="41" height="10" font="13">swap b,a</text>
<text top="566" left="391" width="49" height="13" font="0">−−−−−→</text>
<text top="567" left="443" width="14" height="13" font="4">ab</text>
<text top="561" left="464" width="24" height="10" font="13">ins. c</text>
<text top="566" left="461" width="32" height="13" font="0">−−−→</text>
<text top="567" left="497" width="23" height="13" font="4">acb,</text>
<text top="596" left="149" width="362" height="13" font="4">is indeed included in the minimization defining the distance.</text>
<text top="617" left="171" width="575" height="13" font="4">The maximum distance between two strings s and t, as measured by either the Levenshtein,</text>
<text top="634" left="149" width="395" height="13" font="4">optimal string alignment, or Damerau-Levenshtein distance is max</text>
<text top="633" left="544" width="11" height="13" font="0">{|</text>
<text top="634" left="556" width="5" height="13" font="4">s</text>
<text top="633" left="561" width="4" height="13" font="0">|</text>
<text top="634" left="566" width="3" height="13" font="4">,</text>
<text top="633" left="571" width="4" height="13" font="0">|</text>
<text top="634" left="576" width="4" height="13" font="4">t</text>
<text top="633" left="580" width="11" height="13" font="0">|}</text>
<text top="634" left="592" width="153" height="13" font="4">. However, as the number</text>
<text top="650" left="149" width="597" height="13" font="4">of possible edit operations increases, the possible number of paths between two strings increases,</text>
<text top="666" left="149" width="595" height="13" font="4">allowing for possibly smaller distances between strings. Therefore, relations between the distance</text>
<text top="683" left="149" width="342" height="13" font="4">measures described above can be summarized as follows.</text>
<text top="706" left="259" width="11" height="17" font="4">∞</text>
<text top="708" left="275" width="19" height="13" font="0">≥ |</text>
<text top="709" left="294" width="5" height="13" font="4">s</text>
<text top="708" left="300" width="19" height="13" font="0">| ≥</text>
<text top="709" left="323" width="7" height="13" font="4">d</text>
<text top="714" left="330" width="43" height="9" font="13">hamming</text>
<text top="708" left="373" width="5" height="14" font="0">(</text>
<text top="709" left="379" width="16" height="14" font="4">s, t</text>
<text top="708" left="395" width="5" height="14" font="0">)</text>
<text top="724" left="291" width="4" height="13" font="0">|</text>
<text top="725" left="295" width="5" height="13" font="4">s</text>
<text top="724" left="301" width="25" height="14" font="0">| + |</text>
<text top="725" left="326" width="4" height="13" font="4">t</text>
<text top="724" left="331" width="19" height="13" font="0">| ≥</text>
<text top="725" left="354" width="7" height="13" font="4">d</text>
<text top="730" left="361" width="12" height="9" font="13">lcs</text>
<text top="724" left="373" width="5" height="14" font="0">(</text>
<text top="725" left="379" width="16" height="14" font="4">s, t</text>
<text top="724" left="395" width="5" height="14" font="0">)</text>
<text top="742" left="328" width="26" height="13" font="4">max</text>
<text top="741" left="353" width="11" height="13" font="0">{|</text>
<text top="742" left="365" width="5" height="13" font="4">s</text>
<text top="741" left="370" width="4" height="13" font="0">|</text>
<text top="742" left="375" width="3" height="13" font="4">,</text>
<text top="741" left="380" width="4" height="13" font="0">|</text>
<text top="742" left="385" width="4" height="13" font="4">t</text>
<text top="741" left="389" width="11" height="13" font="0">|}</text>
<text top="707" left="408" width="12" height="6" font="4"></text>
<text top="719" left="408" width="12" height="6" font="4"></text>
<text top="743" left="408" width="12" height="6" font="4"></text>
<text top="725" left="424" width="11" height="13" font="0">≥</text>
<text top="725" left="439" width="7" height="13" font="4">d</text>
<text top="730" left="446" width="8" height="9" font="13">lv</text>
<text top="725" left="455" width="5" height="14" font="0">(</text>
<text top="725" left="461" width="16" height="14" font="4">s, t</text>
<text top="725" left="477" width="20" height="14" font="0">) ≥</text>
<text top="725" left="501" width="7" height="13" font="4">d</text>
<text top="730" left="508" width="15" height="9" font="13">osa</text>
<text top="725" left="524" width="5" height="14" font="0">(</text>
<text top="725" left="530" width="16" height="14" font="4">s, t</text>
<text top="725" left="546" width="20" height="14" font="0">) ≥</text>
<text top="725" left="571" width="7" height="13" font="4">d</text>
<text top="730" left="577" width="8" height="9" font="13">dl</text>
<text top="725" left="587" width="5" height="14" font="0">(</text>
<text top="725" left="592" width="16" height="14" font="4">s, t</text>
<text top="725" left="608" width="20" height="14" font="0">) ≥</text>
<text top="725" left="633" width="10" height="13" font="4">0.</text>
<text top="725" left="728" width="16" height="13" font="4">(7)</text>
<text top="771" left="149" width="595" height="13" font="4">Since the Hamming and lcs distance have no basic edits in common, there is no order relation between</text>
<text top="787" left="149" width="171" height="13" font="4">their values. The upper limit</text>
<text top="786" left="323" width="4" height="13" font="0">|</text>
<text top="787" left="327" width="5" height="13" font="4">s</text>
<text top="786" left="333" width="4" height="13" font="0">|</text>
<text top="787" left="340" width="257" height="13" font="4">on the Hamming distance only holds when</text>
<text top="786" left="601" width="4" height="13" font="0">|</text>
<text top="787" left="605" width="5" height="13" font="4">s</text>
<text top="786" left="610" width="27" height="14" font="0">| = |</text>
<text top="787" left="638" width="4" height="13" font="4">t</text>
<text top="786" left="642" width="4" height="13" font="0">|</text>
<text top="787" left="646" width="3" height="13" font="4">.</text>
<text top="808" left="171" width="575" height="13" font="4">All edit-based distances except the Hamming distance have been implemented using the well-</text>
<text top="824" left="149" width="330" height="13" font="4">known dynamic programming technique that runs in</text>
<text top="824" left="484" width="22" height="14" font="0">O(|</text>
<text top="824" left="506" width="5" height="13" font="4">s</text>
<text top="824" left="511" width="8" height="13" font="0">||</text>
<text top="824" left="520" width="4" height="13" font="4">t</text>
<text top="824" left="524" width="10" height="14" font="0">|)</text>
<text top="824" left="539" width="207" height="13" font="4">time. For the Hamming distance,</text>
<text top="841" left="149" width="267" height="13" font="4">both the time and memory consumption are</text>
<text top="840" left="419" width="22" height="14" font="0">O(|</text>
<text top="841" left="441" width="5" height="13" font="4">s</text>
<text top="840" left="446" width="10" height="14" font="0">|)</text>
<text top="841" left="456" width="288" height="13" font="4">. For the other edit-based distances the memory</text>
<text top="857" left="149" width="92" height="13" font="4">consumption is</text>
<text top="856" left="244" width="22" height="14" font="0">O(|</text>
<text top="857" left="266" width="5" height="13" font="4">s</text>
<text top="856" left="272" width="8" height="13" font="0">||</text>
<text top="857" left="280" width="4" height="13" font="4">t</text>
<text top="856" left="285" width="10" height="14" font="0">|)</text>
<text top="857" left="295" width="449" height="13" font="4">, where for the Damerau-Levenshtein some extra memory is used (growing</text>
<text top="874" left="148" width="545" height="13" font="4">with the number of unique characters in s and t). Finally, we refer the reader to the papers of</text>
<text top="874" left="697" width="48" height="13" font="6"><a href="2014-1-loo.html#10">Boytsov</a></text>
<text top="890" left="148" width="5" height="13" font="4"><a href="2014-1-loo.html#10">(</a></text>
<text top="890" left="153" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2011</a></text>
<text top="890" left="180" width="31" height="13" font="4"><a href="2014-1-loo.html#10">) </a>and</text>
<text top="890" left="215" width="51" height="13" font="6"><a href="2014-1-loo.html#11">Navarro</a></text>
<text top="890" left="269" width="5" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="890" left="273" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2001</a></text>
<text top="890" left="300" width="444" height="13" font="4"><a href="2014-1-loo.html#11">) </a>for a thorough review of edit-based distances in text search or dictionary</text>
<text top="907" left="149" width="168" height="13" font="4">lookup settings respectively.</text>
<text top="949" left="149" width="189" height="15" font="12"><b>Distances based on </b>q<b>-grams</b></text>
<text top="981" left="148" width="596" height="13" font="4">A q-gram is a string consisting of q consecutive characters. The q-grams associated with a string s are</text>
<text top="997" left="149" width="596" height="13" font="4">obtained by sliding a window of q characters wide over s and registering the occurring q-grams. For</text>
<text top="1013" left="149" width="238" height="13" font="4">example, the digrams associated with ‘</text>
<text top="1010" left="386" width="358" height="18" font="4">foo’ are ‘fo’ and ‘oo’. Obviously, this procedure fails when</text>
<text top="1030" left="149" width="6" height="13" font="4">q</text>
<text top="1029" left="160" width="19" height="14" font="0">&gt; |</text>
<text top="1030" left="179" width="5" height="13" font="4">s</text>
<text top="1029" left="185" width="4" height="13" font="0">|</text>
<text top="1030" left="193" width="23" height="13" font="4">or q</text>
<text top="1029" left="220" width="11" height="14" font="0">=</text>
<text top="1030" left="235" width="430" height="13" font="4">0. For this reason we define the following edge cases for all distances d</text>
<text top="1029" left="666" width="5" height="14" font="0">(</text>
<text top="1030" left="672" width="28" height="14" font="4">s, t; q</text>
<text top="1029" left="700" width="5" height="14" font="0">)</text>
<text top="1030" left="709" width="35" height="13" font="4">of the</text>
<text top="1046" left="149" width="59" height="13" font="3"><b>stringdist</b></text>
<text top="1046" left="211" width="338" height="13" font="4">package that are based on comparing q-gram occurrence:</text>
<text top="1075" left="337" width="7" height="13" font="4">d</text>
<text top="1075" left="344" width="5" height="14" font="0">(</text>
<text top="1075" left="350" width="28" height="14" font="4">s, t; q</text>
<text top="1075" left="378" width="20" height="14" font="0">) =</text>
<text top="1072" left="403" width="64" height="17" font="4">∞, when q</text>
<text top="1075" left="470" width="11" height="14" font="0">&gt;</text>
<text top="1075" left="485" width="24" height="13" font="4">min</text>
<text top="1075" left="509" width="11" height="13" font="0">{|</text>
<text top="1075" left="521" width="5" height="13" font="4">s</text>
<text top="1075" left="526" width="4" height="13" font="0">|</text>
<text top="1075" left="530" width="3" height="13" font="4">,</text>
<text top="1075" left="536" width="4" height="13" font="0">|</text>
<text top="1075" left="540" width="4" height="13" font="4">t</text>
<text top="1075" left="545" width="11" height="13" font="0">|}</text>
<text top="1075" left="722" width="22" height="13" font="4">(8a)</text>
<text top="1096" left="337" width="7" height="13" font="4">d</text>
<text top="1095" left="344" width="5" height="14" font="0">(</text>
<text top="1096" left="350" width="28" height="14" font="4">s, t; 0</text>
<text top="1095" left="378" width="20" height="14" font="0">) =</text>
<text top="1093" left="403" width="54" height="17" font="4">∞, when</text>
<text top="1095" left="460" width="4" height="13" font="0">|</text>
<text top="1096" left="464" width="5" height="13" font="4">s</text>
<text top="1095" left="470" width="25" height="14" font="0">| + |</text>
<text top="1096" left="495" width="4" height="13" font="4">t</text>
<text top="1095" left="500" width="19" height="14" font="0">| &gt;</text>
<text top="1096" left="522" width="7" height="13" font="4">0</text>
<text top="1096" left="721" width="23" height="13" font="4">(8b)</text>
<text top="1117" left="337" width="7" height="13" font="4">d</text>
<text top="1116" left="344" width="5" height="14" font="0">(</text>
<text top="1120" left="349" width="5" height="10" font="14"><i>ε</i></text>
<text top="1117" left="355" width="23" height="13" font="4">, <i>ε</i>; 0</text>
<text top="1116" left="378" width="20" height="14" font="0">) =</text>
<text top="1117" left="403" width="10" height="13" font="4">0.</text>
<text top="1117" left="722" width="22" height="13" font="4">(8c)</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="8" position="absolute" top="0" left="0" height="1262" width="892">
	<fontspec id="16" size="5" family="Times" color="#000000"/>
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">118</text>
<text top="103" left="148" width="596" height="13" font="4">A simple distance metric between two strings is obtained by listing unique q-grams in two strings and</text>
<text top="120" left="149" width="380" height="13" font="4">compare which ones they have in common. Indeed, if we write</text>
<text top="119" left="532" width="17" height="14" font="0">Q(</text>
<text top="119" left="550" width="17" height="14" font="4">s; q</text>
<text top="119" left="568" width="5" height="14" font="0">)</text>
<text top="120" left="577" width="167" height="13" font="4">to indicate the unique set of</text>
<text top="136" left="149" width="334" height="14" font="4">q-grams occurring in s, the Jaccard distance is written as</text>
<text top="174" left="330" width="7" height="13" font="4">d</text>
<text top="179" left="337" width="33" height="9" font="13">jaccard</text>
<text top="173" left="370" width="5" height="14" font="0">(</text>
<text top="174" left="376" width="28" height="14" font="4">s, t; q</text>
<text top="173" left="404" width="20" height="14" font="0">) =</text>
<text top="174" left="429" width="7" height="13" font="4">1</text>
<text top="173" left="438" width="11" height="13" font="0">−</text>
<text top="164" left="454" width="21" height="14" font="0">|Q(</text>
<text top="164" left="475" width="17" height="14" font="4">s; q</text>
<text top="164" left="493" width="38" height="14" font="0">) ∩ Q(</text>
<text top="164" left="531" width="17" height="14" font="4">t; q</text>
<text top="164" left="548" width="10" height="14" font="0">)|</text>
<text top="182" left="454" width="21" height="14" font="0">|Q(</text>
<text top="183" left="475" width="17" height="14" font="4">s; q</text>
<text top="182" left="493" width="38" height="14" font="0">) ∪ Q(</text>
<text top="183" left="531" width="17" height="14" font="4">t; q</text>
<text top="182" left="548" width="10" height="14" font="0">)|</text>
<text top="174" left="560" width="3" height="13" font="4">,</text>
<text top="174" left="728" width="16" height="13" font="4">(9)</text>
<text top="211" left="148" width="145" height="13" font="4">where the vertical bars (</text>
<text top="210" left="293" width="18" height="13" font="0">| · |</text>
<text top="211" left="311" width="433" height="13" font="4">) indicate set cardinality. The Jaccard distance varies from 0 to 1 where 0</text>
<text top="228" left="149" width="205" height="13" font="4">corresponds to full overlap, i.e. Q</text>
<text top="227" left="354" width="5" height="14" font="0">(</text>
<text top="228" left="360" width="17" height="14" font="4">s; q</text>
<text top="227" left="377" width="20" height="14" font="0">) =</text>
<text top="228" left="402" width="10" height="13" font="4">Q</text>
<text top="227" left="413" width="5" height="14" font="0">(</text>
<text top="228" left="419" width="17" height="14" font="4">t; q</text>
<text top="227" left="436" width="5" height="14" font="0">)</text>
<text top="228" left="441" width="165" height="13" font="4">, and 1 to no overlap, i.e. Q</text>
<text top="227" left="607" width="5" height="14" font="0">(</text>
<text top="228" left="613" width="17" height="14" font="4">s, q</text>
<text top="227" left="630" width="18" height="14" font="0">) ∩</text>
<text top="228" left="651" width="10" height="13" font="4">Q</text>
<text top="227" left="662" width="5" height="14" font="0">(</text>
<text top="228" left="668" width="17" height="14" font="4">t, q</text>
<text top="227" left="685" width="35" height="15" font="0">) = ∅</text>
<text top="228" left="720" width="24" height="13" font="4">. As</text>
<text top="244" left="149" width="598" height="13" font="4">an example, consider result of the following Jaccard distance calculation with the <b>stringdist </b>package.</text>
<text top="266" left="149" width="357" height="18" font="4">&gt; stringdist('leia', 'leela', method='jaccard', q=2)</text>
<text top="283" left="149" width="89" height="18" font="4">[1] 0.8333333</text>
<text top="312" left="149" width="143" height="13" font="4">It is easily checked that</text>
<text top="311" left="296" width="17" height="14" font="0">Q(</text>
<text top="312" left="313" width="4" height="13" font="4">‘</text>
<text top="308" left="317" width="44" height="18" font="4">leia’; 2</text>
<text top="311" left="361" width="34" height="14" font="0">) = {</text>
<text top="312" left="395" width="4" height="13" font="4">‘</text>
<text top="308" left="398" width="71" height="18" font="4">le’, ‘ei’, ‘ia’</text>
<text top="311" left="470" width="7" height="13" font="0">}</text>
<text top="312" left="481" width="23" height="13" font="4">and</text>
<text top="311" left="508" width="17" height="14" font="0">Q(</text>
<text top="312" left="526" width="4" height="13" font="4">‘</text>
<text top="308" left="529" width="51" height="18" font="4">leela’; 2</text>
<text top="311" left="580" width="34" height="14" font="0">) = {</text>
<text top="312" left="614" width="4" height="13" font="4">‘</text>
<text top="308" left="618" width="98" height="18" font="4">le’, ‘ee’, ‘el’, ‘la’</text>
<text top="311" left="716" width="7" height="13" font="0">}</text>
<text top="312" left="723" width="21" height="13" font="4">, so</text>
<text top="328" left="149" width="174" height="13" font="4">the distance is computed as 1</text>
<text top="327" left="325" width="11" height="13" font="0">−</text>
<text top="325" left="341" width="5" height="10" font="13">1</text>
<text top="335" left="341" width="5" height="10" font="13">6</text>
<text top="327" left="352" width="11" height="13" font="0">≈</text>
<text top="328" left="367" width="27" height="13" font="4">0.83.</text>
<text top="349" left="171" width="573" height="13" font="4">The q-gram distance is obtained by tabulating the q-grams occurring in the two strings and</text>
<text top="365" left="149" width="595" height="13" font="4">counting the number of q-grams that are not shared between the two. This may formally be denoted</text>
<text top="382" left="149" width="63" height="13" font="4">as follows.</text>
<text top="409" left="270" width="7" height="13" font="4">d</text>
<text top="413" left="277" width="29" height="9" font="13">qgram</text>
<text top="408" left="307" width="5" height="14" font="0">(</text>
<text top="409" left="313" width="28" height="14" font="4">s, t; q</text>
<text top="408" left="341" width="31" height="14" font="0">) = k</text>
<text top="409" left="373" width="7" height="13" font="3"><b>v</b></text>
<text top="408" left="381" width="5" height="14" font="0">(</text>
<text top="409" left="386" width="17" height="14" font="4">s; q</text>
<text top="408" left="404" width="19" height="14" font="0">) −</text>
<text top="409" left="426" width="7" height="13" font="3"><b>v</b></text>
<text top="408" left="434" width="5" height="14" font="0">(</text>
<text top="409" left="440" width="17" height="14" font="4">t; q</text>
<text top="408" left="457" width="13" height="14" font="0">)k</text>
<text top="415" left="470" width="5" height="10" font="13">1</text>
<text top="408" left="480" width="11" height="14" font="0">=</text>
<text top="395" left="495" width="3" height="10" font="13">|</text>
<text top="393" left="498" width="10" height="14" font="13">Σ|</text>
<text top="393" left="508" width="3" height="7" font="16">q</text>
<text top="404" left="496" width="14" height="24" font="15">∑</text>
<text top="426" left="495" width="17" height="11" font="13">i=1</text>
<text top="408" left="515" width="4" height="13" font="0">|</text>
<text top="409" left="519" width="7" height="13" font="4">v</text>
<text top="414" left="526" width="3" height="10" font="13">i</text>
<text top="408" left="530" width="5" height="14" font="0">(</text>
<text top="409" left="536" width="17" height="14" font="4">s; q</text>
<text top="408" left="554" width="19" height="14" font="0">) −</text>
<text top="409" left="576" width="7" height="13" font="4">v</text>
<text top="414" left="583" width="3" height="10" font="13">i</text>
<text top="408" left="587" width="5" height="14" font="0">(</text>
<text top="409" left="593" width="17" height="14" font="4">t; q</text>
<text top="408" left="610" width="10" height="14" font="0">)|</text>
<text top="409" left="620" width="3" height="13" font="4">.</text>
<text top="409" left="722" width="22" height="13" font="4">(10)</text>
<text top="443" left="149" width="43" height="13" font="4">Here, <b>v</b></text>
<text top="442" left="192" width="5" height="14" font="0">(</text>
<text top="443" left="198" width="17" height="14" font="4">s; q</text>
<text top="442" left="215" width="5" height="14" font="0">)</text>
<text top="443" left="224" width="257" height="13" font="4">is a nonnegative integer vector of dimension</text>
<text top="442" left="484" width="4" height="13" font="0">|</text>
<text top="440" left="488" width="9" height="17" font="4">Σ</text>
<text top="442" left="498" width="4" height="13" font="0">|</text>
<text top="440" left="502" width="5" height="10" font="13">q</text>
<text top="443" left="511" width="234" height="13" font="4">whose coefficients represent the number</text>
<text top="460" left="149" width="290" height="13" font="4">of occurrences of every possible q-gram in s. Eq. <a href="2014-1-loo.html#8">(</a></text>
<text top="460" left="439" width="13" height="13" font="6"><a href="2014-1-loo.html#8">10</a></text>
<text top="460" left="453" width="291" height="13" font="4"><a href="2014-1-loo.html#8">) </a>defines the q-gram distance between two strings</text>
<text top="476" left="149" width="89" height="14" font="4">s and t as the L</text>
<text top="481" left="238" width="5" height="10" font="13">1</text>
<text top="476" left="247" width="114" height="13" font="4">distance between <b>v</b></text>
<text top="475" left="362" width="5" height="14" font="0">(</text>
<text top="476" left="367" width="17" height="14" font="4">s; q</text>
<text top="475" left="385" width="5" height="14" font="0">)</text>
<text top="476" left="394" width="34" height="13" font="4">and <b>v</b></text>
<text top="475" left="428" width="5" height="14" font="0">(</text>
<text top="476" left="434" width="17" height="14" font="4">t; q</text>
<text top="475" left="451" width="5" height="14" font="0">)</text>
<text top="476" left="457" width="287" height="13" font="4">. Observe that one only needs to store and count</text>
<text top="493" left="149" width="343" height="13" font="4">the actually occurring q-grams to evaluate the above sum.</text>
<text top="514" left="171" width="425" height="13" font="4">With the <b>stringdist </b>package, q-gram distances are computed as follows.</text>
<text top="536" left="149" width="343" height="18" font="4">&gt; stringdist('leia', 'leela', method='qgram', q=1)</text>
<text top="552" left="149" width="34" height="18" font="4">[1] 3</text>
<text top="568" left="149" width="343" height="18" font="4">&gt; stringdist('leia', 'leela', method='qgram', q=2)</text>
<text top="585" left="149" width="34" height="18" font="4">[1] 5</text>
<text top="601" left="149" width="343" height="18" font="4">&gt; stringdist('leia', 'leela', method='qgram', q=5)</text>
<text top="618" left="149" width="48" height="18" font="4">[1] Inf</text>
<text top="647" left="148" width="178" height="13" font="4">The 1-gram distance between ‘</text>
<text top="643" left="326" width="419" height="18" font="4">leia’ and ‘leela’ equals 3: counting the 1-grams (individual characters)</text>
<text top="663" left="149" width="197" height="13" font="4">of the two strings shows that the ‘</text>
<text top="660" left="346" width="398" height="18" font="4">i’, of ‘leia’ and the second ‘e’ and ‘l’ of ‘leela’ are unmatched. The</text>
<text top="680" left="149" width="312" height="13" font="4">reader may verify that the 2-gram distance between ‘</text>
<text top="676" left="461" width="285" height="18" font="4">leia’ and ‘leela’ equals 5. In the third example,</text>
<text top="693" left="149" width="552" height="18" font="4">stringdist returns Inf since the since one of the compared strings has less than 5 characters.</text>
<text top="717" left="171" width="338" height="13" font="4">The maximum number of different q-grams in a string s is</text>
<text top="716" left="513" width="4" height="13" font="0">|</text>
<text top="717" left="517" width="5" height="13" font="4">s</text>
<text top="716" left="522" width="18" height="13" font="0">| −</text>
<text top="717" left="543" width="6" height="13" font="4">q</text>
<text top="716" left="552" width="11" height="13" font="0">−</text>
<text top="717" left="566" width="66" height="13" font="4">1, therefore</text>
<text top="716" left="635" width="4" height="13" font="0">|</text>
<text top="717" left="639" width="5" height="13" font="4">s</text>
<text top="716" left="645" width="25" height="14" font="0">| + |</text>
<text top="717" left="670" width="4" height="13" font="4">t</text>
<text top="716" left="675" width="18" height="13" font="0">| −</text>
<text top="717" left="695" width="13" height="13" font="4">2q</text>
<text top="716" left="711" width="11" height="13" font="0">−</text>
<text top="717" left="725" width="19" height="13" font="4">2 is</text>
<text top="733" left="149" width="595" height="13" font="4">an upper bound on the q-gram distance, occurring when s and t have no q-grams in common. See</text>
<text top="750" left="149" width="48" height="13" font="6"><a href="2014-1-loo.html#10">Boytsov</a></text>
<text top="750" left="200" width="4" height="13" font="4"><a href="2014-1-loo.html#10">(</a></text>
<text top="750" left="205" width="27" height="13" font="6"><a href="2014-1-loo.html#10">2011</a></text>
<text top="750" left="232" width="236" height="13" font="4"><a href="2014-1-loo.html#10">) </a>and references therein for bounds on d</text>
<text top="754" left="468" width="29" height="9" font="13">qgram</text>
<text top="750" left="502" width="191" height="13" font="4">in terms of edit-based distances.</text>
<text top="771" left="171" width="573" height="13" font="4">Now that we have defined the q-gram distance in terms of vectors, any distance function on</text>
<text top="787" left="148" width="596" height="13" font="4">(integer) vector spaces can in principle be applied. The <b>stringdist </b>package also includes the cosine</text>
<text top="804" left="149" width="171" height="13" font="4">distance, which is defined as</text>
<text top="839" left="334" width="7" height="13" font="4">d</text>
<text top="844" left="341" width="15" height="9" font="13">cos</text>
<text top="839" left="356" width="5" height="14" font="0">(</text>
<text top="839" left="362" width="28" height="14" font="4">s, t; q</text>
<text top="839" left="390" width="20" height="14" font="0">) =</text>
<text top="840" left="414" width="7" height="13" font="4">1</text>
<text top="839" left="424" width="11" height="13" font="0">−</text>
<text top="830" left="456" width="7" height="13" font="3"><b>v</b></text>
<text top="830" left="463" width="5" height="14" font="0">(</text>
<text top="830" left="469" width="17" height="14" font="4">s; q</text>
<text top="830" left="487" width="12" height="14" font="0">) ·</text>
<text top="830" left="502" width="7" height="13" font="3"><b>v</b></text>
<text top="830" left="510" width="5" height="14" font="0">(</text>
<text top="830" left="516" width="17" height="14" font="4">t; q</text>
<text top="830" left="533" width="5" height="14" font="0">)</text>
<text top="848" left="440" width="7" height="13" font="0">k</text>
<text top="849" left="447" width="7" height="13" font="3"><b>v</b></text>
<text top="848" left="455" width="5" height="14" font="0">(</text>
<text top="849" left="461" width="17" height="14" font="4">s; q</text>
<text top="848" left="478" width="13" height="14" font="0">)k</text>
<text top="855" left="491" width="5" height="10" font="13">2</text>
<text top="848" left="497" width="7" height="13" font="0">k</text>
<text top="849" left="505" width="7" height="13" font="3"><b>v</b></text>
<text top="848" left="513" width="5" height="14" font="0">(</text>
<text top="849" left="518" width="17" height="14" font="4">t; q</text>
<text top="848" left="535" width="13" height="14" font="0">)k</text>
<text top="855" left="548" width="5" height="10" font="13">2</text>
<text top="840" left="556" width="3" height="13" font="4">,</text>
<text top="840" left="722" width="22" height="13" font="4">(11)</text>
<text top="878" left="148" width="38" height="13" font="4">where</text>
<text top="877" left="190" width="24" height="13" font="0">k · k</text>
<text top="882" left="214" width="5" height="10" font="13">2</text>
<text top="878" left="223" width="460" height="13" font="4">indicates the standard Euclidean norm. The cosine distance equals 0 when s</text>
<text top="877" left="688" width="11" height="14" font="0">=</text>
<text top="878" left="703" width="42" height="14" font="4">t and 1</text>
<text top="894" left="148" width="596" height="13" font="4">when s and t have no q-grams in common. It should be interpreted as a measure of the angle between</text>
<text top="911" left="149" width="7" height="13" font="3"><b>v</b></text>
<text top="910" left="157" width="5" height="14" font="0">(</text>
<text top="911" left="163" width="17" height="14" font="4">s; q</text>
<text top="910" left="180" width="5" height="14" font="0">)</text>
<text top="911" left="189" width="34" height="13" font="4">and <b>v</b></text>
<text top="910" left="223" width="5" height="14" font="0">(</text>
<text top="911" left="229" width="17" height="14" font="4">t; q</text>
<text top="910" left="246" width="5" height="14" font="0">)</text>
<text top="911" left="255" width="172" height="13" font="4">since the second term in Eq. <a href="2014-1-loo.html#8">(</a></text>
<text top="911" left="427" width="13" height="13" font="6"><a href="2014-1-loo.html#8">11</a></text>
<text top="911" left="440" width="304" height="13" font="4"><a href="2014-1-loo.html#8">) </a>represents the cosine of the angle between the two</text>
<text top="927" left="148" width="231" height="13" font="4">vectors. It can be computed as follows.</text>
<text top="949" left="149" width="350" height="18" font="4">&gt; stringdist('leia', 'leela', method='cosine', q=1)</text>
<text top="966" left="149" width="89" height="18" font="4">[1] 0.1666667</text>
<text top="994" left="149" width="99" height="13" font="4">Indeed, defining</text>
<text top="991" left="251" width="9" height="17" font="4">Σ</text>
<text top="994" left="264" width="22" height="14" font="0">= {</text>
<text top="994" left="286" width="4" height="13" font="4">‘</text>
<text top="991" left="290" width="70" height="18" font="4">a’, ‘e’, ‘i’, ‘l’</text>
<text top="994" left="360" width="7" height="13" font="0">}</text>
<text top="994" left="368" width="67" height="13" font="4">, we have <b>v</b></text>
<text top="994" left="435" width="5" height="14" font="0">(</text>
<text top="994" left="441" width="4" height="13" font="4">‘</text>
<text top="991" left="445" width="44" height="18" font="4">leia’; 1</text>
<text top="994" left="488" width="30" height="14" font="0">) = (</text>
<text top="994" left="519" width="44" height="13" font="4">1, 1, 1, 1</text>
<text top="994" left="563" width="5" height="14" font="0">)</text>
<text top="994" left="572" width="34" height="13" font="4">and <b>v</b></text>
<text top="994" left="606" width="5" height="14" font="0">(</text>
<text top="994" left="611" width="4" height="13" font="4">‘</text>
<text top="991" left="615" width="50" height="18" font="4">leela’; 1</text>
<text top="994" left="666" width="30" height="14" font="0">) = (</text>
<text top="994" left="696" width="44" height="13" font="4">1, 2, 0, 2</text>
<text top="994" left="740" width="5" height="14" font="0">)</text>
<text top="1011" left="149" width="126" height="13" font="4">giving a distance of 1</text>
<text top="1010" left="278" width="11" height="13" font="0">−</text>
<text top="1008" left="297" width="5" height="10" font="13">5</text>
<text top="1018" left="293" width="14" height="10" font="13">2·3</text>
<text top="1010" left="313" width="11" height="13" font="0">≈</text>
<text top="1011" left="327" width="27" height="13" font="4">0.17.</text>
<text top="1032" left="171" width="573" height="13" font="4">The three q-gram based distances mentioned above are nonnegative and symmetric. The Jaccard</text>
<text top="1048" left="149" width="596" height="13" font="4">and q-gram distance can be written as a distance on a vector space and obey the triangle inequality</text>
<text top="1065" left="149" width="595" height="13" font="4">as well. The cosine distance does not satisfy the triangle inequality. None of the q-gram based</text>
<text top="1081" left="149" width="332" height="13" font="4">distances satisfy the identity condition because both Q</text>
<text top="1080" left="481" width="5" height="14" font="0">(</text>
<text top="1081" left="487" width="17" height="14" font="4">s; q</text>
<text top="1080" left="505" width="5" height="14" font="0">)</text>
<text top="1081" left="514" width="35" height="13" font="4">and <b>v</b></text>
<text top="1080" left="549" width="5" height="14" font="0">(</text>
<text top="1081" left="555" width="17" height="14" font="4">s; q</text>
<text top="1080" left="573" width="5" height="14" font="0">)</text>
<text top="1081" left="582" width="164" height="13" font="4">are many-to-one functions.</text>
<text top="1098" left="148" width="176" height="13" font="4">As an example observe that Q</text>
<text top="1097" left="325" width="5" height="14" font="0">(</text>
<text top="1098" left="330" width="4" height="13" font="4">‘</text>
<text top="1094" left="334" width="30" height="18" font="4">ab’; 1</text>
<text top="1097" left="364" width="20" height="14" font="0">) =</text>
<text top="1098" left="388" width="10" height="13" font="4">Q</text>
<text top="1097" left="399" width="5" height="14" font="0">(</text>
<text top="1098" left="405" width="4" height="13" font="4">‘</text>
<text top="1094" left="409" width="30" height="18" font="4">ba’; 1</text>
<text top="1097" left="438" width="5" height="14" font="0">)</text>
<text top="1098" left="447" width="33" height="13" font="4">and <b>v</b></text>
<text top="1097" left="481" width="5" height="14" font="0">(</text>
<text top="1098" left="487" width="4" height="13" font="4">‘</text>
<text top="1094" left="490" width="30" height="18" font="4">ab’; 1</text>
<text top="1097" left="520" width="20" height="14" font="0">) =</text>
<text top="1097" left="545" width="7" height="13" font="3"><b>v</b></text>
<text top="1097" left="553" width="5" height="14" font="0">(</text>
<text top="1098" left="558" width="4" height="13" font="4">‘</text>
<text top="1094" left="562" width="30" height="18" font="4">ba’; 1</text>
<text top="1097" left="592" width="5" height="14" font="0">)</text>
<text top="1098" left="601" width="23" height="13" font="4">so d</text>
<text top="1103" left="624" width="33" height="9" font="13">jaccard</text>
<text top="1097" left="658" width="5" height="14" font="0">(</text>
<text top="1098" left="663" width="4" height="13" font="4">‘</text>
<text top="1094" left="667" width="56" height="18" font="4">ab’, ‘ba’; 1</text>
<text top="1097" left="724" width="20" height="14" font="0">) =</text>
<text top="1114" left="149" width="7" height="13" font="4">d</text>
<text top="1118" left="156" width="29" height="9" font="13">qgram</text>
<text top="1113" left="186" width="5" height="14" font="0">(</text>
<text top="1114" left="192" width="4" height="13" font="4">‘</text>
<text top="1111" left="195" width="57" height="18" font="4">ab’, ‘ba’; 1</text>
<text top="1113" left="252" width="20" height="14" font="0">) =</text>
<text top="1114" left="277" width="7" height="13" font="4">d</text>
<text top="1118" left="284" width="15" height="9" font="13">cos</text>
<text top="1113" left="299" width="5" height="14" font="0">(</text>
<text top="1114" left="305" width="4" height="13" font="4">‘</text>
<text top="1111" left="309" width="57" height="18" font="4">ab’, ‘ba’; 1</text>
<text top="1113" left="366" width="20" height="14" font="0">) =</text>
<text top="1114" left="390" width="354" height="13" font="4">0. In other words, a q-gram based distance of zero does not</text>
<text top="1130" left="149" width="96" height="13" font="4">guarantee that s</text>
<text top="1130" left="249" width="11" height="14" font="0">=</text>
<text top="1130" left="264" width="373" height="14" font="4">t. For a more general account of invariance properties of the <b>v</b></text>
<text top="1130" left="637" width="5" height="14" font="0">(</text>
<text top="1130" left="643" width="17" height="14" font="4">s; q</text>
<text top="1130" left="661" width="5" height="14" font="0">)</text>
<text top="1130" left="670" width="74" height="13" font="4">the reader is</text>
<text top="1147" left="149" width="63" height="13" font="4">referred to</text>
<text top="1147" left="215" width="55" height="13" font="6"><a href="2014-1-loo.html#11">Ukkonen</a></text>
<text top="1147" left="273" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="1147" left="277" width="27" height="13" font="6"><a href="2014-1-loo.html#11">1992</a></text>
<text top="1147" left="304" width="8" height="13" font="4"><a href="2014-1-loo.html#11">).</a></text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="9" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">119</text>
<text top="103" left="171" width="573" height="13" font="4">To allow the user to define their own q-gram based metrics, the package includes the function</text>
<text top="116" left="149" width="595" height="18" font="4">qgrams. This function takes an arbitrary number of (named) character vectors as input, and returns</text>
<text top="136" left="149" width="489" height="13" font="4">an array of labeled q-gram counts. Here’s an example with three character vectors.</text>
<text top="158" left="149" width="62" height="18" font="4">&gt; qgrams(</text>
<text top="175" left="149" width="7" height="18" font="4">+</text>
<text top="175" left="176" width="171" height="18" font="4">x = c('foo','bar','bar'),</text>
<text top="191" left="149" width="7" height="18" font="4">+</text>
<text top="191" left="176" width="123" height="18" font="4">y = c('fu','bar'),</text>
<text top="208" left="149" width="7" height="18" font="4">+</text>
<text top="208" left="176" width="110" height="18" font="4">z = c('foobar'),</text>
<text top="224" left="149" width="7" height="18" font="4">+</text>
<text top="224" left="176" width="48" height="18" font="4">q = 2 )</text>
<text top="240" left="163" width="117" height="18" font="4">fo oo fu ob ba ar</text>
<text top="257" left="149" width="130" height="18" font="4">x 1 1 0 0 2 2</text>
<text top="273" left="149" width="130" height="18" font="4">y 0 0 1 0 1 1</text>
<text top="290" left="149" width="130" height="18" font="4">z 1 1 0 1 1 1</text>
<text top="319" left="171" width="573" height="13" font="4">At the moment, q-gram counting is implemented by storing only the encountered q-grams, rather</text>
<text top="335" left="149" width="116" height="13" font="4">than representing <b>v</b></text>
<text top="334" left="265" width="5" height="14" font="0">(</text>
<text top="335" left="271" width="17" height="14" font="4">s; q</text>
<text top="334" left="288" width="5" height="14" font="0">)</text>
<text top="335" left="297" width="215" height="13" font="4">completely. This avoids the need for</text>
<text top="334" left="516" width="22" height="14" font="0">O(|</text>
<text top="332" left="538" width="9" height="17" font="4">Σ</text>
<text top="334" left="547" width="4" height="13" font="0">|</text>
<text top="332" left="551" width="5" height="10" font="13">q</text>
<text top="334" left="557" width="5" height="14" font="0">)</text>
<text top="335" left="566" width="178" height="13" font="4">storage. Encountered q-grams</text>
<text top="352" left="149" width="269" height="13" font="4">are stored in a binary tree structure yielding</text>
<text top="351" left="422" width="22" height="14" font="0">O(|</text>
<text top="352" left="444" width="10" height="13" font="4">Q</text>
<text top="351" left="454" width="5" height="14" font="0">(</text>
<text top="352" left="460" width="17" height="14" font="4">s; q</text>
<text top="351" left="478" width="15" height="14" font="0">)|)</text>
<text top="352" left="497" width="78" height="13" font="4">memory and</text>
<text top="351" left="580" width="26" height="14" font="0">O[(|</text>
<text top="352" left="606" width="5" height="13" font="4">s</text>
<text top="351" left="611" width="18" height="13" font="0">| −</text>
<text top="352" left="632" width="6" height="13" font="4">q</text>
<text top="351" left="642" width="11" height="13" font="0">−</text>
<text top="352" left="655" width="7" height="13" font="4">1</text>
<text top="351" left="662" width="5" height="14" font="0">)</text>
<text top="352" left="670" width="19" height="13" font="4">log</text>
<text top="351" left="691" width="4" height="13" font="0">|</text>
<text top="352" left="696" width="10" height="13" font="4">Q</text>
<text top="351" left="707" width="5" height="14" font="0">(</text>
<text top="352" left="712" width="17" height="14" font="4">s; q</text>
<text top="351" left="730" width="14" height="14" font="0">)|]</text>
<text top="368" left="149" width="112" height="13" font="4">time consumption.</text>
<text top="410" left="149" width="191" height="15" font="12"><b>Heuristic distance measures</b></text>
<text top="441" left="148" width="596" height="13" font="4">The Jaro distance was originally developed at the U.S. Bureau of the Census for the purpose of linking</text>
<text top="458" left="149" width="569" height="13" font="4">records based on inaccurate text fields. Its first public description appeared in a user manual <a href="2014-1-loo.html#11">(</a></text>
<text top="458" left="718" width="24" height="13" font="6"><a href="2014-1-loo.html#11">Jaro</a></text>
<text top="458" left="742" width="3" height="13" font="4"><a href="2014-1-loo.html#11">,</a></text>
<text top="474" left="148" width="27" height="13" font="6"><a href="2014-1-loo.html#11">1978</a></text>
<text top="474" left="176" width="569" height="13" font="4"><a href="2014-1-loo.html#11">) </a>which might explain why it is not very wide-spread in computer science literature. It has</text>
<text top="491" left="149" width="597" height="13" font="4">however been successfully applied to statistical matching problems concerning fairly short strings;</text>
<text top="507" left="149" width="242" height="13" font="4">typically name and address data [see e.g.</text>
<text top="507" left="394" width="24" height="13" font="6"><a href="2014-1-loo.html#11">Jaro</a></text>
<text top="507" left="421" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="507" left="425" width="27" height="13" font="6"><a href="2014-1-loo.html#11">1989</a></text>
<text top="507" left="452" width="12" height="13" font="4"><a href="2014-1-loo.html#11">)].</a></text>
<text top="528" left="171" width="573" height="13" font="4">The reasoning behind the Jaro distance is that character mismatches and transpositions are caused</text>
<text top="545" left="149" width="598" height="13" font="4">by typing-errors but matches between remote characters are unlikely to be caused by a typing error.</text>
<text top="561" left="149" width="596" height="13" font="4">It therefore measures the number of matching characters between two strings that are not too many</text>
<text top="577" left="148" width="551" height="13" font="4">positions apart and adds a penalty for matching characters that are transposed. It is given by</text>
<text top="627" left="269" width="7" height="13" font="4">d</text>
<text top="632" left="276" width="17" height="9" font="13">jaro</text>
<text top="626" left="294" width="5" height="14" font="0">(</text>
<text top="627" left="300" width="16" height="14" font="4">s, t</text>
<text top="626" left="316" width="20" height="14" font="0">) =</text>
<text top="605" left="340" width="12" height="6" font="4"></text>
<text top="617" left="340" width="12" height="6" font="4"></text>
<text top="621" left="340" width="12" height="6" font="4"></text>
<text top="645" left="340" width="12" height="6" font="4"></text>
<text top="649" left="340" width="12" height="6" font="4"></text>
<text top="607" left="360" width="52" height="13" font="4">0 when s</text>
<text top="606" left="416" width="11" height="14" font="0">=</text>
<text top="607" left="431" width="4" height="13" font="4">t</text>
<text top="606" left="439" width="11" height="14" font="0">=</text>
<text top="610" left="454" width="5" height="10" font="14"><i>ε</i></text>
<text top="623" left="360" width="57" height="13" font="4">1 when m</text>
<text top="622" left="421" width="11" height="14" font="0">=</text>
<text top="623" left="436" width="33" height="13" font="4">0 and</text>
<text top="622" left="472" width="4" height="13" font="0">|</text>
<text top="623" left="477" width="5" height="13" font="4">s</text>
<text top="622" left="482" width="25" height="14" font="0">| + |</text>
<text top="623" left="507" width="4" height="13" font="4">t</text>
<text top="622" left="512" width="19" height="14" font="0">| &gt;</text>
<text top="623" left="535" width="7" height="13" font="4">0</text>
<text top="644" left="360" width="7" height="13" font="4">1</text>
<text top="643" left="369" width="11" height="13" font="0">−</text>
<text top="641" left="385" width="5" height="10" font="13">1</text>
<text top="651" left="385" width="5" height="10" font="13">3</text>
<text top="638" left="394" width="8" height="6" font="4"></text>
<text top="644" left="402" width="10" height="13" font="4">w</text>
<text top="649" left="412" width="5" height="10" font="13">1</text>
<text top="641" left="421" width="8" height="10" font="13">m</text>
<text top="651" left="420" width="11" height="11" font="13">|s|</text>
<text top="643" left="435" width="11" height="14" font="0">+</text>
<text top="644" left="449" width="10" height="13" font="4">w</text>
<text top="648" left="459" width="5" height="10" font="13">2</text>
<text top="641" left="468" width="8" height="10" font="13">m</text>
<text top="651" left="467" width="10" height="11" font="13">|t|</text>
<text top="643" left="482" width="11" height="14" font="0">+</text>
<text top="644" left="496" width="10" height="13" font="4">w</text>
<text top="648" left="505" width="5" height="10" font="13">3</text>
<text top="641" left="513" width="24" height="10" font="13">m−T</text>
<text top="650" left="521" width="8" height="10" font="13">m</text>
<text top="638" left="539" width="8" height="6" font="4"></text>
<text top="644" left="553" width="62" height="13" font="4">otherwise.</text>
<text top="627" left="722" width="22" height="13" font="4">(12)</text>
<text top="676" left="149" width="68" height="13" font="4">Here, the w</text>
<text top="681" left="217" width="3" height="10" font="13">i</text>
<text top="676" left="224" width="522" height="13" font="4">are adjustable weights but in most publications they are chosen equal to 1. Furthermore,</text>
<text top="693" left="149" width="511" height="14" font="4">m is the number of characters that can be matched between s and t. Supposing that s</text>
<text top="698" left="660" width="3" height="10" font="13">i</text>
<text top="692" left="668" width="11" height="14" font="0">=</text>
<text top="693" left="683" width="4" height="13" font="4">t</text>
<text top="698" left="688" width="3" height="10" font="13">j</text>
<text top="693" left="695" width="49" height="13" font="4">they are</text>
<text top="709" left="149" width="182" height="13" font="4">considered a match only when</text>
<text top="733" left="371" width="4" height="13" font="0">|</text>
<text top="734" left="375" width="4" height="13" font="4">i</text>
<text top="733" left="382" width="11" height="13" font="0">−</text>
<text top="734" left="396" width="4" height="13" font="4">j</text>
<text top="733" left="400" width="19" height="14" font="0">| &lt;</text>
<text top="724" left="423" width="35" height="14" font="4"> max</text>
<text top="724" left="459" width="11" height="13" font="0">{|</text>
<text top="725" left="470" width="5" height="13" font="4">s</text>
<text top="724" left="476" width="4" height="13" font="0">|</text>
<text top="725" left="480" width="3" height="13" font="4">,</text>
<text top="724" left="486" width="4" height="13" font="0">|</text>
<text top="725" left="490" width="4" height="13" font="4">t</text>
<text top="724" left="495" width="11" height="13" font="0">|}</text>
<text top="743" left="466" width="7" height="13" font="4">2</text>
<text top="724" left="508" width="8" height="6" font="4"></text>
<text top="734" left="519" width="3" height="13" font="4">,</text>
<text top="765" left="149" width="526" height="13" font="4">and every character in s can be matched only once with a character in t. Finally, if s</text>
<text top="762" left="675" width="3" height="10" font="13">0</text>
<text top="765" left="684" width="33" height="13" font="4">and t</text>
<text top="762" left="717" width="3" height="10" font="13">0</text>
<text top="765" left="725" width="19" height="13" font="4">are</text>
<text top="782" left="149" width="595" height="13" font="4">substrings of s and t obtained by removing the nonmatching characters, then T is the number of</text>
<text top="798" left="149" width="198" height="13" font="4">transpositions necessary to turn s</text>
<text top="795" left="347" width="3" height="10" font="13">0</text>
<text top="798" left="354" width="31" height="13" font="4">into t</text>
<text top="795" left="386" width="3" height="10" font="13">0</text>
<text top="798" left="390" width="279" height="13" font="4">. Here, nonadjacent transpositions are allowed.</text>
<text top="819" left="171" width="29" height="13" font="4">With</text>
<text top="816" left="203" width="346" height="18" font="4">stringdist, the Jaro-distance can be computed as follows.</text>
<text top="841" left="149" width="288" height="18" font="4">&gt; stringdist('leia', 'leela', method='jw')</text>
<text top="858" left="149" width="89" height="18" font="4">[1] 0.2166667</text>
<text top="887" left="149" width="595" height="13" font="4">Here, the number of matching characters equals three, and no transpositions are necessary yielding a</text>
<text top="903" left="149" width="73" height="13" font="4">distance of 1</text>
<text top="902" left="225" width="11" height="13" font="0">−</text>
<text top="900" left="240" width="5" height="10" font="13">1</text>
<text top="910" left="240" width="5" height="10" font="13">3</text>
<text top="902" left="247" width="5" height="14" font="0">(</text>
<text top="900" left="255" width="5" height="10" font="13">3</text>
<text top="910" left="255" width="5" height="10" font="13">4</text>
<text top="902" left="265" width="11" height="14" font="0">+</text>
<text top="900" left="280" width="5" height="10" font="13">3</text>
<text top="910" left="280" width="5" height="10" font="13">5</text>
<text top="902" left="290" width="11" height="14" font="0">+</text>
<text top="903" left="303" width="7" height="13" font="4">1</text>
<text top="902" left="310" width="20" height="14" font="0">) =</text>
<text top="900" left="336" width="10" height="10" font="13">13</text>
<text top="910" left="336" width="10" height="10" font="13">60</text>
<text top="902" left="352" width="11" height="13" font="0">≈</text>
<text top="903" left="367" width="79" height="13" font="4">0.22. When w</text>
<text top="908" left="446" width="5" height="10" font="13">1</text>
<text top="902" left="456" width="11" height="14" font="0">=</text>
<text top="903" left="471" width="10" height="13" font="4">w</text>
<text top="908" left="481" width="5" height="10" font="13">2</text>
<text top="902" left="490" width="11" height="14" font="0">=</text>
<text top="903" left="505" width="10" height="13" font="4">w</text>
<text top="908" left="515" width="5" height="10" font="13">3</text>
<text top="902" left="525" width="11" height="14" font="0">=</text>
<text top="903" left="540" width="204" height="13" font="4">1, the Jaro distance ranges between</text>
<text top="920" left="149" width="197" height="13" font="4">0 and 1, where 0 corresponds to s</text>
<text top="919" left="350" width="11" height="14" font="0">=</text>
<text top="920" left="365" width="288" height="14" font="4">t and 1 indicates a complete dissimilarity with m</text>
<text top="919" left="657" width="11" height="14" font="0">=</text>
<text top="920" left="672" width="8" height="13" font="4">T</text>
<text top="919" left="685" width="11" height="14" font="0">=</text>
<text top="920" left="700" width="10" height="13" font="4">0.</text>
<text top="941" left="171" width="49" height="13" font="6"><a href="2014-1-loo.html#12">Winkler</a></text>
<text top="941" left="224" width="5" height="13" font="4"><a href="2014-1-loo.html#12">(</a></text>
<text top="941" left="228" width="27" height="13" font="6"><a href="2014-1-loo.html#12">1990</a></text>
<text top="941" left="256" width="491" height="13" font="4"><a href="2014-1-loo.html#12">) </a>extended the Jaro distance by incorporating an extra penalty for character mis-</text>
<text top="957" left="149" width="436" height="13" font="4">matches in the first four characters. The Jaro-Winkler distance is given by</text>
<text top="986" left="350" width="7" height="13" font="4">d</text>
<text top="991" left="357" width="11" height="9" font="13">jw</text>
<text top="985" left="368" width="5" height="14" font="0">(</text>
<text top="986" left="374" width="16" height="14" font="4">s, t</text>
<text top="985" left="390" width="20" height="14" font="0">) =</text>
<text top="986" left="414" width="7" height="13" font="4">d</text>
<text top="991" left="421" width="17" height="9" font="13">jaro</text>
<text top="985" left="440" width="5" height="14" font="0">(</text>
<text top="986" left="445" width="16" height="14" font="4">s, t</text>
<text top="985" left="461" width="10" height="14" font="0">)[</text>
<text top="986" left="471" width="7" height="13" font="4">1</text>
<text top="985" left="481" width="11" height="13" font="0">−</text>
<text top="986" left="495" width="7" height="13" font="4">p</text>
<text top="985" left="502" width="12" height="14" font="0">`(</text>
<text top="986" left="514" width="16" height="14" font="4">s, t</text>
<text top="985" left="530" width="10" height="14" font="0">)]</text>
<text top="986" left="540" width="3" height="13" font="4">,</text>
<text top="986" left="722" width="22" height="13" font="4">(13)</text>
<text top="1015" left="148" width="38" height="13" font="4">where</text>
<text top="1015" left="190" width="12" height="14" font="0">`(</text>
<text top="1015" left="202" width="16" height="14" font="4">s, t</text>
<text top="1015" left="218" width="5" height="14" font="0">)</text>
<text top="1015" left="227" width="517" height="13" font="4">is the length of the longest common prefix, up to a maximum of four characters and p</text>
<text top="1032" left="149" width="266" height="13" font="4">is a user-defined weight. We demand that p</text>
<text top="1031" left="419" width="18" height="14" font="0">∈ [</text>
<text top="1032" left="437" width="10" height="13" font="4">0,</text>
<text top="1029" left="452" width="5" height="10" font="13">1</text>
<text top="1039" left="452" width="5" height="10" font="13">4</text>
<text top="1031" left="459" width="4" height="14" font="0">]</text>
<text top="1032" left="466" width="116" height="13" font="4">to make sure that 0</text>
<text top="1031" left="587" width="11" height="13" font="0">≤</text>
<text top="1032" left="602" width="7" height="13" font="4">d</text>
<text top="1037" left="609" width="11" height="9" font="13">jw</text>
<text top="1031" left="621" width="5" height="14" font="0">(</text>
<text top="1032" left="626" width="16" height="14" font="4">s, t</text>
<text top="1031" left="643" width="21" height="14" font="0">) ≤</text>
<text top="1032" left="668" width="77" height="13" font="4">1. The factor</text>
<text top="1048" left="150" width="594" height="14" font="4">p determines how strongly differences between the first four characters of both strings determine</text>
<text top="1065" left="149" width="131" height="13" font="4">the total distance. If p</text>
<text top="1064" left="284" width="11" height="14" font="0">=</text>
<text top="1065" left="299" width="445" height="13" font="4">0, the Jaro-Winkler distance reduces to the Jaro distance and all characters</text>
<text top="1081" left="149" width="281" height="13" font="4">contribute equally to the distance function. If p</text>
<text top="1080" left="434" width="11" height="14" font="0">=</text>
<text top="1078" left="450" width="5" height="10" font="13">1</text>
<text top="1088" left="450" width="5" height="10" font="13">4</text>
<text top="1081" left="457" width="287" height="13" font="4">, the Jaro-Winkler distance is equal to zero, even</text>
<text top="1098" left="149" width="595" height="13" font="4">if only the first four characters differ. The reasoning is that apparently, people are less apt to make</text>
<text top="1114" left="149" width="595" height="13" font="4">mistakes in the first four characters or perhaps they are more easily noted, so differences in the first</text>
<text top="1130" left="149" width="480" height="13" font="4">four characters point to a larger probability of two strings being actually different.</text>
<text top="1130" left="633" width="47" height="13" font="6"><a href="2014-1-loo.html#12">Winkler</a></text>
<text top="1130" left="683" width="4" height="13" font="4"><a href="2014-1-loo.html#12">(</a></text>
<text top="1130" left="687" width="26" height="13" font="6"><a href="2014-1-loo.html#12">1990</a></text>
<text top="1130" left="714" width="30" height="13" font="4"><a href="2014-1-loo.html#12">) </a>and</text>
<text top="1147" left="149" width="70" height="13" font="6"><a href="2014-1-loo.html#11">Cohen et al.</a></text>
<text top="1147" left="222" width="4" height="13" font="4"><a href="2014-1-loo.html#11">(</a></text>
<text top="1147" left="226" width="27" height="13" font="6"><a href="2014-1-loo.html#11">2003</a></text>
<text top="1147" left="253" width="100" height="13" font="4"><a href="2014-1-loo.html#11">) </a>use a value of p</text>
<text top="1146" left="357" width="11" height="14" font="0">=</text>
<text top="1147" left="371" width="373" height="13" font="4">0.1 and report better results in a statistical matching benchmark</text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="10" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">120</text>
<text top="103" left="149" width="71" height="13" font="4">than with p</text>
<text top="102" left="226" width="11" height="14" font="0">=</text>
<text top="103" left="243" width="199" height="13" font="4">0. The default value of p for the</text>
<text top="100" left="446" width="298" height="18" font="4">stringdist function with method='jw' is 0 so by</text>
<text top="120" left="149" width="287" height="13" font="4">altering it, the Jaro-Winkler distance is obtained.</text>
<text top="143" left="149" width="336" height="18" font="4">&gt; stringdist('leia', 'leela', method='jw', p=0.1)</text>
<text top="160" left="149" width="89" height="18" font="4">[1] 0.1733333</text>
<text top="190" left="149" width="85" height="13" font="4">Here, we have</text>
<text top="189" left="238" width="12" height="14" font="0">`(</text>
<text top="190" left="250" width="4" height="13" font="4">‘</text>
<text top="186" left="253" width="79" height="18" font="4">leia’, ‘leela’</text>
<text top="189" left="332" width="20" height="14" font="0">) =</text>
<text top="190" left="356" width="269" height="13" font="4">2 so the Jaro-Winkler distance is computed as</text>
<text top="187" left="631" width="10" height="10" font="13">13</text>
<text top="197" left="631" width="10" height="10" font="13">60</text>
<text top="189" left="643" width="5" height="14" font="0">(</text>
<text top="190" left="649" width="7" height="13" font="4">1</text>
<text top="189" left="658" width="11" height="13" font="0">−</text>
<text top="187" left="676" width="5" height="10" font="13">2</text>
<text top="197" left="674" width="10" height="10" font="13">10</text>
<text top="189" left="686" width="20" height="14" font="0">) ≈</text>
<text top="190" left="711" width="27" height="13" font="4">0.17.</text>
<text top="211" left="171" width="160" height="13" font="4">It is easy to see from Eqs. <a href="2014-1-loo.html#9">(</a></text>
<text top="211" left="331" width="13" height="13" font="6"><a href="2014-1-loo.html#9">12</a></text>
<text top="211" left="344" width="39" height="13" font="4"><a href="2014-1-loo.html#9">) </a>and <a href="2014-1-loo.html#9">(</a></text>
<text top="211" left="383" width="13" height="13" font="6"><a href="2014-1-loo.html#9">13</a></text>
<text top="211" left="397" width="136" height="13" font="4"><a href="2014-1-loo.html#9">) </a>that conditional on w</text>
<text top="216" left="533" width="5" height="10" font="13">1</text>
<text top="210" left="543" width="11" height="14" font="0">=</text>
<text top="211" left="558" width="10" height="13" font="4">w</text>
<text top="215" left="568" width="5" height="10" font="13">2</text>
<text top="210" left="578" width="11" height="14" font="0">=</text>
<text top="211" left="593" width="10" height="13" font="4">w</text>
<text top="215" left="603" width="5" height="10" font="13">3</text>
<text top="210" left="613" width="11" height="14" font="0">=</text>
<text top="211" left="627" width="119" height="13" font="4">1, the Jaro and Jaro-</text>
<text top="227" left="148" width="596" height="13" font="4">Winkler distance are nonnegative, symmetric and obey the identity property. However, the triangle</text>
<text top="244" left="149" width="425" height="13" font="4">inequality is not satisfied by these distances. As an example consider s</text>
<text top="243" left="578" width="11" height="14" font="0">=</text>
<text top="244" left="593" width="4" height="13" font="4">‘</text>
<text top="240" left="596" width="29" height="18" font="4">ab’, t</text>
<text top="243" left="629" width="11" height="14" font="0">=</text>
<text top="244" left="644" width="4" height="13" font="4">‘</text>
<text top="240" left="648" width="55" height="18" font="4">cb’ and u</text>
<text top="243" left="707" width="11" height="14" font="0">=</text>
<text top="244" left="722" width="4" height="13" font="4">‘</text>
<text top="240" left="726" width="21" height="18" font="4">cd’.</text>
<text top="260" left="149" width="324" height="13" font="4">Since s and u have no characters in common we have d</text>
<text top="265" left="473" width="17" height="9" font="13">jaro</text>
<text top="259" left="491" width="5" height="14" font="0">(</text>
<text top="260" left="497" width="19" height="14" font="4">s, u</text>
<text top="259" left="516" width="20" height="14" font="0">) =</text>
<text top="260" left="540" width="57" height="13" font="4">1, while d</text>
<text top="265" left="597" width="17" height="9" font="13">jaro</text>
<text top="259" left="616" width="5" height="14" font="0">(</text>
<text top="260" left="621" width="16" height="14" font="4">s, t</text>
<text top="259" left="637" width="20" height="14" font="0">) =</text>
<text top="260" left="662" width="7" height="13" font="4">d</text>
<text top="265" left="669" width="17" height="9" font="13">jaro</text>
<text top="259" left="687" width="5" height="14" font="0">(</text>
<text top="260" left="693" width="18" height="14" font="4">t, u</text>
<text top="259" left="711" width="20" height="14" font="0">) =</text>
<text top="257" left="737" width="5" height="10" font="13">1</text>
<text top="267" left="737" width="5" height="10" font="13">3</text>
<text top="276" left="149" width="101" height="13" font="4">so in this case d</text>
<text top="281" left="250" width="17" height="9" font="13">jaro</text>
<text top="276" left="268" width="5" height="14" font="0">(</text>
<text top="276" left="274" width="19" height="14" font="4">s, u</text>
<text top="276" left="293" width="5" height="14" font="0">)</text>
<text top="276" left="303" width="95" height="13" font="4">is larger than d</text>
<text top="281" left="399" width="17" height="9" font="13">jaro</text>
<text top="276" left="417" width="5" height="14" font="0">(</text>
<text top="276" left="423" width="16" height="14" font="4">s, t</text>
<text top="276" left="439" width="20" height="14" font="0">) +</text>
<text top="276" left="462" width="7" height="13" font="4">d</text>
<text top="281" left="469" width="17" height="9" font="13">jaro</text>
<text top="276" left="488" width="5" height="14" font="0">(</text>
<text top="276" left="493" width="18" height="14" font="4">t, u</text>
<text top="276" left="512" width="5" height="14" font="0">)</text>
<text top="276" left="517" width="227" height="13" font="4">. It is not difficult to verify that the</text>
<text top="295" left="149" width="482" height="13" font="4">Jaro-Winkler distance fails the triangle inequality for the same example, for any p</text>
<text top="294" left="635" width="17" height="14" font="0">∈ [</text>
<text top="295" left="652" width="10" height="13" font="4">0,</text>
<text top="292" left="666" width="5" height="10" font="13">1</text>
<text top="302" left="666" width="5" height="10" font="13">4</text>
<text top="294" left="673" width="4" height="14" font="0">]</text>
<text top="295" left="677" width="3" height="13" font="4">.</text>
<text top="316" left="171" width="372" height="13" font="4">The C-implementation of the Jaro and Jaro-Winkler distance take</text>
<text top="315" left="545" width="22" height="14" font="0">O(|</text>
<text top="316" left="567" width="5" height="13" font="4">s</text>
<text top="315" left="573" width="8" height="13" font="0">||</text>
<text top="316" left="581" width="4" height="13" font="4">t</text>
<text top="315" left="586" width="10" height="14" font="0">|)</text>
<text top="316" left="599" width="51" height="13" font="4">time and</text>
<text top="315" left="652" width="17" height="14" font="0">O(</text>
<text top="316" left="670" width="26" height="13" font="4">max</text>
<text top="315" left="695" width="11" height="13" font="0">{|</text>
<text top="316" left="707" width="5" height="13" font="4">s</text>
<text top="315" left="713" width="4" height="13" font="0">|</text>
<text top="316" left="717" width="3" height="13" font="4">,</text>
<text top="315" left="722" width="4" height="13" font="0">|</text>
<text top="316" left="726" width="4" height="13" font="4">t</text>
<text top="315" left="731" width="17" height="14" font="0">|})</text>
<text top="333" left="149" width="52" height="13" font="4">memory.</text>
<text top="375" left="149" width="134" height="15" font="12"><b>What metric to use?</b></text>
<text top="406" left="149" width="595" height="13" font="4">In the end the choice depends on the application, but there are some general considerations. The choice</text>
<text top="423" left="149" width="595" height="13" font="4">between an edit-based or heuristic metric on one hand or a q-gram based distance on the other, is to an</text>
<text top="439" left="149" width="595" height="13" font="4">extend prescribed by string length. Contrary to edit-based or heuristic metrics, q-gram based metrics</text>
<text top="456" left="149" width="595" height="13" font="4">can easily be computed beween very long text strings since the number of q-grams encountered in</text>
<text top="472" left="149" width="161" height="13" font="4">natural language (for say, q</text>
<text top="471" left="314" width="11" height="13" font="0">≥</text>
<text top="472" left="329" width="415" height="13" font="4">3) is usually much less than the q-grams allowed by the alphabet. The</text>
<text top="489" left="149" width="596" height="13" font="4">choice of edit-based distance depends mostly on the needed accurracy. For example, in a dictionary</text>
<text top="505" left="149" width="595" height="13" font="4">lookup where differences between matched and dictionary items are small, an edit distance that</text>
<text top="521" left="149" width="595" height="13" font="4">allows for more types of edit operations (like the optimal string alignment or Damerau-Levenshtein</text>
<text top="538" left="149" width="595" height="13" font="4">distance) may give better results. The heuristic Jaro- and Jaro-Winkler distances were designed with</text>
<text top="554" left="149" width="484" height="13" font="4">human-typed, relatively short strings in mind, so their area of application is clear.</text>
<text top="599" left="149" width="216" height="17" font="5"><b>Summary and conclusions</b></text>
<text top="638" left="148" width="596" height="13" font="4">The <b>stringdist </b>package offers, for the first time in R, a number of popular string distance functions</text>
<text top="654" left="149" width="596" height="13" font="4">through a consistent interface while transparently handling or ignoring the underlying character</text>
<text top="671" left="149" width="596" height="13" font="4">encoding scheme. The package offers interfaces to C-based string distance algorithms that either</text>
<text top="687" left="149" width="595" height="13" font="4">recycle elements or return the full distance matrix. The same algorithms are used in approximate</text>
<text top="704" left="149" width="224" height="13" font="4">string matching versions of R’s native</text>
<text top="700" left="377" width="326" height="18" font="4">match and %in% functions: amatch and ain respectively.</text>
<text top="725" left="171" width="573" height="13" font="4">In this paper we have given a concise description of the available distance functions in terms of</text>
<text top="741" left="149" width="595" height="13" font="4">their mathematical definitions and showed how to compute them. The algorithmic complexity of the</text>
<text top="758" left="149" width="595" height="13" font="4">current implementation in terms of computational time and memory consumption was mentioned as</text>
<text top="774" left="148" width="29" height="13" font="4">well.</text>
<text top="795" left="171" width="573" height="13" font="4">In the future, we expect to make the C-library available for export to other languages and to reduce</text>
<text top="811" left="149" width="318" height="13" font="4">the memory consumption for some of the algorithms.</text>
<text top="854" left="149" width="136" height="15" font="12"><b>Acknowledgements</b></text>
<text top="885" left="148" width="501" height="13" font="4">The author is grateful to Dr. Rob van Harrevelt for carefully reading the manuscript.</text>
<text top="930" left="149" width="109" height="17" font="5"><b>Bibliography</b></text>
<text top="969" left="149" width="414" height="13" font="4">A. Borg and M. Sariyar. RecordLinkage: Record Linkage in R, 2012. URL</text>
<text top="965" left="566" width="179" height="18" font="6"><a href="http://CRAN.R-project.org/package=RecordLinkage">http://CRAN.R-project.org/</a></text>
<text top="982" left="164" width="144" height="18" font="6"><a href="http://CRAN.R-project.org/package=RecordLinkage">package=RecordLinkage</a></text>
<text top="985" left="308" width="169" height="13" font="4"><a href="http://CRAN.R-project.org/package=RecordLinkage">. </a>R package version 0.4-1. <a href="2014-1-loo.html#1">[p</a></text>
<text top="985" left="477" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="985" left="497" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="1014" left="149" width="595" height="13" font="4">L. Boytsov. Indexing methods for approximate dictionary searching: comparative analyses. ACM</text>
<text top="1030" left="164" width="309" height="14" font="4">Journal of Experimental Algorithmics, 16:1–86, 2011. <a href="2014-1-loo.html#5">[p</a></text>
<text top="1030" left="473" width="20" height="13" font="6"><a href="2014-1-loo.html#5">115</a></text>
<text top="1030" left="493" width="3" height="13" font="4"><a href="2014-1-loo.html#5">,</a></text>
<text top="1030" left="500" width="20" height="13" font="6"><a href="2014-1-loo.html#6">116</a></text>
<text top="1030" left="520" width="3" height="13" font="4"><a href="2014-1-loo.html#6">,</a></text>
<text top="1030" left="527" width="20" height="13" font="6"><a href="2014-1-loo.html#7">117</a></text>
<text top="1030" left="547" width="3" height="13" font="4"><a href="2014-1-loo.html#7">,</a></text>
<text top="1030" left="554" width="20" height="13" font="6"><a href="2014-1-loo.html#8">118</a></text>
<text top="1030" left="574" width="4" height="13" font="4"><a href="2014-1-loo.html#8">]</a></text>
<text top="1059" left="149" width="444" height="13" font="4">C. Buchta and M. Hahsler. cba: Clustering for Business Analytics, 2013. URL</text>
<text top="1055" left="596" width="152" height="18" font="6"><a href="http://CRAN.R-project.org/package=cba">http://CRAN.R-project.</a></text>
<text top="1072" left="164" width="103" height="18" font="6"><a href="http://CRAN.R-project.org/package=cba">org/package=cba</a></text>
<text top="1075" left="267" width="175" height="13" font="4"><a href="http://CRAN.R-project.org/package=cba">. </a>R package version 0.2.12. <a href="2014-1-loo.html#1">[p</a></text>
<text top="1075" left="441" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="1075" left="462" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="1103" left="149" width="337" height="13" font="4">C. T. Butts. sna: Tools for Social Network Analysis, 2013. URL</text>
<text top="1100" left="489" width="255" height="18" font="6"><a href="http://CRAN.R-project.org/package=sna">http://CRAN.R-project.org/package=sna</a></text>
<text top="1103" left="743" width="3" height="13" font="4"><a href="http://CRAN.R-project.org/package=sna">.</a></text>
<text top="1120" left="164" width="161" height="13" font="4">R package version 2.3-1. <a href="2014-1-loo.html#2">[p</a></text>
<text top="1120" left="325" width="20" height="13" font="6"><a href="2014-1-loo.html#2">112</a></text>
<text top="1120" left="345" width="4" height="13" font="4"><a href="2014-1-loo.html#2">]</a></text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="11" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">121</text>
<text top="103" left="149" width="595" height="13" font="4">W. Cavnar and J. Trenkle. N-gram-based text categorization. In Proceedings of SDAIR-94, 3rd Annual</text>
<text top="119" left="163" width="483" height="14" font="4">Symposium on Document Analysis and Information Retrieval, pages 161–175, 1994. <a href="2014-1-loo.html#1">[p</a></text>
<text top="120" left="647" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="120" left="667" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="148" left="149" width="595" height="13" font="4">W. Cohen, P. Ravikumar, and F. Fienberg. A comparison of string distance metrics for name-matching</text>
<text top="164" left="164" width="583" height="13" font="4">tasks. In Proceedings of the IJCAJ-03 workshop on Information Integration on the Web, pages 73–78, 2003.</text>
<text top="181" left="164" width="28" height="13" font="4">URL</text>
<text top="177" left="195" width="439" height="18" font="6"><a href="http://www.isi.edu/integration/workshops/ijcai03/proceedings.htm">http://www.isi.edu/integration/workshops/ijcai03/proceedings.htm</a></text>
<text top="181" left="634" width="21" height="13" font="4"><a href="http://www.isi.edu/integration/workshops/ijcai03/proceedings.htm">. </a><a href="2014-1-loo.html#9">[p</a></text>
<text top="181" left="655" width="20" height="13" font="6"><a href="2014-1-loo.html#9">119</a></text>
<text top="181" left="675" width="4" height="13" font="4"><a href="2014-1-loo.html#9">]</a></text>
<text top="209" left="149" width="444" height="13" font="4">H. C. Doran. MiscPsycho: Miscalleaneous Psychometric Analyses, 2010. URL</text>
<text top="206" left="596" width="152" height="18" font="6"><a href="http://CRAN.R-project.org/package=MiscPsycho">http://CRAN.R-project.</a></text>
<text top="222" left="164" width="151" height="18" font="6"><a href="http://CRAN.R-project.org/package=MiscPsycho">org/package=MiscPsycho</a></text>
<text top="226" left="315" width="158" height="13" font="4"><a href="http://CRAN.R-project.org/package=MiscPsycho">. </a>R package version 1.6. <a href="2014-1-loo.html#1">[p</a></text>
<text top="226" left="473" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="226" left="493" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="254" left="149" width="596" height="13" font="4">Q. Grimonprez. Rankcluster: Model-based clustering for multivariate partial ranking data, 2013. URL</text>
<text top="267" left="164" width="309" height="18" font="6"><a href="http://CRAN.R-project.org/package=Rankcluster">http://CRAN.R-project.org/package=Rankcluster</a></text>
<text top="271" left="473" width="175" height="13" font="4"><a href="http://CRAN.R-project.org/package=Rankcluster">. </a>R package version 0.90.3. <a href="2014-1-loo.html#2">[p</a></text>
<text top="271" left="648" width="20" height="13" font="6"><a href="2014-1-loo.html#2">112</a></text>
<text top="271" left="668" width="4" height="13" font="4"><a href="2014-1-loo.html#2">]</a></text>
<text top="299" left="149" width="597" height="13" font="4">R. Hamming. Error detecting and error correcting codes. The Bell system technical journal, 29:147–160,</text>
<text top="315" left="163" width="48" height="13" font="4">1950. <a href="2014-1-loo.html#2">[p</a></text>
<text top="315" left="211" width="20" height="13" font="6"><a href="2014-1-loo.html#2">112</a></text>
<text top="315" left="231" width="3" height="13" font="4"><a href="2014-1-loo.html#2">,</a></text>
<text top="315" left="238" width="20" height="13" font="6"><a href="2014-1-loo.html#5">115</a></text>
<text top="315" left="258" width="4" height="13" font="4"><a href="2014-1-loo.html#5">]</a></text>
<text top="344" left="149" width="595" height="13" font="4">K. Hornik, P. Mair, J. Rauch, W. Geiger, C. Buchta, and I. Feinerer. The textcat package for n-gram</text>
<text top="360" left="164" width="581" height="13" font="4">based text categorization in R. Journal of Statistical Software, 52(6):1–17, 2 2013. ISSN 1548-7660. URL</text>
<text top="373" left="164" width="219" height="18" font="6"><a href="http://www.jstatsoft.org/v52/i06">http://www.jstatsoft.org/v52/i06</a></text>
<text top="377" left="383" width="21" height="13" font="4"><a href="http://www.jstatsoft.org/v52/i06">. </a><a href="2014-1-loo.html#1">[p</a></text>
<text top="377" left="404" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="377" left="424" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="405" left="149" width="598" height="13" font="4">M. Jaro. UNIMATCH: A record linkage system: User manual. United States bureau of the census, 1978.</text>
<text top="421" left="163" width="88" height="13" font="4">pp. 103-108. <a href="2014-1-loo.html#9">[p</a></text>
<text top="421" left="252" width="20" height="13" font="6"><a href="2014-1-loo.html#9">119</a></text>
<text top="421" left="272" width="4" height="13" font="4"><a href="2014-1-loo.html#9">]</a></text>
<text top="450" left="149" width="597" height="13" font="4">M. Jaro. Advances in record-linkage methodology as applied to matching the 1985 census of Tampa,</text>
<text top="466" left="164" width="430" height="13" font="4">Florida. Journal of the American Statistical Association, 84:414–420, 1989. <a href="2014-1-loo.html#9">[p</a></text>
<text top="466" left="594" width="20" height="13" font="6"><a href="2014-1-loo.html#9">119</a></text>
<text top="466" left="614" width="4" height="13" font="4"><a href="2014-1-loo.html#9">]</a></text>
<text top="495" left="149" width="598" height="13" font="4">A. Karatzoglou, A. Smola, K. Hornik, and A. Zeileis. kernlab – an S4 package for kernel methods in R.</text>
<text top="511" left="164" width="298" height="14" font="4">Journal of Statistical Software, 11(9):1–20, 2004. URL</text>
<text top="508" left="465" width="226" height="18" font="6"><a href="http://www.jstatsoft.org/v11/i09/">http://www.jstatsoft.org/v11/i09/</a></text>
<text top="511" left="692" width="21" height="13" font="4"><a href="http://www.jstatsoft.org/v11/i09/">. </a><a href="2014-1-loo.html#1">[p</a></text>
<text top="511" left="712" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="511" left="733" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="540" left="149" width="496" height="13" font="4">E. Keuleers. vwr: Useful functions for visual word recognition research, 2013. URL</text>
<text top="536" left="649" width="96" height="18" font="6"><a href="http://CRAN.R-project.org/package=vwr">http://CRAN.R-</a></text>
<text top="553" left="164" width="158" height="18" font="6"><a href="http://CRAN.R-project.org/package=vwr">project.org/package=vwr</a></text>
<text top="556" left="322" width="168" height="13" font="4"><a href="http://CRAN.R-project.org/package=vwr">. </a>R package version 0.3.0. <a href="2014-1-loo.html#1">[p</a></text>
<text top="556" left="490" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="556" left="510" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="584" left="149" width="413" height="13" font="4">M. Kohl. MKmisc: Miscellaneous functions from M. Kohl, 2013. URL</text>
<text top="581" left="566" width="179" height="18" font="6"><a href="http://CRAN.R-project.org/package=MKmisc">http://CRAN.R-project.org/</a></text>
<text top="597" left="164" width="96" height="18" font="6"><a href="http://CRAN.R-project.org/package=MKmisc">package=MKmisc</a></text>
<text top="601" left="260" width="165" height="13" font="4"><a href="http://CRAN.R-project.org/package=MKmisc">. </a>R package version 0.94. <a href="2014-1-loo.html#1">[p</a></text>
<text top="601" left="424" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="601" left="445" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="629" left="149" width="598" height="13" font="4">V. Laurikari. Efficient submatch addressing for regular expressions. Master’s thesis, Helsinki Univer-</text>
<text top="646" left="164" width="177" height="13" font="4">sity of Technology, 2001. URL</text>
<text top="642" left="344" width="219" height="18" font="6"><a href="https://github.com/laurikari/tre">https://github.com/laurikari/tre</a></text>
<text top="646" left="563" width="21" height="13" font="4"><a href="https://github.com/laurikari/tre">. </a><a href="2014-1-loo.html#1">[p</a></text>
<text top="646" left="584" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="646" left="604" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="674" left="149" width="595" height="13" font="4">V. I. Levenshtein. Binary codes capable of correcting deletions, insertions, and reversals. Soviet Physics</text>
<text top="690" left="163" width="171" height="14" font="4">Doklady, 10:707–710, 1966. <a href="2014-1-loo.html#1">[p</a></text>
<text top="690" left="334" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="690" left="354" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="719" left="149" width="595" height="13" font="4">H. Lodhi, C. Saunders, J. Shawe-Taylor, N. Cristianini, and C. Watkins. Text classification using string</text>
<text top="735" left="164" width="378" height="13" font="4">kernels. Journal of Machine Learning Research, 2:419–444, 2002. <a href="2014-1-loo.html#1">[p</a></text>
<text top="735" left="541" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="735" left="562" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="764" left="149" width="380" height="13" font="4">N. Logan. C code for Damerau-Levenshtein distance, 2013. URL</text>
<text top="760" left="532" width="213" height="18" font="6"><a href="https://github.com/ugexe/Text--Levenshtein--Damerau--XS/blob/master/damerau-int.c">https://github.com/ugexe/Text--</a></text>
<text top="777" left="164" width="347" height="18" font="6"><a href="https://github.com/ugexe/Text--Levenshtein--Damerau--XS/blob/master/damerau-int.c">Levenshtein--Damerau--XS/blob/master/damerau-int.c</a></text>
<text top="780" left="510" width="175" height="13" font="4"><a href="https://github.com/ugexe/Text--Levenshtein--Damerau--XS/blob/master/damerau-int.c">. </a>Last accessed 2014-03-04. <a href="2014-1-loo.html#7">[p</a></text>
<text top="780" left="685" width="20" height="13" font="6"><a href="2014-1-loo.html#7">117</a></text>
<text top="780" left="705" width="4" height="13" font="4"><a href="2014-1-loo.html#7">]</a></text>
<text top="808" left="149" width="595" height="13" font="4">R. Lowrance and R. Wagner. An extension of the string-to-string correction problem. Journal of the</text>
<text top="825" left="163" width="329" height="14" font="4">Association of Computing Machinery, 22:177–183, 1975. <a href="2014-1-loo.html#6">[p</a></text>
<text top="825" left="492" width="20" height="13" font="6"><a href="2014-1-loo.html#6">116</a></text>
<text top="825" left="513" width="3" height="13" font="4"><a href="2014-1-loo.html#6">,</a></text>
<text top="825" left="519" width="20" height="13" font="6"><a href="2014-1-loo.html#7">117</a></text>
<text top="825" left="539" width="4" height="13" font="4"><a href="2014-1-loo.html#7">]</a></text>
<text top="853" left="149" width="598" height="13" font="4">G. Navarro. A guided tour to approximate string matching. ACM Computing surveys, 33:31–88, 2001.</text>
<text top="870" left="164" width="13" height="13" font="4"><a href="2014-1-loo.html#5">[p</a></text>
<text top="870" left="176" width="20" height="13" font="6"><a href="2014-1-loo.html#5">115</a></text>
<text top="870" left="196" width="3" height="13" font="4"><a href="2014-1-loo.html#5">,</a></text>
<text top="870" left="203" width="20" height="13" font="6"><a href="2014-1-loo.html#7">117</a></text>
<text top="870" left="223" width="4" height="13" font="4"><a href="2014-1-loo.html#7">]</a></text>
<text top="898" left="149" width="595" height="13" font="4">S. Needleman and C. D. Wunsch. A general method applicable to the search of similarities in the</text>
<text top="915" left="164" width="507" height="13" font="4">amino acid sequence of two proteins. Journal of Molecular Biology, 48:443–453, 1970. <a href="2014-1-loo.html#5">[p</a></text>
<text top="915" left="671" width="20" height="13" font="6"><a href="2014-1-loo.html#5">115</a></text>
<text top="915" left="691" width="4" height="13" font="4"><a href="2014-1-loo.html#5">]</a></text>
<text top="943" left="149" width="443" height="13" font="4">K. Schliep and E. Paradis. Phangorn: phylogenetic analyses in R, 2013. URL</text>
<text top="940" left="596" width="152" height="18" font="6"><a href="http://CRAN.R-project.org/package=Phangorn">http://CRAN.R-project.</a></text>
<text top="956" left="164" width="137" height="18" font="6"><a href="http://CRAN.R-project.org/package=Phangorn">org/package=Phangorn</a></text>
<text top="959" left="301" width="176" height="13" font="4"><a href="http://CRAN.R-project.org/package=Phangorn">. </a>R package version 1.99-1. <a href="2014-1-loo.html#2">[p</a></text>
<text top="959" left="477" width="20" height="13" font="6"><a href="2014-1-loo.html#2">112</a></text>
<text top="959" left="497" width="4" height="13" font="4"><a href="2014-1-loo.html#2">]</a></text>
<text top="988" left="149" width="598" height="13" font="4">M. Studer, G. Ritschard, A. Gabadinho, and N. Müller. Discrepancy analysis of state sequences.</text>
<text top="1004" left="163" width="314" height="14" font="4">Sociological Methods and Research, 40:471–510, 2011. <a href="2014-1-loo.html#1">[p</a></text>
<text top="1004" left="478" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="1004" left="498" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="1033" left="149" width="595" height="13" font="4">E. Ukkonen. Approximate string-matching with q-grams and maximal matches. Theoretical Computer</text>
<text top="1049" left="163" width="165" height="14" font="4">Science, 92:191–211, 1992. <a href="2014-1-loo.html#8">[p</a></text>
<text top="1049" left="328" width="20" height="13" font="6"><a href="2014-1-loo.html#8">118</a></text>
<text top="1049" left="349" width="4" height="13" font="4"><a href="2014-1-loo.html#8">]</a></text>
<text top="1077" left="149" width="571" height="13" font="4">J. Utterström and Y. Arrouye. uconv - convert data from one encoding to another (Linux man page). <a href="2014-1-loo.html#4">[p</a></text>
<text top="1077" left="719" width="20" height="13" font="6"><a href="2014-1-loo.html#4">114</a></text>
<text top="1077" left="739" width="4" height="13" font="4"><a href="2014-1-loo.html#4">]</a></text>
<text top="1106" left="149" width="595" height="13" font="4">M. van der Loo, E. de Jonge, and S. Scholtus. deducorrect: Deductive correction, deductive imputation, and</text>
<text top="1122" left="164" width="205" height="14" font="4">deterministic correction., 2011. URL</text>
<text top="1119" left="372" width="302" height="18" font="6"><a href="https://github.com/markvanderloo/deducorrect">https://github.com/markvanderloo/deducorrect</a></text>
<text top="1122" left="674" width="70" height="13" font="4"><a href="https://github.com/markvanderloo/deducorrect">. </a>R package</text>
<text top="1139" left="163" width="96" height="13" font="4">version 1.3-5. <a href="2014-1-loo.html#1">[p</a></text>
<text top="1139" left="260" width="20" height="13" font="6"><a href="2014-1-loo.html#1">111</a></text>
<text top="1139" left="280" width="4" height="13" font="4"><a href="2014-1-loo.html#1">]</a></text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
<page number="12" position="absolute" top="0" left="0" height="1262" width="892">
<text top="44" left="64" width="11" height="15" font="0">C</text>
<text top="47" left="75" width="86" height="12" font="1">ONTRIBUTED</text>
<text top="44" left="166" width="10" height="15" font="0">R</text>
<text top="47" left="177" width="61" height="12" font="1">ESEARCH</text>
<text top="44" left="242" width="12" height="15" font="0">A</text>
<text top="47" left="254" width="53" height="12" font="1">RTICLES</text>
<text top="44" left="807" width="22" height="15" font="0">122</text>
<text top="103" left="149" width="595" height="13" font="4">W. Winkler. String comparator metrics and enhanced decision rules in the Fellegi-Sunter model of</text>
<text top="120" left="164" width="582" height="13" font="4">record linkage. Proceedings of the Section on Survey Research Methods (American Statistical Association),</text>
<text top="136" left="163" width="134" height="13" font="4">page 354–359, 1990. <a href="2014-1-loo.html#9">[p</a></text>
<text top="136" left="297" width="20" height="13" font="6"><a href="2014-1-loo.html#9">119</a></text>
<text top="136" left="317" width="4" height="13" font="4"><a href="2014-1-loo.html#9">]</a></text>
<text top="182" left="149" width="118" height="13" font="4">Mark P.J. van der Loo</text>
<text top="195" left="149" width="185" height="18" font="6"><a href="http://www.markvanderloo.eu">http://www.markvanderloo.eu</a></text>
<text top="212" left="149" width="165" height="18" font="6"><a href="mailto:mark.vanderloo@gmail.com">mark.vanderloo@gmail.com</a></text>
<text top="1210" left="148" width="220" height="15" font="0">The R Journal Vol. 6/1, June 2014</text>
<text top="1210" left="642" width="102" height="15" font="0">ISSN 2073-4859</text>
</page>
</pdf2xml>
