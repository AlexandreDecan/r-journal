page	left	top	code
1	798	67	                                                9
1	82	256	by Stefan Theußl and Achim Zeileis
1	82	341	Open source software (OSS) is typically created in a
1	82	359	decentralized self-organizing process by a commu-
1	82	377	nity of developers having the same or similar inter-
1	82	413	key factor for the success of OSS over the last two
1	82	431	decades is the Internet: Developers who rarely meet
1	82	449	face-to-face can employ new means of communica-
1	82	467	tion, both for rapidly writing and deploying software
1	82	485	(in the spirit of Linus Torvald’s “release early, release
1	82	503	often paradigm”). Therefore, many tools emerged
1	82	521	that assist a collaborative software development pro-
1	82	539	cess, including in particular tools for source code
1	82	557	management (SCM) and version control.
1	105	577	   In the R world, SCM is not a new idea; in fact,
1	82	595	the R Development Core Team has always been us-
1	82	613	ing SCM tools for the R sources, first by means of
1	82	684	Zürich mainly for managing the development of the
1	82	702	base R system. Mailing lists like R-help, R-devel and
1	82	720	many others are currently the main communication
1	82	738	channels in the R community.
1	105	758	   Also beyond the base system, many R con-
1	82	776	tributors employ SCM tools for managing their R
1	82	794	packages, e.g., via web-based SVN repositories like
1	82	848	has been no central SCM repository providing ser-
1	82	866	vices suited to the specific needs of R package de-
1	82	884	velopers. Since early 2007, the R-project offers such
1	82	902	a central platform to the R community.  R-Forge
1	82	938	tools for source code management and various web-
1	82	956	based features. It aims to provide a platform for
1	82	974	collaborative development of R packages, R-related
1	82	991	software or further projects. R-Forge is closely re-
1	82	1009	lated to the most famous of such platforms—the
1	82	1027	world’s largest OSS development website—namely
1	105	1065	    The remainder of this article is organized as fol-
1	82	1083	lows.  First, we present the core features that R-
1	82	1101	Forge offers to the R community. Second, we give a
1	82	1119	hands-on tutorial on how users and developers can
1	82	1137	get started with R-Forge. In particular, we illustrate
1	82	1155	how people can register, set up new projects, use R-
1	82	1173	Forge’s SCM facilities, provide their packages on R-
1	459	218	Forge, host a project-specific website, and how pack-
1	459	236	age maintainers submit a package to the Compre-
1	459	289	velopments and give a brief outlook to future work.
1	459	378	R-Forge offers a central platform for the develop-
1	459	396	ment of R packages, R-related software and other
1	459	414	projects.
1	459	468	Forge code maintained by Tim Perdue, one of the
1	459	486	original SourceForge authors. GForge has been mod-
1	459	504	ified to provide additional features for the R commu-
1	459	522	nity, namely a CRAN-style repository for hosting de-
1	459	540	velopment releases of R packages as well as a quality
1	459	558	management system similar to that of CRAN. Pack-
1	459	576	ages hosted on R-Forge are provided in source form
1	459	594	as well as in binary form for Mac OS X and Windows.
1	459	612	They can be downloaded from the website of the cor-
1	459	630	responding project on R-Forge or installed directly in
1	459	648	R; for a package foo, say, install.packages("foo",
1	481	684	   On R-Forge, developers organize their work in
1	459	702	so-called “Projects”. Every project has various tools
1	459	720	and web-based features for software development,
1	459	738	communcation and other services. All features men-
1	459	756	tioned in the following sections are accessible via so-
1	459	774	called “Tabs”: e.g., user accounts can be managed in
1	459	792	the My Page tab or a list of available projects can be
1	459	810	displayed using the Project Tree tab.
1	481	828	   Since starting the platform in early 2007, more
1	459	846	and more interested users registered their projects on
1	459	864	R-Forge. Now, after more than two years of develop-
1	459	882	ment and testing, around 350 projects and more than
1	459	900	900 users are registered on R-Forge. This and the
1	459	918	steadily growing list of feature requests show that
1	459	936	there is a high demand for centralized source code
1	459	954	management tools and for releasing prototype code
1	459	971	frequently among the R community.
1	481	990	   In the next three sections, we summarize the core
1	459	1008	features of R-Forge and what R-Forge offers to the R
1	459	1026	community in terms of collaborative development of
1	459	1044	R-related software projects.
1	459	1119	When carrying out software projects, source files
1	459	1137	change over time, new files get created and old files
1	459	1155	deleted. Typically, several authors work on several
1	459	1173	computers on the same and/or different files and
1	82	1218	The R Journal Vol. 1/1, May 2009
1	704	1218	                                  ISSN 2073-4859
2	82	67	10
2	82	125	keeping track of every change can become a tedious
2	82	143	task. In the open source community, the general so-
2	82	161	lution to this problem is to use version control, typi-
2	82	179	cally provided by the majority of SCM tools. For this
2	82	197	reason R-Forge utilizes SVN to facilitate the devel-
2	82	215	oper’s work when creating software.
2	105	233	   A central repository ensures that the developer
2	82	251	always has access to the current version of the
2	82	269	project’s source code. Any of the authorized col-
2	82	287	laborators can “check out” (i.e., download) or “up-
2	82	305	date” the project file structure, make the necessary
2	82	323	changes or additions, delete files from the current re-
2	82	341	vision and finally “commit” changes or additions to
2	82	359	the repository. More than that, SVN keeps track of
2	82	377	the complete history of the project file structure. At
2	82	395	any point in the development stage it is possible to
2	82	413	go back to any previous stage in the history to inspect
2	82	431	and restore old files. This is called version control, as
2	82	448	every stage automatically is assigned a unique ver-
2	82	466	sion number which increases over time.
2	105	485	   On R-Forge such a version-controlled repository
2	82	503	is automatically created for each project.  To get
2	82	521	started, the project members just have to install the
2	82	539	client of their choice (e.g., Tortoise SVN on Windows
2	82	557	or svnX on Mac OS X) and check out the repository.
2	82	575	In addition to the inherent backup of every version
2	82	593	within the repository a backup of the whole reposi-
2	82	611	tory is generated daily.
2	105	629	   A rights management system assures that, by de-
2	82	647	fault, anonymous users have read access and devel-
2	82	665	opers have write access to the data associated with a
2	82	683	certain project on R-Forge. More precisely, registered
2	82	701	users can be granted one of several roles: e.g., the
2	82	719	“Administrator” has all rights including the right to
2	82	737	add new users to the project or release packages di-
2	82	755	rectly to CRAN. He/she is usually the package main-
2	82	773	tainer, the project leader or has registered the project
2	82	790	originally. Other members of a project typically have
2	82	808	either the role “Senior Developer” or “Junior Devel-
2	82	826	oper” which both have permission to commit to the
2	82	844	project SVN repository and examine the log files in
2	82	862	the R Packages tab (the differences between the two
2	82	880	roles are subtle, e.g., senior developers additionally
2	82	898	have administrative privileges in several places in
2	82	916	the project). When we speak of developers in sub-
2	82	934	sequent sections we refer to project members having
2	82	952	the rights at least of a junior developer.
2	82	1029	Development versions of a software project are typ-
2	82	1047	ically prototypes and are subject to many changes.
2	82	1065	Thus, R-Forge offers two tools which assist the devel-
2	82	1083	opers in improving the quality of their source code.
2	105	1101	   First, it offers a quality management system sim-
2	82	1119	ilar to that of CRAN. Packages on R-Forge are
2	82	1137	checked in a standardized way on different plat-
2	82	1155	forms based on R CMD check at least once daily. The
2	82	1173	resulting log files can be examined by the project de-
2	459	125	velopers so that they can improve the package to
2	459	143	pass all tests on R-Forge and subsequently on CRAN.
2	481	161	   Second, bug tracking systems allow users to no-
2	459	179	tify package authors about problems they encounter.
2	459	197	In the spirit of OSS—given enough eyeballs, all
2	459	233	view leads to an overall improvement of the quality
2	459	251	of software projects.
2	459	325	A number of further tools, of increased interest for
2	459	343	larger projects, help developers to coordinate their
2	459	361	work and to communicate with their user base.
2	459	379	These tools include:
2	480	413	   • Project websites: Developers may present their
2	496	466	      to an external website.
2	480	497	   • Mailing lists: By default a list foo-commits@
2	496	533	      cally created for each project. Additional mail-
2	496	551	      ing lists can be set up easily.
2	480	582	   • Project categorization:  Administrators may
2	496	600	     categorize their project in several so-called
2	496	618	     “Trove Categories” in the Admin tab of their
2	496	636	      project (under Trove Categorization). For each
2	496	654	      category three different items can be selected.
2	496	672	      This enables users to quickly find what they are
2	496	690	      looking for using the Project Tree tab.
2	480	721	   • News: Announcements and other information
2	496	739	      related to a project can be put on the project
2	496	756	     summary page as well as on the home page of
2	496	774	     R-Forge. The latter needs approval by one of
2	496	792	      the R-Forge administrators. All items are avail-
2	496	810	      able as RSS feeds.
2	480	841	   • Forums: Discussion forums can be set up sepa-
2	496	859	      rately by the project administrators.
2	459	947	This section is intended to be a hands-on tutorial for
2	459	965	new users. Depending on familiarity with the sys-
2	459	982	tems/tools involved the instructions might be some-
2	459	1000	what brief. In case of problems we recommend con-
2	459	1054	tailed step-by-step instructions.
2	480	1142	   • login,
2	480	1173	   • register a user or a project,
3	790	67	                                            11
3	291	660	                              Figure 1: Home page of R-Forge on 2009-03-10
3	103	709	   • download the documentation,
3	103	749	   • examine the latest news and changes,
3	103	788	   • go to a specific project website either by search-
3	120	806	      ing for available projects (top middle of the
3	120	824	      page), by clicking on one of the projects listed
3	120	842	      on the right, or by going through the listing in
3	120	859	      the Project Tree tab.
3	105	902	   Registered users can access their personal page
3	82	937	sonal page of the first author.
3	82	1027	To use R-Forge as a developer, one has to register as
3	82	1045	a site user. A link on the main web site called New
3	82	1063	Account on the top right of the home page leads to
3	82	1081	the corresponding registration form.
3	105	1101	   After submitting the completed form, an e-mail is
3	82	1119	sent to the given address containing a link for activat-
3	82	1137	ing the account. Subsequently, all R-Forge features,
3	82	1155	including joining existing or creating new projects,
3	82	1173	are available to logged-in users.
3	459	741	There are two possibilities to register a project: Click-
3	459	759	ing on Register Your Project on the home page or going
3	459	777	to the My Page tab and clicking on Register Project (see
3	459	813	form which has to be filled out in order to finish the
3	459	831	registration process. In the text field “Project Pub-
3	459	849	lic Description” the registrant is supposed to enter a
3	459	867	concise description of the project. This text and the
3	459	885	“Project Full Name” will be shown in several places
3	459	920	field “Project Purpose And Summarization” is addi-
3	459	938	tional information for the R-Forge administrators, in-
3	459	956	spected for approval. “Project Unix Name” refers to
3	459	974	the name which uniquely determines the project. In
3	459	992	the case of a project that contains a single R pack-
3	459	1010	age, the project Unix name typically corresponds to
3	459	1028	the package name (in its lower-case version). Restric-
3	459	1046	tions according to the Unix file system convention
3	459	1064	force Unix names to be in lower case (and will be
3	459	1082	converted automatically if they are typed in upper
3	459	1100	case).
3	481	1119	   After the completed form is submitted, the
3	459	1137	project has to be approved by the R-Forge admin-
3	459	1155	istrators and a confirmation e-mail is sent to the
3	459	1173	registrant upon approval.   After that, the regis-
4	82	67	12
4	299	678	                                  Figure 2: The My Page tab of the first author
4	82	727	trant automatically becomes the project administra-
4	82	745	tor and the standardized web area of the project
4	82	763	(http://R-Forge.R-project.org/projects/foo/) is
4	82	781	immediately available on R-Forge. This web area in-
4	82	799	cludes a Summary page, an Admin tab visible only to
4	82	817	the project administrators, and various other tabs de-
4	82	835	pending on the features enabled for this project in the
4	82	853	Admin tab. To present the new project to a broader
4	82	871	community the name of the project additionally is
4	82	889	promoted on the home page under “Recently Reg-
4	105	926	   Furthermore, within an hour after approval a de-
4	82	944	fault mailing list and the project’s SVN repository
4	82	998	tent of these directories is used by the R-Forge server
4	82	1016	for creating R packages and a project website, respec-
4	82	1034	tively.
4	82	1119	The first step after creation of a project is typically
4	82	1137	to start generation of content for one (or more) R
4	82	1173	ther start committing changes via SVN as usual or—
4	459	727	if the package is already version-controlled some-
4	459	745	where else—the corresponding parts of the reposi-
4	459	763	tory including the history can be migrated to R-Forge
4	459	781	(see Section 6 of the user’s manual).
4	481	807	   The SCM tab of a project explains how
4	459	825	the corresponding SVN repository located at
4	459	860	can be checked out. From this URL the sources are
4	459	878	checked out either anonymously without write per-
4	459	896	mission (enabled by default) or as developer using
4	459	914	an encrypted authentication method, namely secure
4	459	932	shell (ssh). Via this secure protocol (svn+ssh:// fol-
4	459	950	lowed by the registered user name) developers have
4	459	968	full access to the repository. Typically, the developer
4	459	986	is authenticated via the registered password but it is
4	459	1004	also possible to upload a secure shell key (updated
4	459	1022	hourly) to make use of public/private key authenti-
4	459	1040	cation. Section 3.2 of the user’s manual explains this
4	459	1058	process in more detail.
4	481	1083	   To make use of the package builds and checks
4	459	1173	have more than one package in a single project; e.g.,
5	790	67	                                            13
5	82	125	if a project consists of the packages foo and bar, then
5	82	161	respectively.
5	82	197	tory of every repository and builds the package
5	82	215	sources as well as the package binaries on a daily
5	82	233	basis for Mac OS X and Windows (if applicable).
5	82	251	The package builds are provided in the R Pack-
5	82	286	stalled directly in R using install.packages("foo",
5	82	322	more, in the R Packages tab developers can examine
5	82	340	logs of the build and check process on different plat-
5	82	358	forms.
5	105	376	   To release a package to CRAN the project ad-
5	82	394	ministrator clicks on Submit this package to CRAN in
5	82	412	the R Packages tab. Upon confirmation, a message
5	82	502	daily, i.e., the latest source package does not include
5	82	520	more recent code committed to the SVN repository.
5	82	591	it. Depending on whether you are a member of the
5	82	609	project or not and your rights you will see only parts
5	82	627	of the information provided for each package.
5	82	700	A customized project website, accessible through
5	82	736	corresponds to the unix name of the project, is man-
5	82	771	dated every hour.
5	105	789	   The changes made to the project can be exam-
5	82	807	ined by entering the corresponding standardized
5	82	825	web area. On entry, the Summary page is shown.
5	82	843	Here, one can
5	103	876	   • examine the details of the project including a
5	120	894	      short description and a listing of the adminis-
5	120	912	      trators and developers,
5	103	942	   • follow a link leading to the project homepage,
5	103	972	   • examine the latest news announcements (if
5	120	990	      available),
5	103	1020	   • go to other sections of the project like Forums,
5	120	1038	       Tracker, Lists, R Packages, etc.
5	103	1068	   • follow the download link leading directly to
5	120	1086	      the available packages of the project (i.e., the
5	120	1104	      R Packages tab).
5	105	1137	   Furthermore, meta-information about a project
5	82	1155	can be supplied in the Admin tab via so-called “Trove
5	82	1173	Categorization”.
5	459	160	In this section, we briefly summarize the major
5	459	178	changes and updates to the R-Forge system during
5	459	196	the last few months and give an outlook to future
5	459	214	developments.
5	481	232	   Recently added features and major changes in-
5	459	250	clude:
5	480	284	   • New defaults for freshly registered projects:
5	496	302	      Only the tabs Lists, SCM and R packages are en-
5	496	320	     abled initially. Forums, Tracker and News can
5	496	338	      be activated separately (in order not to over-
5	496	356	     whelm new users with too many features) us-
5	496	374	     ing Edit Public Info in the Admin tab of the
5	496	392	     project. Experienced users can decide which
5	496	410	      features they want and activate them.
5	480	441	   • An enhanced structure in the SVN repository
5	496	459	      allowing multiple packages in a single project
5	496	477	      (see above).
5	496	526	     contains platform-independent package build-
5	496	544	     ing and quality management code used on the
5	496	562	      R-Forge servers.
5	480	593	   • A modified News submit page offering two
5	496	611	     types of submissions:   project-specific and
5	496	629	     global news. The latter needs approval by one
5	496	647	      of the R-Forge administrators (default: project-
5	496	664	     only submission).
5	480	696	   • Circulation of SVN commit messages can be
5	496	713	     enabled in the SCM Admin tab by project ad-
5	496	731	      ministrators. The mailing list mentioned in the
5	496	749	      text field is used for delivering the SVN commit
5	496	767	      messages (default: off).
5	480	798	   • Mailing list search facilities provided by the
5	496	816	     Swish-e engine which can be accessed via the
5	496	834	      List tab (private lists are not included in the
5	496	852	      search index).
5	481	886	   Further features and improvements which are
5	459	904	currently on the wishlist or under development in-
5	459	922	clude
5	480	956	   • a Wiki,
5	480	987	   • task management facilities,
5	480	1018	   • a re-organized tracker more compatible with R
5	496	1036	     package development and,
5	480	1067	   • an update of the underlying GForge sys-
5	481	1137	   For suggestions, problems, feature requests, and
5	459	1155	other questions regarding R-Forge please contact
6	82	67	14
6	311	529	                                    Figure 3: R Packages tab of the tm project
6	82	613	Setting up this project would not have been possi-
6	82	631	ble without Douglas Bates and the University of Wis-
6	82	648	consin as they provided us with a server for hosting
6	82	666	this platform. Furthermore, the authors would like
6	82	684	to thank the Computer Center of the Wirtschaftsuni-
6	82	702	versität Wien for their support and for providing us
6	82	720	with additional hardware as well as a professional
6	82	738	server infrastructure.
6	82	824	P. Cederqvist et al. Version Management with CVS.
6	97	841	  Network Theory Limited, Bristol, 2006.   Full
6	82	907	T. Copeland, R. Mas, K. McCullagh, T. Per-
6	97	925	  due, G. Smet, and R. Spisser.   GForge Man-
6	82	990	C. M. Pilato, B. Collins-Sussman, and B. W. Fitz-
6	97	1008	  patrick. Version Control with Subversion. O’Reilly,
6	459	626	R-Forge Administration and Development Team. R-
6	459	693	E. S. Raymond.   The Cathedral and the Bazaar.
6	474	711	  Knowledge, Technology, and Policy, 12(3):23–49, 1999.
6	459	741	S. Theußl.   RForgeTools: R-Forge Build and Check
6	459	829	Stefan Theußl
6	459	847	Department of Statistics and Mathematics
6	459	865	WU Wirtschaftsuniversität Wien
6	459	883	Austria
6	459	937	Achim Zeileis
6	459	954	Department of Statistics and Mathematics
6	459	972	WU Wirtschaftsuniversität Wien
6	459	990	Austria