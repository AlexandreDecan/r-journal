page	left	top	code
1	149	1043	> install.packages("Peptides")
1	149	1060	> library(Peptides)
2	149	226	> lengthpep(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC")
2	149	256	[1] 27
2	149	422	> mw(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC")
2	149	452	[1] 2897.787
2	149	936	> aacomp(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC")
2	217	966	          Number Mole%
2	149	982	Tiny            9 33.333
2	149	999	Small          12 44.444
2	149	1015	Aliphatic      9 33.333
2	149	1031	Aromatic       0 0.000
2	149	1048	NonPolar      18 66.667
2	149	1064	Polar           9 33.333
2	149	1081	Charged         9 33.333
2	149	1097	Basic           9 33.333
2	149	1114	Acidic          0 0.000
3	149	366	> charge(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC", pH = 7, pKscale = "EMBOSS")
3	149	394	[1] 8.85201
3	149	612	> pI(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC", pKscale = "EMBOSS")
3	149	639	[1] 10.801
3	149	878	> aindex(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC")
3	149	906	[1] 104.8148
4	149	100	> instaindex(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC")
4	149	130	[1] 2.237037
4	149	403	> boman(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC")
4	149	432	[1] 0.5259259
4	149	752	> hydrophobicity(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC", scale = "Eisenberg")
4	149	782	[1] -0.08777778
4	149	1033	> hmoment(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC", angle = 100, window = 11)
4	149	1063	[1] 0.6170697
4	149	1092	> hmoment(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC", angle = 160, window = 11)
4	149	1122	[1] 0.4617153
5	149	206	> membpos(seq = "GLPRKILCAIAKKKGKCKGPLKLVCKC", angle = 100)
5	224	235	           Pep      H    uH MembPos
5	149	251	1 GLPRKILCAIA 0.271 0.469 Surface
5	149	268	2 LPRKILCAIAK 0.091 0.617 Surface
5	149	284	3 PRKILCAIAKK -0.142 0.520 Globular
5	149	300	4 RKILCAIAKKK -0.289 0.401 Globular
5	149	317	5 KILCAIAKKKG -0.015 0.325 Globular
5	149	333	6 ILCAIAKKKGK -0.015 0.319 Globular
5	149	350	7 LCAIAKKKGKC -0.115 0.339 Globular
5	149	366	8 CAIAKKKGKCK -0.347 0.115 Globular
5	149	383	9 AIAKKKGKCKG -0.330 0.096 Globular
5	149	399	10 IAKKKGKCKGP -0.375 0.141 Globular
5	149	416	11 AKKKGKCKGPL -0.405 0.161 Globular
5	149	432	12 KKKGKCKGPLK -0.597 0.110 Globular
5	149	448	13 KKGKCKGPLKL -0.365 0.156 Globular
5	149	465	14 KGKCKGPLKLV -0.130 0.310 Globular
5	149	481	15 GKCKGPLKLVC 0.033 0.257 Globular
5	149	498	16 KCKGPLKLVCK -0.147 0.426 Globular
5	149	514	17 CKGPLKLVCKC 0.015 0.487 Globular
5	149	771	plot.xvg were incorporated. An example of how to read and plot the absolute distance between the
5	149	830	> file <- system.file(file = file.path("xvg-files", "POPG.xvg"),
5	149	846	+                     package = "Peptides")
5	149	863	> md <- read.xvg(file)
5	149	879	> head(md)
5	163	908	   Time (ps)      |d|    d\\sx\\N   d\\sy\\N d\\sz\\N
5	149	925	1         0 3.476546 -0.2250402 -0.3378360 -3.452766
5	149	941	2         3 3.447776 -0.2403412 -0.4272313 -3.412751
5	149	958	3         6 3.459584 -0.2213712 -0.3733103 -3.432252
5	149	974	4         9 3.391920 -0.2328529 -0.3787930 -3.362650
5	149	990	5        12 3.403695 -0.1856968 -0.2425249 -3.389962
5	149	1019	> file <- system.file(file.path("xvg-files", "POPG.xvg"), package = "Peptides")
5	149	1036	> plot.xvg(file)
6	149	515	> install.packages("caret", dependencies = TRUE)
6	149	531	> library(Peptides)
6	149	548	> library(caret)
6	149	594	data.frame with 100 observations and 23 variables called pepdata. It includes the physicochemical
6	149	673	> data(pepdata)
6	149	690	> str(pepdata)
6	149	719	'data.frame': 100 obs. of 23 variables:
6	156	736	  $ sequence      : chr "DAEFRHDSGYEVHHQKLVFFAEDVGSNK" "SLDRSSCFTGSLDSIRAQSGLGCNSFRY" ...
6	156	752	  $ group         : Factor w/ 2 levels "0","1": 1 1 1 1 1 1 1 1 1 1 ...
6	156	769	  $ length        : int 28 28 30 22 25 28 30 25 31 26 ...
6	156	785	  $ mw             : num 3263 3028 3275 2747 2903 ...
6	156	802	  $ tinyAA        : num 21.4 50 40 13.6 24 ...
6	156	818	  $ smallAA       : num 46.4 60.7 56.7 27.3 44 ...
6	156	835	  $ aliphaticAA   : num 21.4 17.9 16.7 36.4 28 ...
6	156	851	  $ aromaticAA    : num 25 10.71 3.33 18.18 12 ...
6	156	867	  $ nonpolarAA    : num 42.9 46.4 46.7 54.5 56 ...
6	156	884	  $ polarAA       : num 57.1 53.6 53.3 45.5 44 ...
6	156	900	  $ chargedAA     : num 42.9 17.9 26.7 27.3 28 ...
6	156	917	  $ basicAA       : num 21.4 10.7 20 22.7 16 ...
6	156	933	  $ acidicAA      : num 21.43 7.14 6.67 4.54 12 ...
6	156	950	  $ charge        : num -2.97 0.742 3.741 1.936 0.762 ...
6	156	966	  $ pI             : num 5.43 8.22 10.05 11.05 9.03 ...
6	156	983	  $ aindex        : num 52.1 59.3 48.7 119.5 89.6 ...
6	156	999	  $ instaindex    : num 26.9 58 45.5 52.8 45.1 ...
6	156	1015	  $ boman         : num 2.65 2.43 2.22 1.77 1.84 ...
6	156	1032	  $ hydrophobicity: num -0.9 -0.286 -0.62 -0.145 -0.372 -0.004 -0.23 0.536 0.477 0.754 ...
6	156	1048	  $ hmoment       : num 0.392 0.407 0.46 0.533 0.373 0.603 0.483 0.643 0.264 0.38 ...
6	156	1065	  $ transmembrane : num 0 0 0 0 0 0 0 0.067 0.095 0.188 ...
6	156	1081	  $ globular      : num 1 1 1 1 1 1 0.8 0.733 0.905 0.688 ...
6	156	1098	  $ surface       : num 0 0 0 0 0 0 0.2 0.2 0 0.125 ...
7	149	100	> set.seed(2014)
7	149	116	> inTrain <- createDataPartition(y = pepdata$group, p = 0.8, list = FALSE)
7	149	133	> training <- pepdata[ inTrain, 2:23]
7	149	149	> testing <- pepdata[-inTrain, 2:23]
7	149	219	> folds <- 10
7	149	236	> repeats <- 10
7	149	252	> fitControl <- trainControl(method = "repeatedcv",
7	149	269	+                            number = folds,
7	149	285	+                            repeats = repeats,
7	149	301	+                            classProbs = TRUE,
7	149	318	+                            allowParallel = TRUE,
7	149	334	+                            summaryFunction = twoClassSummary)
7	149	351	> train.rpart <- train(group~., data = training,
7	149	367	+                       method = "rpart",
7	149	384	+                       metric = "ROC",
7	149	400	+                       tuneLength = 10,
7	149	417	+                       trControl = fitControl)
7	149	433	> train.rpart
7	149	463	CART
7	149	496	80 samples
7	149	512	21 predictors
7	156	529	  2 classes: '0', '1'
7	149	561	No pre-processing
7	149	578	Resampling: Cross-Validated (10 fold, repeated 10 times)
7	149	611	Summary of sample sizes: 72, 72, 72, 72, 72, 72, ...
7	149	644	Resampling results across tuning parameters:
7	163	677	  cp          ROC        Sens    Spec    ROC SD     Sens SD    Spec SD
7	163	693	  0.00000000 0.8321875 0.8075 0.7525 0.1327056 0.1875379 0.2117001
7	163	709	  0.07222222 0.7862500 0.7525 0.7700 0.1664132 0.2056494 0.2294041
7	163	726	  0.14444444 0.7462500 0.6450 0.8850 0.1847590 0.2414707 0.2023224
7	163	742	  0.21666667 0.7475000 0.6450 0.9000 0.1854731 0.2414707 0.1946247
7	163	759	  0.28888889 0.7475000 0.6450 0.9000 0.1854731 0.2414707 0.1946247
7	163	775	  0.36111111 0.7475000 0.6450 0.9000 0.1854731 0.2414707 0.1946247
7	163	792	  0.43333333 0.7475000 0.6450 0.9000 0.1854731 0.2414707 0.1946247
7	163	808	  0.50555556 0.7475000 0.6450 0.9000 0.1854731 0.2414707 0.1946247
7	163	825	  0.57777778 0.7475000 0.6450 0.9000 0.1854731 0.2414707 0.1946247
7	163	841	  0.65000000 0.5550000 0.7650 0.3800 0.1128152 0.2926283 0.4570989
7	149	874	ROC was used to select the optimal model using the largest value.
7	149	890	The final value used for the model was cp = 0.
7	149	920	> plot(train.rpart)
7	149	977	> pred.rpart <- predict(train.rpart, newdata = testing)
7	149	993	> pred.rpart
7	156	1023	  [1] 1 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1
7	149	1040	Levels: 0 1
7	149	1113	> confusionMatrix(data = pred.rpart, testing$group, positive = "1")
8	149	442	Confusion Matrix and Statistics
8	217	475	          Reference
8	149	491	Prediction 0 1
8	211	508	          0 9 2
8	211	524	          1 1 8
8	252	557	                Accuracy : 0.85
8	265	574	                 95% CI : (0.6211, 0.9679)
8	176	590	    No Information Rate : 0.5
8	176	607	    P-Value [Acc > NIR] : 0.001288
8	272	639	                   Kappa : 0.7
8	156	656	  Mcnemar's Test P-Value : 1.000000
8	231	689	            Sensitivity : 0.8000
8	231	705	            Specificity : 0.9000
8	211	722	          Pos Pred Value : 0.8889
8	211	738	          Neg Pred Value : 0.8182
8	238	755	              Prevalence : 0.5000
8	211	771	          Detection Rate : 0.4000
8	169	787	   Detection Prevalence : 0.4500
8	190	804	      Balanced Accuracy : 0.8500
8	197	837	        'Positive' Class : 1
8	149	867	> tree <- train.rpart$finalModel
8	149	883	> plot(tree, compress = TRUE, margin = c(0.1, 0.1, 0.1, 0.1), cex = 0.5)
8	149	899	> text(tree)
8	149	994	> train.lda <- train(group~., data = training,
8	149	1010	+                    method = "lda",
8	149	1026	+                    metric = "ROC",
8	149	1043	+                    tuneLength = 10,
8	149	1059	+                    trControl = fitControl)
8	149	1076	> train.lda
8	149	1106	Linear Discriminant Analysis
8	149	1139	80 samples
9	149	100	21 predictors
9	156	116	  2 classes: '0', '1'
9	149	149	No pre-processing
9	149	165	Resampling: Cross-Validated (10 fold, repeated 10 times)
9	149	198	Summary of sample sizes: 72, 72, 72, 72, 72, 72, ...
9	149	231	Resampling results
9	163	264	  ROC       Sens Spec ROC SD     Sens SD    Spec SD
9	163	281	  0.821875 0.78 0.8   0.1534471 0.2169578 0.1978419
9	149	309	> pred.lda <- predict(train.lda, newdata = testing)
9	149	325	> pred.lda
9	156	353	  [1] 0 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1
9	149	370	Levels: 0 1
9	149	440	> confusionMatrix(data = pred.lda, testing$group,positive = "1")
9	149	468	Confusion Matrix and Statistics
9	217	501	          Reference
9	149	517	Prediction 0 1
9	211	533	       0 9 0
9	211	550	        1 1 10
9	252	583	                Accuracy : 0.95
9	265	599	                 95% CI : (0.7513, 0.9987)
9	176	616	    No Information Rate : 0.5
9	176	632	    P-Value [Acc > NIR] : 2.003e-05
9	272	665	                   Kappa : 0.9
9	156	681	  Mcnemar's Test P-Value : 1
9	231	714	            Sensitivity : 1.0000
9	231	731	            Specificity : 0.9000
9	211	747	          Pos Pred Value : 0.9091
9	211	764	          Neg Pred Value : 1.0000
9	238	780	              Prevalence : 0.5000
9	211	796	          Detection Rate : 0.5000
9	169	813	   Detection Prevalence : 0.5500
9	190	829	      Balanced Accuracy : 0.9500
9	197	862	        'Positive' Class : 1