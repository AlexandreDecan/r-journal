page	left	top	code
2	607	257	eblupSFH considers the
2	149	339	pbmseSFH() and npbmseSFH() respectively.
2	451	393	eblupSTFH() includes time effects nested within
2	149	426	pbmseSTFH() gives small area estimates and parametric bootstrap MSE estimates.
2	413	496	pbmseBHF().
2	149	550	ebBHF(). Function pbmseebBHF() gives the corresponding parametric bootstrap MSE estimates.
3	579	374	eblupFH(), eblupSFH() and
3	149	391	eblupSTFH(). Functions for unit-level data are eblupBHF() and ebBHF(). Functions for estimation of
4	149	721	eblupFH(formula, vardir, method = "REML", MAXITER = 100, PRECISION = 0.0001, data)
4	149	737	mseFH(formula, vardir, method = "REML", MAXITER = 100, PRECISION = 0.0001, data)
4	567	781	formula and the desired area
4	507	797	formula automatically adds an intercept
4	633	846	direct() included
4	655	879	method) is REML
4	149	929	data, can be used to specify a data object that contains the variables in formula and vardir as columns.
5	149	116	yi with the average expenditure on fresh milk for the year 1989 (direct estimates), SD with the
5	464	133	CV with the estimated coefficients of variation
5	149	274	> data("milk")
5	149	290	> attach(milk)
5	149	306	> FH <- mseFH(yi ~ as.factor(MajorArea), SD^2)
5	149	323	> cv.FH <- 100 * sqrt(FH$mse) / FH$est$eblup
5	149	339	> results <- data.frame(Area = SmallArea, SampleSize = ni, DIR = yi,
5	149	356	+ cv.DIR = 100 * CV, eblup.FH = FH$est$eblup, cv.FH)
5	149	372	> detach(milk)
5	149	460	> results <- results[order(results$SampleSize, decreasing = TRUE), ]
5	149	476	> # Figure 1 left
5	149	493	> plot(results$DIR, type = "n", ylab = "Estimate", ylim = c(0.4, 1.6),
5	149	509	+ xlab = "area (sorted by decreasing sample size)", cex.axis = 1.5,
5	149	526	+ cex.lab = 1.5)
5	149	542	> points(results$DIR, type = "b", col = 1, lwd = 2, pch = 1, lty = 1)
5	149	559	> points(results$eblup.FH, type = "b", col = 4, lwd = 2, pch = 4, lty = 2)
5	149	575	> legend("top", legend = c("Direct", "EBLUP FH"), ncol = 2, col = c(1, 4), lwd = 2,
5	149	592	+ pch = c(1, 4), lty = c(1, 2), cex = 1.3)
5	149	608	> plot(results$cv.DIR, type = "n", ylab = "CV", ylim = c(5, 40),
5	149	624	+ xlab = "area (sorted by decreasing sample size)", cex.axis = 1.5,
5	149	641	+ cex.lab = 1.5)
5	149	657	> points(results$cv.DIR, type = "b", col = 1, lwd = 2, pch = 1, lty = 1)
5	149	674	> points(results$cv.FH, type = "b", col = 4, lwd = 2, pch = 4, lty = 2)
5	149	690	> legend("top", legend = c("Direct", "EBLUP FH"), ncol = 2, col = c(1, 4), lwd = 2,
5	149	707	+ pch = c(1, 4), lty = c(1, 2), cex = 1.3)
5	674	1144	eblupSFH().
6	149	570	eblupSFH(formula, vardir, proxmat, method = "REML", MAXITER = 100, PRECISION = 0.0001,
6	211	587	data)
6	149	603	mseSFH(formula, vardir, proxmat, method = "REML", MAXITER = 100, PRECISION = 0.0001,
6	197	619	data)
6	149	636	pbmseSFH(formula, vardir, proxmat, B = 100, method = "REML", MAXITER = 100,
6	211	652	PRECISION = 0.0001, data)
6	149	669	npbmseSFH(formula, vardir, proxmat, B = 100, method = "REML", MAXITER = 100,
6	217	685	PRECISION = 0.0001, data)
6	569	727	proxmat), whose elements are
6	149	793	B is required. By default B is set to 100 to save computing time but we strongly recommend to set B
6	502	826	set.seed(). The fitting method (method)
6	612	949	area, agrarian surface
6	633	998	area and workdays
6	600	1015	grapesprox contains the
6	149	1111	> data("grapes")
6	149	1127	> data("grapesprox")
6	149	1144	> SFH <- mseSFH(grapehect ~ area + workdays - 1, var, grapesprox, data = grapes)
7	149	448	> cv.SFH <- 100 * sqrt(SFH$mse) / SFH$est$eblup
7	149	464	> results <- data.frame(DIR = grapes$grapehect,
7	149	481	+ cv.DIR = 100 * abs(sqrt(grapes$var) / grapes$grapehect),
7	149	497	+ eblup.SFH = SFH$est$eblup, cv.SFH)
7	149	654	> # Sort results by increasing CV of direct estimators
7	149	670	> results <- results[order(results$cv.DIR), ]
7	149	687	> # Figure 2 left
7	149	703	> plot(results$DIR, type = "n", ylab = "Estimate", ylim = c(0, 400),
7	149	720	+ xlab = "area (sorted by increasing CVs of direct estimators)", cex.axis = 1.5,
7	149	736	+ cex.lab = 1.5)
7	149	753	> points(results$DIR, type = "p", col = 1, lwd = 2, pch = 1)
7	149	769	> points(results$eblup.SFH, type = "p", col = 4, lwd = 2, pch = 4)
7	149	786	> legend("top", legend = c("Direct", "EBLUP SFH"), ncol = 2, col = c(1, 4), lwd = 2,
7	149	802	+ pch = c(1, 4), cex = 1.3)
7	149	818	> # Figure 2 right
7	149	835	> plot(results$cv.DIR, type = "n", ylab = "CV", ylim = c(0, 400),
7	149	851	+ xlab = "area (sorted by increasing CVs of direct estimators)", cex.axis = 1.5,
7	149	868	+ cex.lab = 1.5)
7	149	884	> points(results$cv.DIR, type = "p", col = 1, lwd = 2, pch = 1)
7	149	901	> points(results$cv.SFH, type = "p", col = 4, lwd = 2, pch = 4)
7	149	917	> legend("top", legend = c("Direct", "EBLUP SFH"), ncol = 2, col = c(1, 4), lwd = 2,
7	149	933	+ pch = c(1, 4), cex = 1.3)
8	462	260	eblupSTFH() and pbmseSTFH() respectively. The
8	149	303	eblupSTFH(formula, D, T, vardir, proxmat, model = "ST", MAXITER = 100,
8	217	319	PRECISION = 0.0001, data)
8	149	336	pbmseSTFH(formula, D, T, vardir, proxmat, B = 100, model = "ST", MAXITER = 100,
8	217	352	PRECISION = 0.0001, data)
8	617	412	D and the number of
8	568	461	model can be chosen between
8	651	494	B=200 bootstrap
8	684	618	Area, area
8	463	650	Var, sampling variances of the direct estimators.
8	408	683	spacetimeprox, together with parametric bootstrap MSE
8	149	730	> data("spacetime")
8	149	746	> data("spacetimeprox")
8	149	762	> D <- nrow(spacetimeprox)
8	430	762	# number of areas
8	149	779	> T <- length(unique(spacetime$Time))
8	430	779	# number of time periods
8	149	795	> set.seed(123)
8	149	812	> STFH <- pbmseSTFH(Y ~ X1 + X2, D, T, vardir = Var, spacetimeprox, data = spacetime)
8	149	845	Bootstrap procedure with B = 100 iterations starts.
8	149	861	b = 1
8	149	878	...
8	149	894	b = 100
8	149	924	> # Compute CVs for the EBLUPs based on the STFH model and for the direct estimators
8	149	940	> cv.STFH <- 100 * sqrt(STFH$mse) / STFH$est$eblup
8	149	957	> cv.DIR <- 100 * sqrt(spacetime$Var) / spacetime$Y
8	149	973	> results <- data.frame(Area = spacetime$Area, Time = spacetime$Time,
8	149	990	+ DIR = spacetime$Y, eblup.STFH = STFH$est$eblup,
8	149	1006	+ cv.DIR, cv.STFH)
8	149	1022	> results.lasttime <- results[results$Time == 3, ]
8	149	1039	> print(results.lasttime, row.names = FALSE)
8	156	1072	Area Time DIR eblup.STFH
8	382	1072	cv.DIR cv.STFH
8	176	1088	2 3 0.261484 0.27343181 10.944523 7.653997
8	176	1105	3 3 0.175358 0.17722992 7.777336 7.026746
8	176	1121	8 3 0.096230 0.09653879 6.059391 5.567674
8	169	1138	12 3 0.122160 0.13740348 21.904205 14.798918
9	169	448	13 3 0.294176 0.29129477 8.812059 6.657347
9	169	464	16 3 0.412106 0.31887378 13.584403 9.224897
9	169	481	17 3 0.057924 0.06912566 25.195980 20.314774
9	169	497	25 3 0.209146 0.17377084 15.411972 12.225196
9	169	514	43 3 0.148671 0.14398844 15.788815 14.700855
9	169	530	45 3 0.234361 0.22810227 9.550663 8.303303
9	169	546	46 3 0.137869 0.14354272 8.853735 8.355827
9	149	690	> results.lasttime <- results.lasttime[order(results.lasttime$cv.DIR), ]
9	149	706	> # Figure 3 left
9	149	723	> plot(results.lasttime$DIR, type = "n", xlab = "area (time=3)", ylab = "Estimate",
9	149	739	+ ylim = c(0.05, 0.45), cex.axis = 1.5, cex.lab = 1.5, xaxt = "n")
9	149	756	> axis(1, 1:11, results.lasttime$Area, cex.axis = 1.5)
9	149	772	> points(results.lasttime$DIR, type = "b", col = 1, lwd = 2, pch = 1, lty = 1)
9	149	789	> points(results.lasttime$eblup.STFH, type = "b", col = 4, lwd = 2, pch = 4, lty = 2)
9	149	805	> legend("top", legend = c("Direct", "EBLUP STFH"), ncol = 2, col = c(1, 4), lwd = 2,
9	149	821	+ pch = c(1, 4), lty = c(1, 2), cex = 1.3)
9	149	838	> # Figure 3 right
9	149	854	> plot(results.lasttime$cv.DIR, type = "n", xlab = "area (time=3)", ylab = "CV",
9	149	871	+ cex.axis = 1.5, cex.lab = 1.5, xaxt = "n")
9	149	887	> axis(1, 1:11, results.lasttime$Area, cex.axis = 1.5)
9	149	904	> points(results.lasttime$cv.DIR, type = "b", col = 1, lwd = 2, pch = 1, lty = 1)
9	149	920	> points(results.lasttime$cv.STFH, type = "b", col = 4, lwd = 2, pch = 4, lty = 2)
9	149	936	> legend("top", legend = c("Direct", "EBLUP STFH"), ncol = 2, col = c(1, 4), lwd = 2,
9	149	953	+ pch = c(1, 4), lty = c(1, 2), cex = 1.3)
10	149	590	eblupBHF(formula, dom, selectdom, meanxpop, popnsize, method = "REML", data)
10	149	606	pbmseBHF(formula, dom, selectdom, meanxpop, popnsize, B = 200, method = "REML", data)
10	597	631	formula and the variable
10	629	648	dom. The variables
10	518	714	meanxpop) and the population sizes of
10	556	779	selectdom without observations
10	149	975	cornsoybean contains the values of the following variables for each sample segment within each
10	434	1127	cornsoybeanmeans. Concretely, this data set contains:
10	149	1144	SampSegments, number of sample segments in the county (sample size), PopnSegments, number of
11	460	100	MeanCornPixPerSeg, county mean of the number
11	149	186	cornsoybeanmeans. We also create the data frame Popn containing the county population sizes. In
11	684	236	Xmean and
11	149	252	Popn) are arranged differently:
11	149	278	> data("cornsoybeanmeans")
11	149	295	> Xmean <- data.frame(cornsoybeanmeans[, c("CountyIndex", "MeanCornPixPerSeg",
11	149	311	+
11	444	311	"MeanSoyBeansPixPerSeg")])
11	149	328	> Popn <- data.frame(cornsoybeanmeans[, c("CountyIndex", "PopnSegments")])
11	488	370	pbmseBHF(), which gives the EBLUPs of the
11	591	387	B=200 bootstrap replicates.
11	149	450	> data("cornsoybean")
11	149	467	> cornsoybean <- cornsoybean[-33, ]
11	149	483	> set.seed(123)
11	149	500	> BHF <- pbmseBHF(CornHec ~ CornPix + SoyBeansPix, dom = County, meanxpop = Xmean,
11	149	516	+ popnsize = Popn, B = 200, data = cornsoybean)
11	149	532	Bootstrap procedure with B = 200 iterations starts.
11	149	549	b = 1
11	149	565	...
11	149	582	b = 200
11	149	651	> cv.BHF <- 100 * sqrt(BHF$mse$mse) / BHF$est$eblup$eblup
11	149	667	> results <- data.frame(CountyIndex = BHF$est$eblup$domain,
11	149	684	+ CountyName = cornsoybeanmeans$CountyName,
11	149	700	+ SampleSize = BHF$est$eblup$sampsize,
11	149	716	+ eblup.BHF = BHF$est$eblup$eblup, cv.BHF)
11	149	733	> print(results, row.names = FALSE)
11	156	749	CountyIndex CountyName SampleSize eblup.BHF
11	471	749	cv.BHF
11	224	766	1 CerroGordo
11	375	766	1 122.1954 8.066110
11	224	782	2 Hamilton
11	375	782	1 126.2280 7.825271
11	224	799	3 Worth
11	375	799	1 106.6638 9.333344
11	224	815	4 Humboldt
11	375	815	2 108.4222 7.598736
11	224	831	5 Franklin
11	375	831	3 144.3072 4.875002
11	224	848	6 Pocahontas
11	375	848	3 112.1586 6.020232
11	224	864	7 Winnebago
11	375	864	3 112.7801 5.951520
11	224	881	8 Wright
11	375	881	3 122.0020 5.700670
11	224	897	9 Webster
11	375	897	4 115.3438 4.808813
11	217	914	10 Hancock
11	375	914	5 124.4144 4.495448
11	217	930	11 Kossuth
11	375	930	5 106.8883 4.532518
11	217	947	12 Hardin
11	375	947	5 143.0312 3.504340
13	149	291	ebBHF(formula, dom, selectdom, Xnonsample, MC = 100, data, transform = "BoxCox",
13	190	307	lambda = 0, constant = 0, indicator)
13	149	324	pbmseebBHF(formula, dom, selectdom, Xnonsample, B = 100, MC = 100, data,
13	224	340	transform = "BoxCox", lambda = 0, constant = 0, indicator)
13	149	416	constant and the power is specified in lambda. This parameter is by default set to 0, which corresponds
13	423	433	lambda equal to 1 and letting the default constant equal
13	388	466	indicator, we must provide the name of the R function that
13	149	515	indicator=median regardless of the transformation taken.
13	377	585	NA values in formula or dom. They also deliver EB estimates for
13	511	602	selectdom without any observations in
13	149	618	formula, as long as the values of the auxiliary variables for all the units in these areas are included in
13	533	695	fit, and contains a summary of the
13	569	728	est, is another list containing
13	507	744	eb) and a summary of the fitting process
13	461	954	provlab), province code (prov), income (income),
13	149	1024	income. Note that the EB method assumes that the response variable considered in BHF model is
13	543	1041	income appears to be highly right-
13	641	1090	income. For each
14	149	208	> povertyincidence <- function(y) {
14	149	225	+ result <- mean(y < 6557.143)
14	149	241	+ return (result)
14	149	258	+ }
14	478	403	provincecodes with province codes for the
14	149	463	> data("incomedata")
14	149	479	> data("Xoutsamp")
14	149	496	> provincecodes <- unique(Xoutsamp$domain)
14	149	512	> provincelabels <- unique(incomedata$provlab)[provincecodes]
14	149	528	> Xoutsamp_AuxVar <- Xoutsamp[ ,c("domain", "educ1", "educ3", "labor1", "labor2")]
14	149	631	> set.seed(123)
14	149	647	> EB <- ebBHF(income ~ educ1 + educ3 + labor1 + labor2, dom = prov,
14	149	663	+ selectdom = provincecodes, Xnonsample = Xoutsamp_AuxVar, MC = 50,
14	149	680	+ constant = 3500, indicator = povertyincidence, data = incomedata)
14	149	749	> EB$fit$summary
14	149	765	Linear mixed-effects model fit by REML
14	156	782	Data: NULL
14	197	798	AIC BIC logLik
14	163	815	18980.72 19034.99 -9483.361
14	149	848	Random effects:
14	156	864	Formula: ~1 | as.factor(dom)
14	204	880	(Intercept) Residual
14	149	897	StdDev: 0.09436138 0.4179426
14	149	930	Fixed effects: ys ~ -1 + Xs
14	272	946	Value Std.Error
14	416	946	DF t-value p-value
14	149	963	Xs(Intercept) 9.505176 0.014384770 17143 660.7805
14	540	963	0
14	149	979	Xseduc1 -0.124043 0.007281270 17143 -17.0359
14	540	979	0
14	149	996	Xseduc3 0.291927 0.010366323 17143 28.1611
14	540	996	0
14	149	1012	Xslabor1 0.145985 0.006915979 17143 21.1084
14	540	1012	0
14	149	1028	Xslabor2 -0.081624 0.017082634 17143 -4.7782
14	540	1028	0
14	156	1045	Correlation:
14	211	1061	Xs(In) Xsedc1 Xsedc3 Xslbr1
14	149	1078	Xseduc1 -0.212
14	149	1094	Xseduc3 -0.070 0.206
14	149	1111	Xslabor1 -0.199 0.128 -0.228
14	149	1127	Xslabor2 -0.079 0.039 -0.039 0.168
15	149	445	Standardized Within-Group Residuals:
15	197	461	Min Q1 Med
15	430	461	Q3 Max
15	149	478	-4.2201202 -0.6617181 0.0203607 0.6881828 3.5797393
15	149	511	Number of Observations: 17199
15	149	527	Number of Groups: 52
15	149	630	# Figure 4 left
15	149	647	> plot(EB$fit$residuals, xlab = "Index", ylab = "Residuals", cex.axis = 1.5,
15	197	663	cex.lab = 1.5, ylim = c(-2, 2), col = 4)
15	149	679	> abline(h = 0)
15	149	712	> # Figure 4 right
15	149	729	> hist(EB$fit$residuals, prob = TRUE, xlab = "Residuals", ylab = "", main = "",
15	149	745	+ cex.axis = 1.5, cex.lab = 1.5, xlim = c(-2, 2), ylim = c(0, 1))
15	690	809	B and MC
15	627	826	pbmseebBHF() gives
15	149	869	> set.seed(123)
15	149	886	> pbmse.EB <- pbmseebBHF(income ~ educ1 + educ3 + labor1 + labor2, dom = prov,
15	149	902	+ selectdom = provincecodes, Xnonsample = Xoutsamp_AuxVar,
15	149	918	+ B = 200, MC = 50, constant = 3500,
15	149	935	+ indicator = povertyincidence, data = incomedata)
15	149	951	Bootstrap procedure with B = 200 iterations starts.
15	149	968	b = 1
15	149	984	...
15	149	1001	b = 200
15	149	1017	> pbcv.EB <- 100 * sqrt(pbmse.EB$mse$mse) / abs(pbmse.EB$est$eb$eb) # compute CV
15	149	1087	> results.EB <- data.frame(ProvinceIndex = pbmse.EB$est$eb$domain,
15	149	1104	+ ProvinceName = provincelabels,
15	149	1120	+ SampleSize = pbmse.EB$est$eb$sampsize,
15	149	1137	+ EB = pbmse.EB$est$eb$eb, cv.EB = pbcv.EB)
16	149	100	> results.EB
16	163	116	ProvinceIndex ProvinceName SampleSize
16	471	116	EB cv.EB
16	149	133	1 42 Soria
16	403	133	20 0.2104329 21.06776
16	149	149	2 5 Avila
16	403	149	58 0.1749877 19.49466
16	149	165	3 34 Palencia
16	403	165	72 0.2329916 11.57829
16	149	182	4 44 Teruel
16	403	182	72 0.2786618 11.89621
16	149	198	5 40 Segovia
16	403	198	58 0.2627178 13.21378
16	517	723	MIXED, IML and hierarchical Bayes MCMC,