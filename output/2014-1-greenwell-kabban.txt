page	left	top	code
1	149	635	calibrate operates on objects of class "lm" and can only be used when the expectation function
2	149	652	library(investr)
2	149	669	mod <- lm(measured ~ actual, data = arsenic)
2	149	685	(res <- calibrate(mod, y0 = 3, interval = "inversion", level = 0.9))
2	149	718	## Figure 1
2	149	735	plotFit(mod, interval = "prediction", level = 0.9, shade = TRUE, col.pred = "skyblue")
2	149	751	abline(h = 3, v = c(res$lower, res$estimate, res$upper), lty = 2)
2	149	805	estimate    lower     upper
2	163	821	   2.9314   2.6035    3.2587
2	149	924	calibrate(mod, y0 = c(3.17, 3.09, 3.16), interval = "inversion", level = 0.9)
2	149	1011	calibrate(badfit, y0 = 10, level = 0.9)
2	149	1065	Error: The calibration line is not well determined. The resulting
2	149	1081	confidence region is the union of two semi-infinite intervals:
2	149	1098	( -Inf , -282.0006 ) U ( 393.1267 , Inf)
3	149	735	estimate    lower     upper
3	149	751	-97.5987     -Inf       Inf
3	149	768	Warning message:
3	149	784	The calibration line is not well determined.
4	149	100	calibrate(mod, y0 = 3, interval = "Wald", level = 0.9)
4	149	151	estimate    lower     upper       se
4	163	167	   2.9314   2.6040    3.2589    0.1929
4	149	851	mod <- lm(weight ~ time, data = crystal)
4	149	868	(res <- calibrate(mod, y0 = 8, mean.response = TRUE))
4	149	901	## Figure 3
4	149	917	plotFit(mod, interval = "confidence", pch = 19, shade = TRUE, col.conf = "plum",
4	204	933	         extend.range = TRUE)
4	149	950	abline(h = 8, v = c(res$lower, res$estimate, res$upper), lty = 2)
4	149	1001	estimate    lower     upper
4	156	1017	 15.8882 14.6590 17.1596
4	149	1118	calibrate(mod, y0 = c(8, 9), mean.response = TRUE)
5	149	502	Error in calibrate.default(cbind(x, y), ...) :
5	163	519	   Only one mean response value allowed.
5	149	817	adjust option which can take any of the following arguments: "none" (the default), "bonferroni", or
6	149	785	set.seed(101) # for reproducibility
6	149	801	x <- rep(seq(from = 0, to = 25, by = 2), each = 2)
6	149	818	d <- data.frame(x, y = 5 + x - sin(x) + rnorm(length(x), sd = 1.5))
6	149	834	mod <- lm(y ~ I(x - sin(x)), data = d)
6	149	851	res <- invest(mod, y0 = 22, interval = "Wald")
6	149	884	## Figure 4
6	149	900	plotFit(mod, interval = "prediction", shade = TRUE, col.pred = "seagreen1",
6	204	916	         extend.range = TRUE)
6	149	933	abline(h = 22, v = res$estimate, lty = 2)
6	149	1003	uniroot(function(x) predict(mod, newdata = list("x" = x)) - 22,
6	204	1020	         lower = min(d$x), upper = max(d$x))$root
6	149	1073	## Write x0.hat as function of parameters (theta1.hat, theta2.hat, Y0)
6	149	1090	x0.fun <- function(params, object = mod) {
6	163	1106	   object$coefficients <- params[1:2]
6	163	1123	   uniroot(function(x) predict(object, list("x" = x)) - params[3],
6	217	1139	          lower = 0, upper = 25, tol = 1e-10)$root
7	149	507	}
7	149	540	## Variance-covariance matrix of (theta1.hat, theta2.hat, Y0)'
7	149	557	covmat <- diag(3)
7	149	573	covmat[1:2, 1:2] <- vcov(mod)
7	149	590	covmat[3, 3] <- summary(mod)$sigma^2
7	149	623	## Numerically evaluate gradient
7	149	639	params <- c(coef(mod), y0 = 22)
7	149	655	grad <- attr(numericDeriv(quote(x0.fun(params)), "params"), "gradient")
7	149	688	## Calculate standard error
7	149	705	(se <- sqrt(grad %*% covmat %*% t(grad)))
7	149	915	## Load package containing nasturtium data
7	149	932	library(drc)
7	149	965	## Fit log-logistic model
7	149	981	mod <- nls(weight ~ theta1/(1 + exp(theta2 + theta3 * log(conc))),
7	224	998	           start = list(theta1 = 1000, theta2 = -1, theta3 = 1),
7	224	1014	           data = nasturtium)
7	149	1031	plotFit(mod, interval = "prediction") # figure not shown
7	149	1063	## Compute approximate 95% inversion interval
7	149	1080	invest(mod, y0 = c(309, 296, 419), interval = "inversion")
8	149	223	invest(mod, y0 = c(309, 296, 419), interval = "Wald")
8	149	277	estimate    lower     upper       se
8	163	294	   2.2639   1.6889    2.8388    0.2847
8	149	380	## Using the deltaMethod function in the car package
8	149	397	library(car)
8	149	413	covmat <- diag(4)
8	149	430	covmat[1:3, 1:3] <- vcov(mod)
8	149	446	covmat[4, 4] <- summary(mod)$sigma^2 / 3 # since length(y0) = 3
8	149	462	(se <- deltaMethod(c(coef(mod), y0.bar = mean(c(309, 296, 419))),
8	279	479	                   g = "exp((log(theta1 / y0.bar - 1) - theta2) / theta3)",
8	279	495	                   vcov. = covmat)$SE)
8	149	539	invest.
8	149	858	library(boot)
8	149	891	## Function to compute estimate of x0
8	149	908	x0.fun <- function(object, y) {
8	163	924	   theta <- unname(coef(object))
8	163	941	   exp((log(theta[1] / mean(y) - 1) - theta[2]) / theta[3])
8	149	957	}
8	149	990	## Bootstrap setup
8	149	1006	y0 <- c(309, 296, 419)
8	149	1023	res <- resid(mod) - mean(resid(mod)) # center the residuals
8	149	1039	n <- length(res)
8	149	1056	boot.data <- data.frame(nasturtium, res = res, fit = fitted(mod))
8	149	1072	boot.fun <- function(data, i) {
8	163	1089	   boot.mod <- nls(fit + res[i] ~ theta1 / (1 + exp(theta2 + theta3 * log(conc))),
8	272	1105	                  start = list(theta1 = 1000, theta2 = -1, theta3 = 1), data = data)
8	163	1138	   ## Make sure the original estimate also gets returned
9	163	100	   if (all(i == 1:n)) x0.fun(mod, y0) else x0.fun(boot.mod, y0)
9	149	116	}
9	149	149	## Run bootstrap simulation (takes about 50s on a standard laptop)
9	149	165	set.seed(123) # for reproducibility
9	149	182	res <- boot(boot.data, boot.fun, R = 9999) # collect 9,999 bootstrap samples
9	149	198	boot.ci(res, type = "bca") # obtain BCa confidence interval for x0
9	149	335	invest(mod, y0 = mean(c(309, 296, 419)), mean.response = TRUE)
9	149	515	boot.fun <- function(data, i) {
9	163	531	   boot.mod <- nls(fit + res[i] ~ theta1 / (1 + exp(theta2 + theta3 * log(conc))),
9	272	548	                  start = list(theta1 = 1000, theta2 = -1, theta3 = 1), data = data)
9	163	630	   ## Make sure the original estimate also gets returned
9	147	663	}