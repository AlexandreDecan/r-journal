page	left	top	code
1	148	231	writing files in Unidata NetCDF format, and gives an introduction to the NetCDF file format. NetCDF
1	149	247	is a machine independent binary file format which allows storage of different types of array based
1	149	264	data, along with short metadata descriptions. The package presented here allows access to the most
1	149	280	important functions of the NetCDF C-interface for reading, writing, and modifying NetCDF datasets.
1	149	297	In this paper, we present a short overview on the NetCDF file format and show usage examples of the
1	148	313	package.
1	149	397	NetCDF is a widely used file format in atmospheric and oceanic research – especially for weather and
1	149	413	climate model output – which allows storage of different types of array based data, along with a short
1	149	462	United States National Science Foundation) with the main goal of making best use of atmospheric and
1	171	500	NetCDF files are stored as machine-independent binary data, such that files can be exchanged
1	149	533	binary data format was used. This is the default format for all NetCDF versions and is also named
1	149	566	offset format, which allowed addressing of much larger datasets; version 4.0.0 introduced also the
1	149	582	HDF5 format, in a way that the NetCDF library can use HDF5 as its external format. By default,
1	171	619	One particular advantage of NetCDF over some other binary formats, such as the RData format
1	149	636	used by R, is the ability to access and modify arbitrary sections of array data. This allows massive
1	149	652	datasets to be processed efficiently, even if they are larger than the virtual memory available on a
1	148	669	particular system. To reduce disk space requirements, floating-point values are often packed into 8- or
1	148	685	16-bit integers, and the NetCDF-4 (HDF5) format supports transparent compression using the zlib
1	149	701	library.
1	148	739	write files with 64-bit offset. If RNetCDF is compiled and linked with version 4.0.0 or later of the
1	149	755	NetCDF library, files in NetCDF-4 (HDF5) binary format can be read if they use the data model of
1	149	772	NetCDF-3 or earlier. In this paper we give a short overview of the concept of NetCDF based on
1	149	788	Unidata’s reference manuals, followed by the concept of the package and usage examples.
1	148	906	A NetCDF dataset contains dimensions, variables, and attributes, each identified both by a name and
1	149	923	an ID number. These components can be used together to capture the meaning of data and relations
1	149	939	among data fields in an array-oriented dataset. The NetCDF library allows simultaneous access to
1	149	956	multiple NetCDF datasets which are identified by dataset ID numbers, in addition to ordinary file
1	149	972	names.
1	171	993	A NetCDF dataset contains a symbol table for variables containing their name, data type, rank
1	148	1009	(number of dimensions), dimensions, and starting disk address. Each element is stored at a disk
1	149	1026	address which is a linear function of the array indices (subscripts) by which it is identified. Hence,
1	149	1042	these indices need not be stored separately (as in a relational database). This provides a fast and
1	149	1075	need for the user to take care of the physical representation of multidimensional data on the disk.
2	136	105	Name Length Description Limits
2	148	328	The NetCDF interface defines six primitive external data types – char, byte, short, integer, float,
2	149	361	chosen to provide a reasonably wide range of trade-offs between data precision and number of bits
2	149	377	required for each value. These external data types are independent of whatever internal data types
2	149	393	are supported by a particular machine and language combination. The basic unit of named data in a
2	149	426	list of dimensions. These dimensions must already exist at the time of definition of a variable.
2	148	500	A dimension may be used to represent a real physical dimension, for example, time, latitude, longitude,
2	149	517	or height. A dimension might also be used to index other quantities, for example station or model-run-
2	171	554	A NetCDF dimension has both a name and a length, where the dimension length is an arbitrary
2	148	570	positive integer starting at 1. One dimension in a NetCDF dataset can be of unlimited length. Such a
2	149	587	dimension is called the unlimited dimension or the record dimension. A variable with an unlimited
2	149	603	dimension can grow to any length along that dimension. The unlimited dimension index is like a
2	149	620	record number in conventional record-oriented files. A NetCDF dataset can have at most one unlimited
2	149	636	dimension, but need not have any. If a variable has an unlimited dimension, that dimension must be
2	149	653	the most significant (slowest changing) one.
2	148	727	Variables are used to store the bulk of the data in a NetCDF dataset. A variable represents an array of
2	148	743	values of the same type. A scalar value is treated as a 0-dimensional array. A variable has a name,
2	149	759	a data type, and a shape described by its list of dimensions specified when the variable is created.
2	148	776	A variable may also have associated attributes, which may be added, deleted or changed after the
2	149	809	only growing along the unlimited dimension is possible. Missing values (NA) have no internal
2	149	825	representation. For this purpose, a respective attribute has to be defined for each variable. Most
2	149	842	applications (including RNetCDF) accept the names ‘_FillValue’ and ‘missing_value’, although the
2	149	858	latter is deprecated and should not be used when creating new datasets.
2	149	932	NetCDF does not have a primitive string type, but does have arrays of type char, each of which is
2	149	948	8 bits in size. The main difference is that strings are arrays of chars of variable length, while char
2	149	981	names), internal routines read char arrays and convert them to strings without requiring the user to
2	149	998	deal with trailing zeroes or padding. The zero-byte termination of strings is done automatically, and
2	149	1014	the user only needs to ensure that the fastest varying dimension (often named ‘max_string_length’) is
2	149	1031	long enough to contain the terminating zero-byte, i.e., max(nchar(my_strings))+1 where my_strings
2	149	1047	is the data to be written.
2	149	1121	NetCDF attributes are used to store metadata, similar in many ways to the information stored in data
2	149	1137	dictionaries and schema in conventional database systems. Most attributes provide information about
3	149	103	a specific variable. These are identified by the name (or ID) of that variable, together with the name of
3	149	120	the attribute. An attribute has an associated variable (the null variable for global attributes), a name,
3	149	152	datasets assume standard attribute conventions (see below) and it is strongly recommended that these
3	149	169	be followed unless there are good reasons for not doing so.
3	148	243	There are almost no restrictions on how a NetCDF dataset should be named and structured. However,
3	149	275	and it is highly recommended to follow at least the basic practice to ensure portability and self-
3	149	292	description of the contents. Variable, dimension and attribute names should begin with a letter and be
3	149	308	composed of letters (case significant), digits, and underscores. The CF-convention (NetCDF Climate
3	149	325	and Forecast Metadata Convention) permits neither the use of the hyphen character, nor leading
3	148	415	A coordinate variable is a one-dimensional variable with the same name as a dimension, which
3	149	431	names the coordinate values of the dimension. It should not contain any missing data (for example,
3	149	448	no ‘_FillValue’ or ‘missing_value’ attributes) and must be strictly monotonic (values increasing or
3	149	464	decreasing). A variable’s coordinate system is the set of coordinate variables used by the variable. It is
3	171	509	• Create coordinate variables for every dimension (except for string length dimensions).
3	171	531	• Give each coordinate variable at least ‘unit’ and ‘long_name’ attributes to document its meaning.
3	171	553	• Share dimensions to indicate that two variables use the same coordinates along that dimension.
3	186	569	If two variables’ dimensions are not related, create separate dimensions for them, even if they
3	186	586	happen to have the same length.
3	171	615	In climatological applications, often geographical coordinates are used. Variables representing lati-
3	149	631	tude must always explicitly include the ‘units’ attribute; there is no default value. The recommended
3	148	721	There is no single way to deal with time in NetCDF datasets, but in most cases, time definitions
3	148	754	Variables representing time must always explicitly include the ‘units’ attribute; there is no default
3	148	771	value. The ‘units’ attribute takes a string value formatted as per the recommendations in the UDUNITS
3	171	808	The most commonly used time units (and their abbreviations) include ‘day’, ‘hour’, ‘minute’ and
3	147	824	‘second’ or their plural forms. The units ‘year’ and ‘month’ may also be used, but they refer to fractional
3	149	841	numbers of days related to successive passages of the sun through the vernal equinox. It may be
3	148	857	preferable to use units related to the calendar year, including a ‘common_year’ of 365 days, a ‘leap_year’
3	149	874	of 366 days, a ‘Julian_year’ of 365.25 days, or a ‘Gregorian_year’ of 365.2425 days.
3	171	895	A reference time string is required to appear after the identifier ‘since’, and it may include date
3	149	911	alone, date and time, or date, time and time zone. An example of a valid reference time is ‘1970-1-1
3	149	944	Coordinated Universal Time (such as Australian Eastern Standard Time).
3	148	1044	within R. Because time is often stored as a numeric vector with a reference time and unit according to
3	149	1060	Unidata’s UDUNITS library, calendar conversion functions from UDUNITS are also included in the
3	148	1077	package.
3	171	1098	The programming interfaces provided by RNetCDF will be familiar to developers who have
3	149	1147	be preferred by some users, but it does not allow deleting and renaming of attributes. However, the
4	149	103	lower-level functions in RNetCDF allow users to define functions and data structures that match
4	149	120	their purposes. Although a high-level interface generally requires less work by users, we believe that
4	149	152	the C level, yet they still have the means to perform nearly all operations that are possible on NetCDF
4	149	169	datasets. We have included one higher-level function that is not part of the C-interface which enables
4	149	185	reading of a whole NetCDF dataset using one command, which is a common task when working with
4	149	202	such datasets.
4	149	239	into R, only the R data types character and numeric will be distinguished. The NetCDF C-library
4	149	256	converts integer and floating point values in a NetCDF file to double precision values in R, and the
4	149	272	reverse conversions are performed during write operations. Reading and writing of data arrays is
4	149	288	done by specifying a corner and a vector of edge lengths. The capabilities of the package are restricted
4	149	305	to consecutive read/write; subsampling and mapping are not currently supported by RNetCDF but
4	149	321	they can be performed easily using standard R commands.
4	171	342	The classic and 64-bit NetCDF file formats store metadata, such as dimensions, variable names
4	149	359	and attributes, in a binary header at the start of the file. The contents of variables are stored after the
4	149	375	header, and little or no padding is used to separate the sections of the file. If the metadata of the file
4	149	392	are changed after variables are written, it is likely that variables will need to be moved within the file
4	149	408	to accommodate a change in the size of the header. To avoid the overhead of such data movement, the
4	149	424	usual approach is to define all of the metadata before writing data to variables. The NetCDF C-library
4	149	441	uses distinct modes for defining metadata and writing variables, and special routines are used to
4	149	457	switch between these two modes. However, for the sake of simplicity, the mode-switching routines are
4	149	474	hidden by the RNetCDF interface, and the appropriate mode is selected for each operation requested.
4	148	592	As an example, assume we have a climatological dataset with daily temperature measurements at five
4	149	608	imaginary weather stations. Three variables are defined: time (as date with year, month, day, hour,
4	149	625	minute, second), temperature and station name:
4	171	800	When creating the NetCDF dataset, the organisation of the data should be known in advance.
4	148	816	While changes to the structure of the file are possible, they may involve significant reorganisation of
4	149	832	data within the file. To allow for expansion of a file with new data, it is possible to declare a single
4	149	849	dimension with “unlimited” size. As a first step in our example, the file has to be created and all
4	149	865	dimensions and variables need to be defined:
4	171	1057	At this point, missing values (NA) cannot be written and the time axis is not yet defined. For
4	149	1073	this purpose, attributes have to be set and the time matrix needs to be converted into a vector with a
4	149	1089	reference time (as defined already above):
5	171	149	Now the variable data can be written. To ensure that the data are written to the file and not
5	149	166	buffered in memory, the file should be closed when all operations are complete:
5	171	274	If more data is to be added to the file in the same R session, the file may be left open, but to avoid
5	149	290	loss of data, it may be desirable to force the flushing of buffers to disk using the function sync.nc() at
5	149	307	critical stages of a calculation.
5	171	328	In our example, the NetCDF dataset is written to disk with the absolute minimum of required
5	149	344	attributes. However, such a dataset is not really self-describing and would not conform with any
5	149	360	conventions. Therefore, further attributes would need to be set. According to the CF-standard, a
5	148	377	variable should have at least the attributes ‘long_name’ (e.g., ‘measured air temperature’), ‘units’
5	148	393	(e.g., ‘degrees_celsius’), and ‘standard_name’ (e.g., ‘air_temperature’) (the latter is not needed for
5	149	410	the time coordinate variable). The possible values for ‘standard_name’ can be found in the CF con-
5	148	426	ventions document. CF also requests the indication of six global attributes, namely ‘title’, ‘history’,
5	147	443	‘institution’, ‘source’, ‘comment’, and ‘references’. Although not mandatory, it is recommended
5	149	459	that NetCDF datasets comply with the CF or any other standard, so that the contents of a file are
5	149	476	described unambiguously. If these rules are followed, NetCDF datasets can be explored and processed
5	149	492	using general-purpose software, and they can be distributed or archived without any risk that the
5	149	508	data in a file could become separated from its description.
5	148	582	To show the contents of a NetCDF dataset, it must first be opened with the open.nc() function. The
5	149	615	definitions, variable definitions including their attributes, and the contents of the global attributes. For
5	149	632	the example dataset created earlier, an overview can be displayed as follows:
5	171	707	The contents of a single variable can be read from a NetCDF dataset using the var.get.nc()
5	149	723	function. For a variable that contains a large array of data, it may be desirable to read only an array
5	149	740	section from the variable, which can be accomplished by specifying a start index and number of
5	149	756	elements for each dimension of the array, as demonstrated below. Notice that the optional start and
5	148	789	value of NA, the corresponding dimension is read in full.
5	171	848	The easiest way to read the contents of all variables from a NetCDF dataset is by using the function
5	148	881	variables as named elements. Although this function has no equivalent in the NetCDF C-interface,
5	149	897	it has been added to RNetCDF to simplify a common operation. For example, the contents of all
5	148	914	variables can be read from our example dataset and the ‘temperature’ variable copied to another
5	148	930	variable using the following commands:
5	171	1006	Attributes can be read from variables that are identified by name or number, and global attributes
5	149	1022	can be read using the special variable name ‘NC_GLOBAL’. For example, conversion of relative times
5	149	1039	into calendar times requires the ‘units’ attribute from the ‘time’ variable, which may be read using
5	149	1055	the att.get.nc() function:
5	171	1114	The NetCDF C-library provides a comprehensive set of functions to determine the structure of a
5	149	1130	NetCDF dataset, including the names and sizes of dimensions and variables. These functions can be
5	149	1147	used to write programs that handle NetCDF datasets without prior knowledge of their contents. Most
6	149	103	of the inquiry functions of the C-library are accessible through the RNetCDF functions file.inq.nc(),
6	149	136	dimensions, variables and attributes, respectively. For example, the names of all dimensions in a
6	149	152	NetCDF dataset can be determined as shown below. Note that NetCDF dimensions can be referenced
6	149	169	by integers that are sequential from 0; the same applies to variables and attributes.
6	148	334	To reduce the space required for storage of NetCDF datasets, the CF-convention allows variables to be
6	149	350	stored in a packed format. The values are stored in a variable with lower precision than the original
6	149	367	data. For example, 32-bit floating point values are often converted to 16-bit integers, so that the file size
6	149	383	is approximately halved. To minimise the loss of information caused by the conversion, the original
6	148	400	values are shifted and scaled so that they span the range of the new data type.
6	171	421	The packing algorithm can be expressed as follows:
6	149	537	the packed variable in the standard attributes ‘add_offset’ and ‘scale_factor’, respectively. These
6	149	554	attributes allow the packing operation to be reversed, although the unpacked data will usually have
6	149	570	less precision than the original values.
6	171	591	Versions 1.6 or later of RNetCDF provide options to convert packed variables during reading
6	149	607	and writing. Functions var.get.nc() and var.put.nc() have optional arguments unpack and pack
6	149	624	respectively, although they have default values of FALSE to ensure compatibility with previous versions.
6	148	640	The newly released function read.nc also has an optional unpack argument, which has the default value
6	149	657	of TRUE to provide easy access to most datasets. It should be noted that the pack and unpack options
6	149	673	are only honoured for variables that define both of the attributes ‘add_offset’ and ‘scale_factor’.
6	171	694	In the example considered previously, the temperature data could be stored in a packed variable
6	149	711	during creation of the dataset as follows:
6	148	1005	The two calendar functions utcal.nc() and utinvcal.nc() of the package (converting time from
6	149	1022	arbitrary units into a UTC-referenced date and time, and vice versa) have the option to read/write date
6	149	1038	and time directly in string form. When reading such strings, the structure must be exactly ‘YYYY-MM-DD
7	171	103	It is also possible to specify another timezone as the reference time, as shown in the following
7	149	120	example using Central European Time (CET):
7	171	245	If a user needs to have the date and time information as a string, the type argument can be set
7	149	262	appropriately:
7	171	354	This functionality is intended especially for extracting axis descriptions in an efficient manner.
7	149	371	Formatting of the string is possible using R functions for strings. For example, substr() can be used
7	149	387	to extract the date or time components of the time-stamp.
7	149	487	NetCDF are accessible through RNetCDF in a way that allows users to build functions easily for their
7	149	504	specific needs. Some higher-level features for frequently used operations are provided by RNetCDF,
7	149	520	such as automatic support for missing values and packed variables and the ability to read all variables
7	149	536	into an R list. Calendar conversion functions from Unidata’s UDUNITS library are also included in
7	149	553	this package to simplify the handling of time variables in NetCDF datasets.
7	171	574	Further information can be obtained in the RNetCDF reference manual and help pages (avail-
7	171	644	The plans for future development include an option to read and write POSIXt time variables,
7	148	660	which are used by many R routines, with automatic translation to and from the time format used
7	149	677	in NetCDF datasets. The next major update will include support for the extended data model of
7	149	693	NetCDF-4. However, a first analysis of the full NetCDF-4/HDF5 data model revealed that it might be
7	149	710	difficult to map user defined data types (e.g., 6-bit structures) in a straight-forward way in R, so an
7	149	726	intensive analysis of the new data model and the requirements of R users will be needed.
7	171	747	Readers who are interested in contributing to the development of RNetCDF are invited to contact
7	149	764	the authors.
7	149	847	Brian Ripley and Uwe Ligges are gratefully acknowledged for making the Windows version possible,
7	149	864	Simon Urbanek for enabling a binary distribution for Mac OS X.
7	149	947	B. Eaton, J. Gregory, B. Drach, K. Taylor, and S. Hankin. NetCDF Climate and Forecast (CF) Metadata
7	149	1127	R. Rew and G. Davis. NetCDF: An interface for scientific data access. IEEE Computer Graphics and
8	149	103	R. Rew, G. Davis, S. Emmerson, H. Davies, and E. Hartnett. The NetCDF Users Guide, Version 3.6.1.
8	149	148	R. Rew, G. Davis, S. Emmerson, H. Davies, E. Hartnett, and D. Heimbigner. The NetCDF Users Guide,
8	148	211	Pavel Michna
8	149	227	Institute of Geography
8	148	244	Hallerstrasse 12, CH-3012 Bern
8	148	260	Switzerland
8	149	314	Milton Woods
8	148	330	Bureau of Meteorology
8	148	347	GPO Box 1289, Melbourne VIC 3001
8	148	363	Australia