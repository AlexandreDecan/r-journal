page	left	top	code
1	149	334	> y ~ x1+x2+x3 + f1+f2+f3
1	149	401	> lm(y ~ x1+x2+x3 + f1+f2+f3)
1	149	518	> logwage ~ x + id + firm
1	149	1105	> library(lfe)
1	149	1122	> est <- felm(y ~ x1+x2+x3 + G(f1)+G(f2)+G(f3))
2	149	104	> alpha <- getfe(est)
2	149	609	> demean <- function(x, flist) {
2	149	625	+   cx <- x; oldx <- x - 1
2	149	642	+   while(sqrt(sum((cx - oldx) ^ 2)) >= 1e-8) {
2	149	658	+     oldx <- cx
2	149	674	+     for(f in flist) cx <- cx - ave(cx, f)
2	149	691	+   }
2	149	707	+   return(cx)
2	149	724	+ }
2	149	951	> library(lfe)
2	149	967	> set.seed(42)
2	149	984	> x <- rnorm(100000)
2	149	1000	> f1 <- sample(10000, length(x), replace=TRUE)
2	149	1017	> f2 <- sample(10000, length(x), replace=TRUE)
2	149	1033	> y <- 2.13*x + cos(f1) + log(f2+1) + rnorm(length(x), sd=0.5)
2	149	1050	> est <- felm(y ~ x + G(f1) + G(f2))
2	149	1066	> summary(est)
2	149	1096	Call:
2	169	1112	   felm(formula = y ~ x + G(f1) + G(f2))
2	149	1145	Residuals:
3	197	104	       Min         1Q     Median         3Q        Max
3	149	120	-1.9531308 -0.3018539 -0.0003573   0.3007738  2.2052754
3	149	153	Coefficients:
3	163	169	   Estimate Std. Error t value Pr(>|t|)
3	149	186	x 2.130889   0.001768    1205    <2e-16 ***
3	149	202	---
3	149	219	Signif. codes:   0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
3	149	252	Residual standard error: 0.5013 on 80000 degrees of freedom
3	149	268	Multiple R-squared: 0.9683    Adjusted R-squared: 0.9603
3	149	285	F-statistic: 122.1 on 19999 and 80000 DF, p-value: < 2.2e-16
3	149	866	> alpha <- getfe(est)
3	149	883	> nrow(alpha)
3	149	912	[1] 20000
3	149	941	> alpha[9998:10003,]
3	238	970	              effect obs comp fe    idx
3	149	987	f1.9998   -0.2431720   9    1 f1   9998
3	149	1003	f1.9999   -0.9733257   5    1 f1   9999
3	149	1020	f1.10000 -0.8456289    9    1 f1 10000
3	149	1036	f2.1       0.4800013    9    1 f2      1
3	149	1052	f2.2       1.4868744   14    1 f2      2
3	149	1069	f2.3       1.5002583   11    1 f2      3
5	149	104	> set.seed(42)
5	149	120	> f1 <- factor(sample(50, 1000, replace=TRUE))
5	149	137	> f2 <- factor(sample(50, 1000, replace=TRUE))
5	149	153	> f3 <- factor(sample(50, 1000, replace=TRUE))
5	149	169	> ww <- compfactor(list(f1,f2,f3), WW=TRUE)
5	149	186	> head(table(ww))
5	149	216	ww
5	156	232	 1  2  3  4  5  6
5	149	249	29 20 19 16 14 14
5	149	355	> D <- t(do.call(’rBind’, lapply(list(f1,f2,f3), as, ’sparseMatrix’)))
5	149	371	> ncol(D) - as.integer(rankMatrix(D))
5	149	401	[1] 2
5	149	491	> x <- rnorm(1000)
5	149	507	> y <- 3.14*x + log(1:50)[f1] + cos(1:50)[f2] + exp(sqrt(1:50))[f3] + rnorm(1000, sd=0.5)
5	149	524	> est <- felm(y ~ x + G(f1) + G(f2) + G(f3))
5	149	540	> coef(est)
5	197	570	       x
5	149	586	3.139781
5	149	616	> is.estimable(efactory(est), est$fe)
5	149	646	[1] TRUE
5	149	983	> set.seed(42)
5	149	1000	> x <- rnorm(100)
5	149	1016	> f1 <- factor(sample(4, 100, replace=TRUE))
5	149	1032	> f2 <- factor(sample(5, 100, replace=TRUE))
5	149	1049	> f3 <- factor(sample(6, 100, replace=TRUE))
5	149	1065	> e1 <- sin(1:4)[f1] + 0.02*((1:5)^2)[f2]   + 0.17*((1:6)^3)[f3] + rnorm(100)
5	149	1082	> y <-   2.5*x + (e1-mean(e1))
5	149	1098	> est <- felm(y ~ x + G(f1) + G(f2) + G(f3))
6	149	210	> ef <- function(gamma, addnames) {
6	149	227	+   ref1 <- gamma[1]  # first level of f1
6	149	243	+   ref2 <- gamma[5]  # first level of f2
6	149	260	+   ref3 <- gamma[10] # first level of f3
6	149	276	+   # put the intercept in the first coordinate
6	149	292	+   icpt <- ref1 + ref2 + ref3
6	149	309	+   # subtract the references for each factor
6	149	325	+   # unlike the efactory() functions, we omit the zero coefficients.
6	149	342	+   result <- c(icpt, gamma[2:4]-ref1, gamma[6:9]-ref2, gamma[11:15]-ref3)
6	149	358	+   if(addnames) {
6	149	375	+     names(result) <- c(’(Intercept)’,
6	149	391	+                        paste(’f1’, levels(f1)[2:4], sep=’’),
6	149	407	+                        paste(’f2’, levels(f2)[2:5], sep=’’),
6	149	424	+                        paste(’f3’, levels(f3)[2:6], sep=’’))
6	149	440	+     attr(result, ’extra’) <- list(fe=factor(
6	149	457	+                                    c(’icpt’, rep(’f1’,3),
6	149	473	+                                      rep(’f2’,4), rep(’f3’,5))),
6	149	490	+                                  idx=factor(c(1, 2:4, 2:5, 2:6)))
6	149	506	+   }
6	149	523	+   result
6	149	539	+ }
6	149	588	> is.estimable(ef, list(f1,f2,f3))
6	149	614	[1] TRUE
6	149	681	> getfe(est, ef=ef, se=TRUE, bN=1000)
6	265	707	                 effect    fe idx         se
6	149	723	(Intercept) -10.9016327 icpt   1 0.3077378
6	149	739	f12          -0.1265879   f1   2 0.2356162
6	149	756	f13          -0.7541019   f1   3 0.2896058
6	149	772	f14          -1.7409436   f1   4 0.2776542
6	149	789	f22           0.4611797   f2   2 0.3012931
6	149	805	f23           0.6852553   f2   3 0.2898361
6	149	822	f24           0.8467309   f2   4 0.3232411
6	149	838	f25           0.5886517   f2   5 0.2841049
6	149	854	f32           1.0898551   f3   2 0.3364884
6	149	871	f33           4.3490898   f3   3 0.3058420
6	149	887	f34          10.7505266   f3   4 0.3377505
6	149	904	f35          21.3832700   f3   5 0.3649107
6	149	920	f36          36.7369397   f3   6 0.3059049
7	149	552	> set.seed(276709)
7	149	568	> x <- rnorm(10000)
7	149	585	> x2 <- rnorm(length(x))
7	149	601	> x3 <- rnorm(length(x))
7	149	655	> id <- factor(sample(2000, length(x), replace=TRUE))
7	149	672	> firm <- factor(sample(1300, length(x), replace=TRUE))
7	149	688	> id.eff <- rnorm(nlevels(id))
7	149	704	> firm.eff <- rnorm(nlevels(firm))
7	149	758	> u <- rnorm(length(x))
7	149	775	> y <- x + 0.5*x2 + id.eff[id] + firm.eff[firm] + u
7	149	845	> Q <- 0.3*x3 + x + 0.2*x2 + 0.5*id.eff[id] + 0.7*u + rnorm(length(x), sd=0.3)
7	149	861	> y <- y + 0.9*Q
7	149	948	> ivest <- felm(y ~ x + x2 + G(id) + G(firm) + Q, iv=Q ~ x3)
7	149	964	> summary(ivest)
7	149	994	Call:
7	169	1011	   felm(formula = y ~ x + x2 + G(id) + G(firm) + Q, iv = Q ~ x3)
7	149	1044	Residuals:
7	190	1060	      Min        1Q    Median        3Q       Max
7	149	1077	-6.036142 -0.903260   0.000759  0.913758   4.971614
7	149	1109	Coefficients:
7	211	1126	          Estimate Std. Error t value Pr(>|t|)
7	149	1142	x         0.94963    0.03975   23.89   <2e-16 ***
8	149	104	x2        0.49567    0.01449   34.20   <2e-16 ***
8	149	120	‘Q(fit)‘  0.94297     0.03816   24.71    <2e-16 ***
8	149	137	---
8	149	153	Signif. codes:   0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
8	149	186	Residual standard error: 1.668 on 6717 degrees of freedom
8	149	202	Multiple R-squared: 0.8112    Adjusted R-squared: 0.7189
8	149	219	F-statistic: 8.791 on 3282 and 6717 DF, p-value: < 2.2e-16
8	149	761	> set.seed(54)
8	149	778	> x <- rnorm(100000)
8	149	794	> f1 <- sample(10000, length(x), replace=TRUE)
8	149	811	> f2 <- sample(300, length(x), replace=TRUE)
8	149	827	> y <- x + cos(f1) + log(f2+1) + rnorm(length(x), sd=0.5)
8	149	881	> system.time(est <- felm(y ~ x + G(f1) + G(f2)))
8	169	911	   user   system elapsed
8	163	927	   2.420   0.008    1.955
8	149	957	> system.time(alpha <- getfe(est))
8	169	987	   user   system elapsed
8	163	1004	   0.256   0.008    0.263
9	149	104	> f3 <- (f1 + sample(5, length(x), replace=TRUE)) %% 300
9	149	120	> y <- x + cos(f1) + log(f3+1) + rnorm(length(x), sd=0.5)
9	149	137	> system.time(est <- felm(y ~ x + G(f1) + G(f3)))
9	169	166	   user   system elapsed
9	156	182	  34.624   0.000   18.804
9	149	212	> system.time(alpha <- getfe(est))
9	169	241	   user   system elapsed
9	163	258	   3.868   0.008    3.880
9	149	347	> system.time(est <- felm(y ~ x + G(f1) + factor(f3)))
9	169	376	   user   system elapsed
9	156	393	  10.340   0.832    5.379
9	149	422	> length(coef(est))
9	149	451	[1] 300
9	149	481	> system.time(alpha <- getfe(est))
9	169	510	   user   system elapsed
9	163	527	   0.192   0.000    0.192
9	149	616	> f4 <- (f1 + sample(5, length(x), replace=TRUE)^3) %% 300
9	149	632	> y <- x + cos(f1) + log(f4+1) + rnorm(length(x), sd=0.5)
9	149	648	> system.time(est <- felm(y ~ x + G(f1) + G(f4)))
9	169	678	   user   system elapsed
9	163	694	   2.564   0.000    2.081
9	149	724	> system.time(alpha <- getfe(est))
9	169	753	   user   system elapsed
9	163	770	   0.240   0.004    0.244
9	149	859	> f5 <- (f1 + sample(seq(1,197,49), length(x), replace=TRUE)) %% 300
9	149	875	> y <- x + cos(f1) + log(f5+1) + rnorm(length(x), sd=0.5)
9	149	891	> system.time(est <- felm(y ~ x + G(f1) + G(f5)))
9	169	921	   user   system elapsed
9	156	937	  32.636   0.000   17.368
9	149	967	> system.time(alpha <- getfe(est))
9	169	996	   user   system elapsed
9	163	1013	   3.972   0.000    3.975
9	149	1069	> f6 <- (f1 + sample(seq(1,201,50), length(x), replace=TRUE)) %% 300
9	149	1085	> y <- x + cos(f1) + log(f6+1) + rnorm(length(x), sd=0.5)
9	149	1101	> system.time(est <- felm(y ~ x + G(f1) + G(f6)))
9	169	1131	   user   system elapsed
9	163	1147	   2.548   0.000    2.073
10	149	104	> system.time(alpha <- getfe(est))
10	169	134	   user   system elapsed
10	163	150	   0.244   0.000    0.244
10	149	376	> library(igraph)
10	149	392	> mkgraph <- function(flist) {
10	149	409	+   graph.adjacency(tcrossprod(do.call(’rBind’,
10	149	425	+                                      lapply(flist, as, ’sparseMatrix’)))>0,
10	149	441	+                   ’undirected’, diag=FALSE)
10	149	458	+ }
10	149	512	> glist <- lapply(list(f2,f3,f4,f5,f6),
10	149	528	+                 function(f) mkgraph(lapply(list(f1,f), factor)))
10	149	582	> sapply(glist, no.clusters)
10	149	612	[1]  1  1  1  1 50
10	149	685	> sapply(glist, function(g) mean(degree(g)))
10	149	715	[1] 19.100301   8.404311  8.410719   8.400039  8.423925
10	149	1039	> for(gr in glist[1:4])
10	149	1056	+   print(fivenum(shortest.paths(gr, v=sample(V(gr),10), to=sample(V(gr),10))))
10	149	1086	[1]  2  2  4  4  4
10	149	1102	[1]  2 20 39 62 76
10	149	1118	[1]  2  4  6  6  8
10	149	1135	[1]  2 18 40 58 76