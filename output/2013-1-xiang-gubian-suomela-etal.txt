page	left	top	code
4	149	360	> Rastrigin <- function(x) {
4	149	376	+ fn.call <<- fn.call + 1
4	149	393	+ sum(x^2 - 10 * cos(2 * pi * x)) + 10 * length(x)
4	149	409	+ }
4	149	532	> options(digits = 10)
4	149	548	> dimension <- 2
4	149	565	> lower <- rep(-5.12, dimension)
4	149	581	> upper <- rep(5.12, dimension)
4	149	597	> set.seed(1234)
4	149	614	> sink("tmp.txt")
4	149	630	> fn.call <<- 0
4	149	647	> library(DEoptim)
4	149	663	> out.DEoptim <- DEoptim(fn = Rastrigin, lower = lower, upper = upper,
4	149	680	+ control = list(storepopfrom = 1))
4	149	696	> sink(NULL)
4	149	713	> out.DEoptim$optim[c(1, 2, 3)]
4	149	729	$bestmem
4	231	745	par1 par2
4	149	762	-4.775211422e-07 6.390004611e-08
4	149	795	$bestval
4	149	811	[1] 4.60502747e-11
4	149	844	$nfeval
4	149	861	[1] 402
4	149	893	> cat("DEoptim call functions", fn.call, "times.\n")
4	149	910	DEoptim call functions 4020 times.
4	149	1016	> set.seed(1234)
4	149	1032	> x.ini <- lower + runif(length(lower)) * (upper - lower)
4	149	1049	> fn.call <- 0
4	149	1065	> out.sann <- optim(par = x.ini, fn = Rastrigin, method = "SANN")
4	149	1082	> out.sann[c("value","par","counts")]
4	149	1098	$value
4	149	1115	[1] 3.980605068
4	149	1147	$par
5	149	104	[1] -1.98836973902 -0.00123560529
5	149	137	$counts
5	149	153	function gradient
5	169	169	10000 NA
5	149	276	> set.seed(1234)
5	149	293	> library(GenSA)
5	149	309	> expected.val <- 0
5	149	326	> absTol <- 1e-13
5	149	342	> fn.call <- 0
5	149	358	> out.GenSA <- GenSA(par = NULL, lower = lower, upper = upper, fn = Rastrigin,
5	149	375	+ control = list(threshold.stop = expected.val + absTol))
5	149	391	> out.GenSA[c("value", "par", "counts")]
5	149	408	$value
5	149	424	[1] 0
5	149	457	$par
5	149	474	[1] 2.750668687e-12 -2.889218652e-12
5	149	506	$counts
5	149	523	[1] 196
5	149	556	> cat("GenSA call functions", fn.call, "times.\n")
5	149	572	GenSA call functions 196 times.
5	149	761	> out.DEoptim_BFGS <- optim(par = out.DEoptim$optim$bestmem, fn = Rastrigin,
5	149	778	+ lower = lower, upper = upper, method = "L-BFGS-B")
5	149	794	> out.DEoptim_BFGS[c("value","par")]
5	149	811	$value
5	149	827	[1] 0
5	149	860	$par
5	231	876	par1 par2
5	149	893	-9.362433236e-12 1.250185258e-12
5	149	1115	> set.seed(1234)
5	149	1131	> dimension <- 30
5	149	1147	> lower <- rep(-5.12, dimension)
6	149	104	> upper <- rep(5.12, dimension)
6	149	120	> fn.call <- 0
6	149	137	> out.GenSA <- GenSA(lower = lower, upper = upper, fn = Rastrigin,
6	149	153	+ control = list(max.time=1.9, verbose=TRUE))
6	149	169	> out.GenSA[c("value")]
6	149	186	$value
6	149	202	[1] 0
9	149	967	> library("quantmod")
9	149	983	> tickers <- c("GE", "IBM", "JPM", "MSFT", "WMT")
9	149	1000	> getSymbols(tickers, from = "2000-12-01", to = "2010-12-31")
9	149	1016	[1] "GE" "IBM" "JPM" "MSFT" "WMT"
9	149	1032	> P <- NULL
9	149	1049	> for(ticker in tickers) {
9	149	1065	+ tmp <- Cl(to.monthly(eval(parse(text = ticker))))
9	149	1082	+ P <- cbind(P, tmp)
9	149	1098	+ }
9	149	1115	> colnames(P) <- tickers
9	149	1131	> R <- diff(log(P))
9	149	1147	> R <- R[-1,]
10	149	104	> mu <- colMeans(R)
10	149	120	> sigma <- cov(R)
10	149	137	> library("PerformanceAnalytics")
10	149	153	> pContribCVaR <- ES(weights = rep(0.2, 5),
10	149	169	+ method = "gaussian", portfolio_method = "component",
10	149	186	+ mu = mu, sigma = sigma)$pct_contrib_ES
10	149	202	> obj <- function(w) {
10	149	219	+ fn.call <<- fn.call + 1
10	149	235	+ if (sum(w) == 0) { w <- w + 1e-2 }
10	149	252	+ w <- w / sum(w)
10	149	268	+ CVaR <- ES(weights = w,
10	149	285	+ method = "gaussian", portfolio_method = "component",
10	149	301	+ mu = mu, sigma = sigma)
10	149	317	+ tmp1 <- CVaR$ES
10	149	334	+ tmp2 <- max(CVaR$pct_contrib_ES - 0.225, 0)
10	149	350	+ out <- tmp1 + 1e3 * tmp2
10	149	367	+ return(out)
10	149	383	+ }
10	149	434	> set.seed(1234)
10	149	450	> fn.call <- 0
10	149	467	> sink("tmp.txt")
10	149	483	> out.DEoptim <- DEoptim(fn = obj, lower = rep(0, 5), upper = rep(1, 5))
10	149	499	> sink(NULL)
10	149	516	> fn.call.DEoptim <- fn.call
10	149	532	> out.DEoptim$optim$bestval
10	149	549	[1] 0.1142884416
10	149	565	> out.DEoptim$optim$nfeval
10	149	582	[1] 402
10	149	598	> cat("DEoptim call functions", fn.call.DEoptim, "times.\n")
10	149	615	DEoptim call functions 10050 times.
10	149	696	> out.DEoptim.fur <- optim(par = out.DEoptim$optim$bestmem, fn = obj, method = "Nelder-Mead")
10	149	713	> out.DEoptim.fur$value
10	149	729	[1] 0.1141564043
10	149	794	> set.seed(1234)
10	149	811	> fn.call <<- 0
10	149	827	> out.GenSA <- GenSA(fn = obj, lower = rep(0, 5), upper = rep(1, 5),
10	149	844	+ control = list(smooth = FALSE, max.call = 3000))
10	149	860	> fn.call.GenSA <- fn.call
10	149	877	> out.GenSA$value
10	149	893	[1] 0.1141484884
10	149	909	> out.GenSA$counts
10	149	926	[1] 3000
10	149	942	> cat("GenSA call functions", fn.call.GenSA, "times.\n")
10	149	959	GenSA call functions 3000 times.
10	149	975	> wstar.GenSA <- out.GenSA$par
10	149	992	> wstar.GenSA <- wstar.GenSA / sum(wstar.GenSA)
10	149	1008	> rbind(tickers, round(100 * wstar.GenSA, 2))
10	204	1024	[,1] [,2] [,3] [,4] [,5]
10	149	1041	tickers "GE" "IBM" "JPM" "MSFT" "WMT"
10	204	1057	"18.92" "21.23" "8.33" "15.92" "35.6"
10	149	1074	> 100 * (sum(wstar.GenSA * mu) - mean(mu))
10	149	1090	[1] 0.03790568876
11	149	572	> Thomson.fn <- function(x) {
11	149	589	+ fn.call <<- fn.call + 1
11	149	605	+ x <- matrix(x, ncol = 2)
11	149	622	+ y <- t(apply(x, 1, function(z) {
11	149	638	+ c(sin(z[1]) * cos(z[2]),
11	149	655	+ sin(z[1]) * sin(z[2]), cos(z[1]))\}))
11	149	671	+ n <- nrow(x)
11	149	687	+ tmp <- matrix(NA, nrow = n, ncol = n)
11	149	704	+ index <- cbind(as.vector(row(tmp)), as.vector(col(tmp)))
11	149	720	+ index <- index[index[, 1] < index[, 2], , drop=F]
11	149	737	+ rdist <- apply(index, 1, function(z) {
11	149	753	+ tmp <- 1/sqrt(sum((y[z[1], ] - y[z[2], ])^2))
11	149	770	+ })
11	149	786	+ res <- sum(rdist)
11	149	802	+ return(res)
11	149	819	+ }
11	149	943	> n.particles <- 12
11	149	959	> lower.T <- rep(0, 2 * n.particles)
11	149	976	> upper.T <- c(rep(pi, n.particles), rep(2 * pi, n.particles))
11	149	992	>
11	149	1009	> options(digits = 10)
11	149	1025	> set.seed(1234)
11	149	1042	> sink("tmp.txt")
11	149	1058	> fn.call <<- 0
11	149	1074	> out.DEoptim <- DEoptim(fn = Thomson.fn, lower = lower.T, upper = upper.T)
11	149	1091	> sink(NULL)
11	149	1107	> fn.call.DEoptim <- fn.call
11	149	1124	> out.DEoptim$optim[c(2, 3)]
11	149	1140	$bestval
12	149	104	[1] 49.59590424
12	149	137	$nfeval
12	149	153	[1] 402
12	149	186	> cat("DEoptim call functions", fn.call.DEoptim, "times.\n")
12	149	202	DEoptim call functions 48240 times.
12	149	289	> out.DEoptim_BFGS <- optim(par = out.DEoptim$optim$bestmem, fn = Thomson.fn,
12	149	305	+ lower = lower.T, upper = upper.T, method = "L-BFGS-B")
12	149	322	> out.DEoptim_BFGS[c("value")]
12	149	338	$value
12	149	355	[1] 49.16525309
12	149	446	> set.seed(1234)
12	149	462	> fn.call <<- 0
12	149	479	> out.GenSA <- GenSA(par = NULL, lower = lower.T, upper = upper.T,
12	149	495	+ fn = Thomson.fn, control = list(max.call = fn.call.DEoptim))
12	149	512	> out.GenSA[c("value", "counts")]
12	149	528	$value
12	149	545	[1] 49.16525306
12	149	577	$counts
12	149	594	[1] 48240
12	149	627	> cat("GenSA call functions", fn.call, "times.\n")
12	149	643	GenSA call functions 48240 times.