page	left	top	code
3	186	473	      $ svn co http://svn.code.sf.net/p/ivs-ros-pkg/code/trunk/rosR
3	149	547	$ roslaunch rosR random.launch
3	149	756	$ svn co http://svn.code.sf.net/p/ivs-ros-pkg/code/trunk/rosR_demos
3	149	929	$ # replay of data (using rosbag) from rosR_demos/nodes/RJournal/sharpGP2D120.bag
3	149	946	$ roslaunch rosR_demos sharp-playbag.launch
3	149	1096	> source(paste(system("rospack find rosR", intern = TRUE), "/lib/ros.R", sep = ""),
3	149	1112	+   chdir = TRUE)
4	149	162	> ros.
4	149	179	ros.BagRead      ros.Logging           ros.ParamType                     ros.TimeNow
4	149	195	ros.Debug       ros.Message           ros.Publisher                    ros.Warn
4	149	211	ros.Error       ros.OK               ros.ReadMessage                  ros.WriteMessage
4	149	228	ros.Fatal       ros.ParamDelete      ros.SpinOnce
4	149	244	ros.Info        ros.ParamGet          ros.Subscriber
4	149	261	ros.Init        ros.ParamSet          ros.SubscriberHasNewMessage
4	149	345	> ros.Init("R_demo")
4	149	841	> subscription <- ros.Subscriber("/sharpGP2D120/Voltage", "std_msgs/Float32")
4	149	908	> while(ros.OK()) {   # evaluates to TRUE as long as the master is online
4	149	925	+     ros.SpinOnce() # fill the subscription buffers with new messages
4	149	941	+     if(ros.SubscriberHasNewMessage(subscription)) {
4	149	958	+         message <- ros.ReadMessage(subscription)
4	149	974	+         ros.Info( paste("Measured Voltage", message$data) )
4	149	990	+ } }
4	149	1007	[ INFO] [1374149363.939419670]: Measured Voltage 0.675665080547333
4	149	1023	[ INFO] [1374149364.069367143]: Measured Voltage 0.713892936706543
4	149	1040	...
5	149	527	#!/usr/bin/r
5	149	575	$ chmod +x script.R
5	149	656	$ rosrun rosR_demos demo0.R
5	149	819	> x11(width = 6, height = 4,
5	149	835	+     title = "SharpGP2D120-Monitor")
5	149	851	> Voltage <- Time <- rep(NA, 100)
5	149	868	> while(ros.OK()) {
5	149	884	+   ros.SpinOnce()
5	149	901	+   if (ros.SubscriberHasNewMessage(subscription)){
5	149	917	+     message <- ros.ReadMessage(subscription)
5	149	934	+     Voltage <- c(Voltage[-1], message$data)
5	149	950	+     Time <- c(Time[-1], ros.TimeNow())
5	149	966	+     plot(Time, Voltage, t = "l",
5	149	983	+          main = "Measured Voltage")
5	149	999	+     lines(Time,
5	149	1016	+       filter(Voltage, rep(0.1, 10), sides = 1),
5	149	1049	+ }}
5	149	1130	> as.POSIXlt(ros.TimeNow(), origin="1970-01-01")        > ros.TimeNow()
5	149	1146	[1] "2013-07-18 15:46:26 CEST"                         [1] 1374155184.932926893234
6	149	292	$ rosbag info rosR_demos/nodes/RJournal/sharpGP2D120.bag
6	149	308	...
6	149	324	start:        Nov 19 2013 14:03:28.91 (1384866208.91)
6	149	341	end:          Nov 19 2013 14:28:42.09 (1384867722.09)
6	149	357	size:         39.6 KB
6	149	374	messages:    554
6	149	390	compression: none [1/1 chunks]
6	149	407	types:        rosR_demos/Linearization [3f7dd391cdbb9d1f72822c152e8c430f]
6	238	423	             std_msgs/Float32         [73fcbf46b49191e672908e50842a83d4]
6	149	439	topics:      /sharpGP2D120/Linearization    240 msgs    : rosR_demos/Linearization
6	238	456	             /sharpGP2D120/Voltage          314 msgs    : std_msgs/Float32
6	149	590	> file <- paste(system("rospack find rosR_demos", intern = TRUE),
6	149	606	+               "/nodes/RJournal/sharpGP2D120.bag", sep = "")
6	149	622	> bag.data <-   ros.BagRead(file, c("rosR_demos/Linearization"))
6	149	690	> bag.data$topic[2]                            > bag.data$message[2]
6	149	707	[1] "/sharpGP2D120/Linearization"             [[1]]
6	149	723	> bag.data$data_type[2]                       [[1]]$dist
6	149	740	[1] "rosR_demos/Linearization"                [1] 0.031
6	149	756	> bag.data$time_stamp[2]                      [[1]]$volt
6	149	773	[1] 1374499648.961932659149                   [1] 3.0251
6	149	857	> # Copy data
6	149	873	> dist <- sapply(bag.data$message,
6	149	890	+                "[[", "dist")
6	149	906	> volt <- sapply(bag.data$message,
6	149	923	+                "[[", "volt")
6	149	939	> sharp.data <- data.frame(dist, volt)
6	149	955	> plot(sharp.data, main = "Linearization")
6	149	972	>
6	149	988	> # Linearization
6	149	1005	> sharp.reg <- lm(dist ~ poly(volt, 8),
6	149	1021	+                 data = sharp.data)
6	149	1038	> sharp.dist <- function(volt) {
6	149	1054	+  predict(sharp.reg,data.frame(volt))
6	149	1071	+ }
6	149	1087	>
6	149	1103	> # Test 1            > # Test 2
7	149	524	$ rosmsg show rosR_demos/Linearization        $ rosmsg show std_msgs/Float32
7	149	540	float32 dist                                   float32 data
7	149	556	float32 volt
7	464	573	                                              $ rosmsg show sensor_msgs/LaserScan
7	149	589	$ rosmsg show sensor_msgs/Range               std_msgs/Header header
7	149	606	uint8 ULTRASOUND=0                               uint32 seq
7	149	622	uint8 INFRARED=1                                time stamp
7	149	639	std_msgs/Header header                          string frame_id
7	163	655	   uint32 seq                                  float32 angle_min
7	163	672	   time stamp                                  float32 angle_max
7	163	688	   string frame_id                             float32 angle_increment
7	149	704	uint8 radiation_type                          float32 time_increment
7	149	721	float32 field_of_view                         float32 scan_time
7	149	737	float32 min_range                             float32 range_min
7	149	754	float32 max_range                             float32 range_max
7	149	770	float32 range                                  float32[] ranges
7	149	938	> range <- ros.Message("sensor_msgs/Range")
7	149	1006	> # equal to range.min_range as in rospy      > # or to range->min_range in roscpp
7	149	1023	> range$min_range <- 0.04                      > range$header$seq <- 0
7	149	1039	> range$max_range <- 0.30                      > range$header$frame_id <- "/sharp"
8	149	196	> scan <- ros.Message("sensor_msgs/LaserScan")
8	149	213	> typeof(scan$ranges) # element defines float32 array
8	149	229	[1] "S4"
8	149	316	> length(scan$ranges)                         > scan$ranges
8	149	332	[1] 0                                          [1] NULL
8	149	419	> append(scan$ranges, 0)                      > msg$ranges[2:4]
8	149	435	> append(scan$ranges, c(1, 2, 3))             [1] 1 2 3
8	149	452	> length(scan$ranges)                         > msg$ranges[2:4] <- c(11, 22, 33)
8	149	468	[1] 4                                          > msg$ranges[1:5]
8	149	485	> push_back(scan$ranges, c(4, 5, 6))          [1] 0 11 22 33 4
8	149	501	> length(scan$ranges)                         > pop(msg$ranges)
8	149	518	[1] 7                                          [1] 6
8	149	534	> msg$ranges                                   > msg$ranges
8	149	551	[1] 0 1 2 3 4 5 6                             [1] 0 11 22 33 4 5
8	149	637	> sum(scan$ranges)
8	149	654	Error in sum(scan$ranges) : invalid ’type’ (S4) of argument
8	149	670	> sum(scan$ranges[1:6])
8	149	687	[1] 75
8	149	880	> publication <- ros.Publisher("/sharpGP2D120/Distance", "sensor_msgs/Range")
8	149	967	> range$range <- sharp.dist(volt)             # convert voltage to distance
8	149	983	> range$header$seq <- counter                 # store a running sequence number
8	149	1000	> range$header$stamp <- ros.TimeNow()         # store the current time
8	149	1070	> ros.WriteMessage(publication, range)        # publish the adapted message
9	149	564	> ros.ParamSet("name", "value")               > ros.ParamGet("name")
9	149	580	> ros.ParamGet("name")                        [1] 12.22
9	149	596	[1] "value"                                    > ros.ParamType("name")
9	149	613	> ros.ParamSet("name", TRUE)                  [1] "double"
9	149	629	> ros.ParamType("name")                       > ros.ParamDelete("name")
9	149	646	[1] "logical"                                  > ros.ParamType("name")
9	149	662	> ros.ParamSet("name", 12.22)                 NULL
10	149	768	char* rrosGetParamString(                   char* rrosGetParamType(ros::NodeHandle* h,
10	169	784	   ros::NodeHandle* handle,                    char* p)//(==param) requested parameter
10	169	800	   char* param)                             {
10	149	817	{                                           bool b; int i; double d; std::string s;
10	163	833	   std::string val;                           if(h->getParam(p, b)) return "logical";
10	163	850	   handle->getParam(param, val);              if(h->getParam(p, i)) return "integer";
10	163	866	   return const_cast<char*>(val.c_str());     ...
10	149	883	}                                           return "NULL"; }
10	149	967	ros.ParamGet <- function(param) {           # "rros_node" is a pointer to the ROS node-
10	163	983	   p <- param; h <-rros_node;                # handle, which was created during the ini-
10	163	1000	   type <- ros.ParamType(param)             # tialization by "ros.Init()".
10	163	1016	   if (type == "logical") {                 # It is stored as a global variable and re-
10	176	1032	    return(rrosGetParamBoolean(h, p))       # quired by most of the rosR API functions.
10	163	1049	   } else if (type == "integer") {
10	176	1065	    return(rrosGetParamInteger(h, p))       ros.ParamType <- function(param) {
10	163	1082	   } else if (type == "double") {             p <- param; h <-rros_node;
10	176	1098	    return(rrosGetParamDouble(h, p))          type <- rrosGetParamType(h, p)
10	163	1115	   } else if (type == "character") {          if (type == "NULL") {
10	176	1131	    return(rrosGetParamString(h, p))            return(NULL) }
10	163	1147	   } else { return(NULL) } }                  return(type) }