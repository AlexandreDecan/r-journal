page	left	top	code
2	589	154	simpart function.
4	611	660	simpart function help
4	149	693	simpart is two sets of orthogonal basis vectors: those that span the model space and those that span
4	563	726	plot and basisplot functions
4	551	780	simpart function and its default
4	149	796	print, summary and plot methods and how to use the argument reverse. This example follows the
4	642	829	periodic and we
4	548	879	simpart the flexibility needed to
4	149	1043	> x.cat <- c(11, 17, 23, 29, 35, 40)
4	149	1127	> library(prinsimp)
4	149	1144	> data(caterpillar)
5	149	148	> cat.sim.6 <- simpart(caterpillar, simpledim = 0, x = x.cat, cov = TRUE)
5	149	207	simpledim = 0, the resulting model space basis vectors are simply the usual principal components of
5	498	224	caterpillar. Recall that, for all values of
5	149	240	simpledim, the model space basis vectors are always the eigenvectors of caterpillar corresponding
5	149	310	simpart automatically sets negative eigenvalues equal to 0, reconstructs the covariance matrix and
5	149	375	> plot(cat.sim.6)
5	149	1054	> cat.sim.5 <- simpart(caterpillar, simpledim = 1, x = x.cat, cov = TRUE)
6	149	100	> summary(cat.sim.5, loadings = TRUE)
6	149	116	Simple partition (first divided differences): 1 simple basis
6	265	149	model 1 model 2 model 3 model 4 model 5 simple 1
6	149	165	Simplicity 1.85 3.54 1.25
6	478	165	2.47 3.55 2.68
6	149	182	%-var explained 59.5 19.2 14.7
6	478	182	5.85 0.731 <.1
6	149	198	Cumulative %-var 59.5 78.7 93.4
6	478	198	99.3 100 <.1
6	149	231	Loadings:
6	176	248	model 1 model 2 model 3 model 4 model 5 simple 1
6	149	264	11 0.022 -0.031 0.059 0.022 0.948
6	492	264	-0.308
6	149	281	17 -0.038 0.384 -0.141 -0.479 0.270
6	499	281	0.727
6	149	297	23 0.243 0.317 0.698 0.510 0.047
6	499	297	0.300
6	149	313	29 0.074 0.284 -0.687 0.650 0.074
6	499	313	0.121
6	149	330	35 -0.512 0.736 0.088 -0.082 -0.102
6	492	330	-0.413
6	149	346	40 0.819 0.359 -0.098 -0.284 -0.098
6	492	346	-0.317
6	479	372	summary “restarts” the accumulation for the
6	149	497	> cat.sim.5$variance
6	149	513	$model
6	149	530	[1] 0.618482630 0.199899686 0.153080939 0.060800542 0.007597639
6	149	546	$simple
6	149	563	[1] 2.305732e-17
6	149	579	$full
6	149	596	[1] 0.618482630 0.199899686 0.153080939 0.060800542 0.007597639 0.000000000
6	654	659	simpledim = 2.
6	682	708	display =
6	149	725	list() argument in the plot method.
6	149	751	> cat.sim.4 <- simpart(caterpillar, simpledim = 2, x = x.cat, cov = TRUE)
6	149	767	> plot(cat.sim.4, display = list(simple = c(1, 2)))
6	668	847	plot method
6	547	896	basisplot, illustrated in the next
6	587	1019	simpledim equal to d.
6	149	1045	> print(cat.sim.4)
6	149	1061	Call:
6	149	1078	simpart(y = caterpillar, simpledim = 2, x = x.cat, cov = TRUE)
6	149	1111	Simplicity measure: first divided differences
6	149	1144	Partition simplicity (2 simple basis):
7	156	100	model 1 model 2 model 3 model 4 simple 1 simple 2
7	149	116	1.848069 3.539756 1.245756 2.471847 3.726200 2.501706
7	149	149	Full space simplicity:
7	163	165	full 1 full 2 full 3 full 4 full 5
7	471	165	full 6
7	149	182	4.000000 3.773655 3.132870 2.237603 1.370816 0.818390
7	149	251	> cat.sim.4$varperc$simple
7	149	267	[1] 0.6244724 0.1061671
7	149	284	> summary(cat.sim.4)
7	149	300	Simple partition (first divided differences): 2 simple basis
7	265	333	model 1 model 2 model 3 model 4 simple 1 simple 2
7	149	349	Simplicity 1.85 3.54 1.25
7	478	349	2.47 3.73 2.50
7	149	366	%-var explained 59.5 19.2 14.7
7	478	366	5.85 0.624 0.106
7	149	382	Cumulative %-var 59.5 78.7 93.4
7	478	382	99.3 0.624 0.731
7	626	458	simpledim=3,2,1,0,
7	630	1019	simpart, each basis
7	149	1127	> plot(simpart(caterpillar, simpledim = 2, x = x.cat, cov = TRUE,
7	149	1144	+ measure = "first",
8	149	100	+ rev = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)))
8	149	116	> # Reverses the second basis vector, in this case the second principal component
8	474	915	demo(periodic), which will also provide the
9	149	100	> periodic.example(L = 72, M = 5, K = 12, a0, a1, a2, sd.sigma, e, n = 100, x.max)
9	730	143	a0
9	149	203	> # Simulate using demo(periodic)
9	149	219	> example <- periodic.example(a0 = 4, a1 = 4, a2 = 0, sd.sigma = 0.2,
9	149	236	+ e = 1, x.max = 72)
9	623	950	princomp or simpart
9	472	1048	basisplot.
9	149	1075	> # We do not need to specify the x vector because
9	149	1092	> # the data are present in unit increments from 1 to 72, the default for x
9	149	1108	> periodic.full <- simpart(example, simpledim = 0, "periodic", period = 12)
9	149	1125	> par(mfrow = c(3, 2))
9	149	1141	> basisplot(periodic.full, display = list(model = 1:6))
10	696	626	simpart
10	149	685	> periodic.sim <- simpart(example, simpledim = 70, measure = "periodic", period = 12)
10	149	702	> # Produce Figure 6.
10	149	718	> par(mfrow = c(3, 4)); basisplot(periodic.sim, display = list(simple = 1:12))
10	149	821	> plot(periodic.sim$variance$simple, periodic.sim$simplicity$simple,
10	149	838	+ xlab = "Variance", ylab = "Simplicity")
10	149	1067	> plot(periodic.sim$scores[,1], periodic.sim$scores[,3],
10	149	1083	+ xlab = "Score on first model basis vector",
10	149	1100	+ ylab = "Score on first simplicity basis vector")
11	648	750	blend_measures
11	149	842	> blend_measures <- function(alpha, x, period) {
11	183	858	(1-alpha) * prinsimp:::lambda_second(x) +
11	211	874	(alpha) * prinsimp:::lambda_periodic(x, period)
11	149	891	}
11	149	907	> # Recall that the periodic simplicity measure requires an extra period argument
11	149	1061	> # We will use a 50-50 weighting of the two periodic and
11	149	1078	> # second divided difference Lambda matrices
11	149	1094	> periodic.blend <- simpart(example, simpledim = 70,
11	149	1111	+ measure = "blend_measures", alpha = 0.5, period = 12)
11	149	1127	> plot(periodic.blend$variance$simple, periodic.blend$simplicity$simple,
11	197	1144	xlab = "Variance", ylab = "Simplicity Score")
12	149	641	> periodic.blend$variance$simple[2]
12	149	658	> periodic.blend$varperc$simple[2]
12	149	674	> basisplot(periodic.blend, display = list(simple = 2))
12	149	690	> lines(0.16 * sin(2*pi*(1:72)/12))
12	548	969	simpart by defining the function
12	149	986	constant_simple. Since our simplicity measure only depends on the length of the input vector, we
12	149	1027	> constant_simple <- function(x) {
12	183	1044	n <- length(x)
12	183	1060	matrix(1,n,n)/n
12	163	1077	}
12	149	1127	> constant.example <- simpart(caterpillar, simpledim = 4,
12	355	1144	measure = "constant_simple", x = x.cat)
13	600	593	simpart function. This
13	515	609	y in the form of a matrix or a formula
13	186	797	full).
13	610	981	simpart. In addition to
13	488	1014	plot method that we have used above puts
13	681	1047	basisplot,
13	148	1063	varsimp, and varperc. (The plot method merely sets up the layout and calls those functions for the
14	633	635	measure argument.
14	592	668	x, that receives values of