page	left	top	code
1	149	1115	"db.Rquery" object, which is just a wrapper for a series of operations and contains a SQL query string
2	149	1013	"as.db.data.frame" to execute the SQL query and save the result into a new table. This design gives
3	149	866	"db.data.frame" has two sub-classes, "db.table" and "db.view", which are wrappers for tables and
3	149	912	> library(PivotalR)
3	149	928	> conn.id <- db.connect(port = 14526, dbname = "madlib", host = "localhost")
3	149	945	Created a connection to database with ID 1
3	149	961	> x <- db.data.frame("abalone")
4	149	149	"db.data.frame" wrapper that points to this table.
4	171	170	    "preview" (or its alias "lookat" and "lk") transfers the data from the database into Râ€™s memory.
4	149	203	"data.frame" in R.
4	149	233	> lookat (x, 10)
4	169	249	   id sex length diameter height whole shucked viscera shell rings
4	149	266	1   4   M 0.440    0.365 0.125 0.5160 0.2155 0.1140 0.155    10
4	149	282	2   8   F 0.545    0.425 0.125 0.7680 0.2940 0.1495 0.260    16
4	149	298	3 12  M 0.430   0.350 0.110 0.4060 0.1675 0.0810 0.135   10
4	149	315	4 16  M 0.500   0.400 0.130 0.6645 0.2580 0.1330 0.240   12
4	149	331	5 20  M 0.450   0.320 0.100 0.3810 0.1705 0.0750 0.115    9
4	149	348	6 24  F 0.550   0.415 0.135 0.7635 0.3180 0.2100 0.200    9
4	149	364	7 28  M 0.590   0.445 0.140 0.9310 0.3560 0.2340 0.280   12
4	149	381	8 32  F 0.680   0.560 0.165 1.6390 0.6055 0.2805 0.460   15
4	149	397	9 36  M 0.465   0.355 0.105 0.4795 0.2270 0.1240 0.125    8
4	149	414	10 40   M 0.355    0.290 0.090 0.3275 0.1340 0.0860 0.090     9
4	149	476	as.db.data.frame. MADlib is an in-database library and we have to convert "db.Rquery" into an
4	149	693	> x <- db.data.frame ("abalone")
4	149	709	> dim (x)
4	149	726	[1] 4177   10
4	149	742	> names (x)
4	156	759	 [1] "id"       "sex"      "length"   "diameter" "height"   "whole"
4	156	775	 [7] "shucked" "viscera" "shell"    "rings"
4	149	792	> x$rings <- x$rings + 2 / 3
4	149	808	> x$newCol <- (x$rings + x[['length']]) < 10
4	149	824	> content(x)
4	149	841	[1] "select \"id\" as \"id\", \"sex\" as \"sex\", \"length\" as \"length\",
4	149	857	\"diameter\" as \"diameter\", \"height\" as \"height\", \"whole\" as \"whole\",
4	149	874	\"shucked\" as \"shucked\", \"viscera\" as \"viscera\", \"shell\" as \"shell\",
4	149	890	(\"rings\")::double precision + 0.666666666666667 as \"rings\",
4	149	907	(((\"rings\")::double precision + 0.666666666666667)::double precision
4	149	923	+ (\"length\"))::double precision < 10 as \"newCol\" from \"abalone\""
4	149	1040	lk(A[3,4],-1) may return multiple values. This is different from the behavior of "data.frame",
5	149	165	"db.Rquery" object) from the two tables and at the same time explicitly specify how to match the
5	149	241	> x <- db.data.frame("abalone")
5	149	258	> y <- db.data.frame("abalone")
5	149	274	> z <- merge(x, y, by = NULL) # cross join two tables
5	149	291	> names(z)
5	156	307	 [1] "id_x"       "sex_x"      "length_x"   "diameter_x" "height_x"
5	156	324	 [6] "whole_x"    "shucked_x" "viscera_x" "shell_x"    "rings_x"
5	149	340	[11] "id_y"       "sex_y"      "length_y"   "diameter_y" "height_y"
5	149	357	[16] "whole_y"    "shucked_y" "viscera_y" "shell_y"    "rings_y"
5	149	373	> z$sex_x == z$sex_y # This is a db.Rquery object
5	149	462	> x <- as.db.data.frame(abalone, conn.id=1)
5	149	479	The data in the data.frame abalone is stored into the table in
5	149	495	database madlib on localhost !
5	149	568	> lookat(sort(x, FALSE, x$id), 10) # load 10 rows of the sorted data
5	169	584	   id sex length diameter height whole shucked viscera shell rings
5	149	601	1   1   M 0.455    0.365 0.095 0.5140 0.2245 0.1010 0.150    15
5	149	617	2   2   M 0.350    0.265 0.090 0.2255 0.0995 0.0485 0.070     7
5	149	633	3   3   F 0.530    0.420 0.135 0.6770 0.2565 0.1415 0.210     9
5	149	650	4   4   M 0.440    0.365 0.125 0.5160 0.2155 0.1140 0.155    10
5	149	666	5   5   I 0.330    0.255 0.080 0.2050 0.0895 0.0395 0.055     7
5	149	683	6   6   I 0.425    0.300 0.095 0.3515 0.1410 0.0775 0.120     8
5	149	699	7   7   F 0.530    0.415 0.150 0.7775 0.2370 0.1415 0.330    20
5	149	716	8   8   F 0.545    0.425 0.125 0.7680 0.2940 0.1495 0.260    16
5	149	732	9   9   M 0.475    0.370 0.125 0.5095 0.2165 0.1125 0.165     9
5	149	749	10 10   F 0.550    0.440 0.150 0.8945 0.3145 0.1510 0.320    19
5	149	808	as.db.data.frame.
5	149	995	"madlib.lm" allows "|" in the formula, which means that the model is fit on a subset of the data
5	149	1038	> ## fit one different model to each group of data with the same sex
5	149	1054	> fit <- madlib.lm(rings ~ . - id | sex, data = x)
5	149	1081	sex has 3 distinct values, and thus fit is a list of 3 elements. Each element is the linear regression
5	149	1127	> ## apply the model to data in another database
5	149	1144	> lookat(mean((x$rings - predict(fit, x))^2)) # mean square error
6	163	100	  rings_madlib_predict_opr_opr_avg
6	149	116	1                        4.647291
6	149	204	> ## plot the result
6	149	220	> ap <- cbind(x$rings, predict(fit, x)) # combine two columns
6	149	237	> plot(lookat(sort(ap, FALSE, NULL), 100)) # plot a random sample
6	149	253	> ## ap <- cbind(x$rings[x$sex == "I"], predict(fit[[1]], x[x$sex == "I",]))
6	149	270	> ## plot(lookat(sort(ap, FALSE, NULL), 100)) # plot a random sample
6	149	700	> v <- x
6	149	716	> v$sex <- as.factor(v$sex) # specify which column to pivot
6	149	733	> f <- madlib.lm(rings ~ . - id, data = v)
6	149	749	> f
6	149	765	MADlib Linear Regression Result
6	149	798	Call:
6	149	815	madlib.lm(formula = rings ~ . - id, data = v)
6	149	848	---------------------------------------
6	149	880	Coefficients:
6	238	897	             Estimate Std. Error t value       Pr(>|t|)
6	149	913	(Intercept)   3.89464    0.29157 13.3576 6.992e-40 ***
6	149	930	sex:M         0.05772    0.08335   0.6925 4.887e-01
6	149	946	sex:I        -0.82488    0.10240 -8.0558 1.022e-15 ***
6	149	963	length       -0.45834    1.80912 -0.2533 8.000e-01
6	149	979	diameter     11.07510    2.22728   4.9725 6.876e-07 ***
6	149	996	height       10.76154    1.53620   7.0053 2.861e-12 ***
6	149	1012	whole         8.97544    0.72540 12.3730 1.469e-34 ***
6	149	1028	shucked     -19.78687    0.81735 -24.2086 2.988e-121 ***
6	149	1045	viscera     -10.58183    1.29375 -8.1792 3.757e-16 ***
6	149	1061	shell         8.74181    1.12473   7.7723 9.639e-15 ***
6	149	1078	---
6	149	1094	Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
6	149	1127	R-squared: 0.5378844
6	149	1144	Condition Number: 137.2694
7	163	143	  fit <- madlib.glm(rings < 10 ~ ., data = x, family = "binomial")
7	163	160	  step(fit)
7	163	237	  ## generic bagging
7	163	254	  fit <- generic.bagging(function(data) {
7	341	270	                            madlib.lm(rings ~ . - id - sex, data = data)
7	320	287	                        },
7	320	303	                         data = x, nbags = 10, fraction = 0.85)
7	163	336	  pred <- predict(fit, newdata = x) # make prediction
7	163	369	  lookat(mean((x$rings - pred)^2))
7	149	615	> z <- db.data.frame("madlibtestdata.lin_auto_mpg_oi")
7	149	632	> lookat(z, 10)
7	169	648	   x.1 x.2 x.3 x.4 x.5 x.6 x.7 y
7	149	665	1     8 383 170 3563 10.0   70    1 15
7	149	681	2     8 340 160 3609 8.0   70    1 14
7	149	697	3     8 400 150 3761 9.5   70    1 15
7	149	714	4     4 121 113 2234 12.5   70    2 26
7	149	730	5     8 360 215 4615 14.0   70    1 10
7	149	747	6     8 304 193 4732 18.5   70    1 9
7	149	763	7     4 113   95 2228 14.0   71    3 25
7	149	780	8     6 250   88 3302 15.5   71    1 19
7	149	796	9     8 351 153 4154 13.5   71    1 14
7	149	812	10    8 318 150 4096 13.0   71    1 14
7	149	829	> madlib.lm(y ~ x, data = z)
7	149	845	MADlib Linear Regression Result
7	149	878	Call:
7	149	895	madlib.lm(formula = y ~ x, data = z)
7	149	928	---------------------------------------
7	149	960	Coefficients:
7	245	977	              Estimate Std. Error t value      Pr(>|t|)
7	149	993	(Intercept) -17.218435   4.644294 -3.7074 2.402e-04 ***
7	149	1010	x[1]         -0.493376   0.323282 -1.5261 1.278e-01
7	149	1026	x[2]          0.019896   0.007515 2.6474 8.445e-03 **
7	149	1043	x[3]         -0.016951   0.013787 -1.2295 2.196e-01
7	149	1059	x[4]         -0.006474   0.000652 -9.9288 7.883e-21 ***
7	149	1076	x[5]          0.080576   0.098845 0.8152 4.155e-01
7	149	1092	x[6]          0.750773   0.050973 14.7288 3.069e-39 ***
7	149	1108	x[7]          1.426140   0.278136 5.1275 4.666e-07 ***
7	149	1125	---
7	149	1141	Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
8	149	116	R-squared: 0.8214781
8	149	133	Condition Number: 85850.33
8	149	279	> delete("null_data", conn.id = 2)
8	149	295	[1] TRUE
8	149	312	> w <- as.db.data.frame(null.data, "null_data", conn.id = 2)
8	149	328	The data in the data.frame null.data is stored into the table null_data in database
8	149	345	madlib on localhost !
8	149	361	> dim(w)
8	149	378	[1] 67126    10
8	149	394	> lookat(w, 10)
8	169	411	   sf_mrtg_pct_assets ris_asset lncrcd lnauto lnconoth lnconrp intmsrfv
8	149	427	1               31.62    208596      0     NA    18260      44        0
8	149	443	2               20.66     34647      0     NA     2997       0        0
8	149	460	3               14.95    160175      0     NA    15164       0        0
8	149	476	4               17.49    117398      0     NA    12365       0        0
8	149	493	5               35.59    233592      0     NA     6261     151        0
8	149	509	6               11.57    166387      0     NA    36356       0        0
8	149	526	7               10.56    102891      0     NA     6311       0        0
8	149	542	8                6.05     30138      0     NA     2664       0        0
8	149	558	9               14.53   1615727      0     NA    80829    1106      105
8	149	575	10              12.88     83090      0     NA    11815       0        0
8	169	591	   lnrenr1a lnrenr2a lnrenr3a
8	149	608	1        NA       NA       NA
8	149	624	2        NA       NA       NA
8	149	641	3        NA       NA       NA
8	149	657	4        NA       NA       NA
8	149	674	5        NA       NA       NA
8	149	690	6        NA       NA       NA
8	149	706	7        NA       NA       NA
8	149	723	8        NA       NA       NA
8	149	739	9        NA       NA       NA
8	149	756	10       NA       NA       NA
8	149	772	> db.objects("null", conn.id = 2)
8	149	789	[1] "madlibtestdata.credit_nulls"         "madlibtestdata.rf_golf_nullclass"
8	149	805	[3] "madlibtestdata.rf_nursery_nullclass" "madlibtestdata.table_has_null"
8	149	821	[5] "public.null_data"
8	149	838	> for (i in 1:10) w <- w[!is.na(w[i]),] # filter NULL values
8	149	854	> dim(w)
8	149	871	[1] 6789   10
8	149	887	> madlib.lm(sf_mrtg_pct_assets ~ ., data = w)
8	149	904	MADlib Linear Regression Result
8	149	937	Call:
8	149	953	madlib.lm(formula = sf_mrtg_pct_assets ~ ., data = w)
8	149	986	---------------------------------------
8	149	1019	Coefficients:
8	245	1035	              Estimate Std. Error   t value      Pr(>|t|)
8	149	1052	(Intercept) 1.528e+01 1.471e-01 103.90694 0.000e+00 ***
8	149	1068	ris_asset    1.602e-08 1.141e-08   1.40440 1.602e-01
8	149	1084	lncrcd      -1.608e-07 7.725e-08 -2.08170 3.741e-02 *
8	149	1101	lnauto      -3.871e-07 3.447e-07 -1.12301 2.615e-01
8	149	1117	lnconoth    -7.498e-07 4.370e-07 -1.71559 8.628e-02 .
8	149	1134	lnconrp      7.575e-08 1.229e-06   0.06165 9.508e-01
9	149	100	intmsrfv     8.609e-06 1.790e-06   4.81005 1.542e-06 ***
9	149	116	lnrenr1a    -4.827e-06 3.837e-05 -0.12580 8.999e-01
9	149	133	lnrenr2a     1.358e-04 2.359e-05   5.75605 8.986e-09 ***
9	149	149	lnrenr3a    -3.133e-05 4.273e-06 -7.33355 2.502e-13 ***
9	149	165	---
9	149	182	Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
9	149	215	R-squared: 0.01083685
9	149	231	Condition Number: 37854014
9	171	257	   na.action is supported by madlib.lm, madlib.glm and madlib.elnet. The user can define his
9	163	534	  ## linear regression
9	163	550	  linregr <- function (x, y)
9	163	566	  {
9	176	583	    a <- crossprod (x)
9	176	599	    b <- crossprod (x, y)
9	176	616	    solve (lookat (a)) %*% lookat(b)
9	163	632	  }
9	163	665	  linregr (db.array(1, x[,-c (1,2,10)]), x[["rings"]])
9	163	749	  ## PCA
9	163	765	  ## compute all eigenvectors in parallel
9	163	782	  ## can be used for tables with features < 1000
9	163	815	  pca <- function (x, center = TRUE, scale = FALSE)
9	163	831	  {
9	176	848	    y <- scale(x, center = center, scale = scale) # centering and scaling
9	176	864	    z <- as.db.data.frame(y, verbose = FALSE) # create an intermediate
9	176	880	    # table to speed up computation
9	176	897	    m <- lookat(crossprod(z)) # one scan of the table to compute Z^T * Z
9	176	913	    d <- delete(z) # delete the intermediate table
9	176	930	    res <- eigen(m) # only this computation is in R
9	176	946	    n <- attr(y, "row.number") # save the computation to count rows
9	176	979	    ## return the result
9	176	996	    list(val = sqrt(res$values/(n-1)), # eigenvalues
9	176	1012	    vec = res$vectors, # columns of this matrix are eigenvectors
9	176	1028	    center = attr(y, "scaled:center"),
9	176	1045	    scale = attr(y, "scaled:scale"))
9	163	1061	  }
9	163	1094	  dat <- db.data.frame("madlibtestdata.pca_mat_600_100", conn.id = 2)
9	163	1127	  q <- pca(dat[,-1])
10	149	898	linregr_train function, which has a wrapper function "madlib.lm".